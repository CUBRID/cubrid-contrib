<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="take.undTake">
	<resultMap id="undTakeSched-result" class="rms.take.undTake.domain.UndTakeSchedResult">
		<result property="takeOrgCd" 					column="TAKE_ORG_CD"/>
		<result property="takeOrgNm" 					column="TAKE_ORG_NM"/>
		<result property="takeOrgAbbrNm" 				column="TAKE_ORG_ABBR_NM"/>
		<result property="takeYyyy" 					column="TAKE_YYYY"/>
		<result property="erecordTakeStartPlanYmd" 		column="ERECORD_TAKE_START_PLAN_YMD"/>
		<result property="erecordTakeClosePlanYmd" 		column="ERECORD_TAKE_CLOSE_PLAN_YMD"/>
		<result property="noelctTakeStartPlanYmd" 		column="NOELCT_TAKE_START_PLAN_YMD"/>
		<result property="noelctTakeClosePlanYmd" 		column="NOELCT_TAKE_CLOSE_PLAN_YMD"/>
		<result property="takeSchedSetState"			column="TAKE_SCHED_SET_STATE"/>
	</resultMap>
	
	<resultMap id="undTakeRecv-result" class="rms.take.undTake.domain.UndTakeRecv">
		<result property="recordCenterId"		column="record_center_id"/>
		<result property="takeYyyy" 			column="TAKE_YYYY"/>
		<result property="takeOrgCd" 			column="TAKE_ORG_CD"/>
		<result property="takeOrgNm" 			column="TAKE_ORG_NM"/>
		<result property="takeOrgAbbrNm" 		column="TAKE_ORG_ABBR_NM"/>
		<result property="creatSysCd" 			column="CREAT_SYS_CD"/>
		<result property="creatSysCdNm" 		column="CREAT_SYS_CD_NM"/>
		<result property="takeSno" 				column="TAKE_SNO"/>
		<result property="parentTakeSno" 		column="PARENT_TAKE_SNO"/>
		<result property="takeStateDivCd" 		column="TAKE_STATE_DIV_CD"/>
		<result property="takeStateDivCdNm" 	column="TAKE_STATE_DIV_CD_NM"/>
		<result property="recvFolderCnt" 		column="RECV_FOLDER_CNT"/>
		<result property="recvRecordCnt" 		column="RECV_RECORD_CNT"/>
		<result property="recvAttachCnt" 		column="RECV_ATTACH_CNT"/>
		<result property="recvFinStateCd" 		column="recv_fin_state_cd"/>
		<result property="recvFinStateCdNm" 	column="recv_fin_state_cd_nm"/>
		<result property="folderCnt01" 			column="FOLDER_CNT01"/>
		<result property="recordCnt01" 			column="RECORD_CNT01"/>
		<result property="folderCnt02" 			column="FOLDER_CNT02"/>
		<result property="recordCnt02" 			column="RECORD_CNT02"/>
		<result property="folderCnt03" 			column="FOLDER_CNT03"/>
		<result property="recordCnt03" 			column="RECORD_CNT03"/>
		<result property="attachCnt01" 			column="ATTACH_CNT01"/>
		<result property="attachCnt02" 			column="ATTACH_CNT02"/>
		<result property="attachCnt03" 			column="ATTACH_CNT03"/>
		<result property="folderCnt04" 			column="FOLDER_CNT04"/>
		<result property="folderCnt05" 			column="FOLDER_CNT05"/>
		<result property="rjctHistCnt" 			column="RJCT_HIST_CNT"/>
		<result property="regDtime" 			column="reg_dtime"/>
		<result property="recvReFlag" 			column="recv_re_flag"/>
	</resultMap>
	
	<resultMap id="undTakeCheck-result" class="rms.take.undTake.domain.UndTakeCheck">
		<result property="takeOrgCd" 			column="TAKE_ORG_CD"/>
		<result property="takeOrgNm" 			column="TAKE_ORG_NM"/>
		<result property="takeOrgAbbrNm" 		column="TAKE_ORG_ABBR_NM"/>
		<result property="takeYyyy" 			column="TAKE_YYYY"/>
		<result property="takeSno" 				column="TAKE_SNO"/>
		<result property="creatSysCd" 			column="CREAT_SYS_CD"/>
		<result property="creatSysCdNm" 		column="CREAT_SYS_CD_NM"/>
		<result property="takeStateDivCd" 		column="TAKE_STATE_DIV_CD"/>
		<result property="takeStateDivCdNm" 	column="TAKE_STATE_DIV_CD_NM"/>
		<result property="virusCheckFlag" 		column="VIRUS_CHECK_FLAG"/>
		<result property="recvFolderCnt" 		column="RECV_FOLDER_CNT"/>
		<result property="recvRecordCnt" 		column="RECV_RECORD_CNT"/>
		<result property="folderCnt01" 			column="FOLDER_CNT01"/>
		<result property="recordCnt01" 			column="RECORD_CNT01"/>
		<result property="folderCnt02" 			column="FOLDER_CNT02"/>
		<result property="recordCnt02" 			column="RECORD_CNT02"/>
		<result property="folderCnt03" 			column="FOLDER_CNT03"/>
		<result property="recordCnt03" 			column="RECORD_CNT03"/>
		<result property="folderCnt04" 			column="FOLDER_CNT04"/>
		<result property="recordCnt04" 			column="RECORD_CNT04"/>
		<result property="folderCnt05" 			column="FOLDER_CNT05"/>
		<result property="recordCnt05" 			column="RECORD_CNT05"/>
		<result property="folderCnt06" 			column="FOLDER_CNT06"/>
		<result property="recordCnt06" 			column="RECORD_CNT06"/>
		<result property="folderCnt07" 			column="FOLDER_CNT07"/>
		<result property="recordCnt07" 			column="RECORD_CNT07"/>
		<result property="erecordFlagCnt" 		column="erecord_flag_cnt"/>
	</resultMap>
	
	<resultMap id="findTkFolderTakeInfo-result" class="rms.take.undTake.domain.TkOrgTakePlan">
		<result property="takeYyyy" 			column="take_yyyy"/>
		<result property="takeOrgCd" 			column="take_org_cd"/>
		<result property="takeSno"	 			column="take_sno"/>
		<result property="creatSysCd" 			column="creat_sys_cd"/>
	</resultMap>
	
	<resultMap id="undTakeCheckRjctInfrm-result" class="rms.take.undTake.domain.UndTakeCheckRjctInfrm">
		<result property="recordCenterId"		column="record_center_id"/>
		<result property="takeYyyy"				column="take_yyyy"/>
		<result property="takeOrgCd"			column="take_org_cd"/>
		<result property="creatSysCd"			column="creat_sys_cd"/>
		<result property="takeSno"				column="take_sno"/>
		<result property="takeStateDivCd" 		column="take_state_div_cd"/>
		<result property="rjctYmd" 				column="rjct_ymd"/>
		<result property="rjctRsn" 				column="rjct_rsn"/>
		<result property="rjctInfrmXml"			column="infrm_file_nm"/>
		<result property="infrmDivCd"			column="infrm_div_cd"/>
	</resultMap>
	
	<resultMap id="undTakeCheckTakeInfrm-result" class="rms.take.undTake.domain.UndTakeCheckTakeInfrm">
		<result property="recordCenterId"		column="record_center_id"/>
		<result property="takeYyyy"				column="take_yyyy"/>
		<result property="takeOrgCd"			column="take_org_cd"/>
		<result property="creatSysCd"			column="creat_sys_cd"/>
		<result property="takeSno"				column="take_sno"/>
		<result property="takeStateDivCd" 		column="take_state_div_cd"/>
		<result property="takeYmd" 				column="take_ymd"/>
		<result property="takeUserNm" 			column="take_user_nm"/>
		<result property="takovrUserNm"			column="takovr_user_nm"/>
		<result property="takeInfrmXml"			column="infrm_file_nm"/>
		<result property="infrmDivCd"			column="infrm_div_cd"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolder-result" class="rms.take.undTake.domain.UndTakeCheckFolder">
		<result property="recordCenterId"		column="record_center_id"/>
		<result property="folderTakeSeq" 		column="folder_take_seq"/>
		<result property="clssId" 				column="clss_id"/>
		<result property="clssNm" 				column="clss_nm"/>
		<result property="title" 				column="title"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="presvTermCd" 			column="presv_term_cd"/>
		<result property="presvTermNm" 			column="presv_term_nm"/>
		<result property="erecordFlag" 			column="erecord_flag"/>
		<result property="erecordFlagNm" 		column="erecord_flag_nm"/>
		<result property="virusFlag" 			column="virus_flag"/>
		<result property="errorFlag" 			column="error_flag"/>
		<result property="autoCheck" 			column="auto_check"/>
		<result property="examRsltCd" 			column="exam_rslt_cd"/>
		<result property="examRsltNm" 			column="exam_rslt_nm"/>
		<result property="rjctFlag" 			column="rjct_flag"/>
		<result property="rjctCont" 			column="rjct_cont"/>
		<result property="takeFinFlag" 			column="take_fin_flag"/>
		<result property="status" 				column="status"/>
		<result property="statusNm"				column="status_nm"/>
		<result property="takeFinStateCd"		column="take_fin_state_cd"/>
		<result property="recvReCnt"			column="recv_re_cnt"/>
		<result property="nEfolderStateCd"		column="nefolder_state_cd"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderCheckedList-result" class="rms.take.undTake.domain.UndTakeCheckFolder">
		<result property="recordCenterId" 		column="record_center_id"/>
		<result property="folderTakeSeq" 		column="folder_take_seq"/>
		<result property="orgCd" 				column="org_cd"/>
		<result property="clssId" 				column="clss_id"/>
		<result property="clssNm" 				column="clss_nm"/>
		<result property="title" 				column="title"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="presvTermCd" 			column="presv_term_cd"/>
		<result property="presvTermNm" 			column="presv_term_nm"/>
		<result property="erecordFlag" 			column="erecord_flag"/>
		<result property="erecordFlagNm" 		column="erecord_flag_nm"/>
		<result property="virusFlag" 			column="virus_flag"/>
		<result property="errorFlag" 			column="error_flag"/>
		<result property="autoCheck" 			column="auto_check"/>
		<result property="recordRegCnt"			column="record_reg_cnt"/>
		<result property="examRsltCd" 			column="exam_rslt_cd"/>
		<result property="examRsltNm" 			column="exam_rslt_nm"/>
		<result property="examCont" 			column="exam_cont"/>
		<result property="status" 				column="status"/>
		<result property="statusNm"				column="status_nm"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderCheckedRecord-result" class="rms.take.undTake.domain.UndTakeCheckRecord">
		<result property="recordCenterId" 		column="record_center_id"/>
		<result property="recordTakeSeq" 		column="record_take_seq"/>
		<result property="folderTakeSeq" 		column="folder_take_seq"/>
		<result property="title" 				column="title"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="errorFlag" 			column="error_flag"/>
		<result property="erecordFlag" 			column="erecord_flag"/>
		<result property="erecordFlagNm" 		column="erecord_flag_nm"/>
		<result property="autoCheck" 			column="auto_check"/>
		<result property="examRsltCd" 			column="exam_rslt_cd"/>
		<result property="examRsltNm" 			column="exam_rslt_nm"/>
		<result property="examCont" 			column="exam_cont"/>
		<result property="virusFlag" 			column="virus_flag"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderTakeFolderBatchList-result" class="rms.take.undTake.domain.UndTakeCheckFolder">
		<result property="recordCenterId" 		column="record_center_id"/>
		<result property="folderTakeSeq" 		column="folder_take_seq"/>
		<result property="takeYyyy" 			column="take_yyyy"/>
		<result property="creatSysCd" 			column="creat_sys_cd"/>
		<result property="takeOrgCd" 			column="take_org_cd"/>
		<result property="takeSno" 				column="take_sno"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderTakeRecordList-result" class="rms.take.undTake.domain.UndTakeRecord">
		<result property="recordCenterId" 		column="record_center_id"/>
		<result property="recordId" 			column="record_id"/>
		<result property="erecordFlag" 			column="erecord_flag"/>
		<result property="recordTakeSeq" 		column="record_take_seq"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderTakeAttachList-result" class="rms.take.undTake.domain.UndTakeAttach">
		<result property="docTypeCd" 			column="doc_type_cd"/>
		<result property="attachFilePath"		column="attach_file_path"/>
		<result property="fileNm" 				column="file_nm"/>
		<result property="agentNm" 				column="agent_nm"/>
		<result property="ver" 					column="ver"/>
		<result property="attachFilePageCnt" 	column="attach_file_page_cnt"/>
		<result property="fileSize"				column="file_size"/>
		<result property="attachFileMngInfo"	column="attach_file_mng_info"/>
		<result property="virusFlag"			column="virus_flag"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderRjctFolderList-result" class="rms.take.undTake.domain.UndTakeRjctFolder">
		<result property="recordCenterId" 		column="record_center_id"/>
		<result property="folderTakeSeq" 		column="folder_take_seq"/>
		<result property="orgCd" 				column="org_cd"/>
		<result property="clssId" 				column="clss_id"/>
		<result property="clssNm" 				column="clss_nm"/>
		<result property="title" 				column="title"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="presvTermCd" 			column="presv_term_cd"/>
		<result property="presvTermNm" 			column="presv_term_nm"/>
		<result property="erecordFlag" 			column="erecord_flag"/>
		<result property="erecordFlagNm" 		column="erecord_flag_nm"/>
		<result property="virusFlag" 			column="virus_flag"/>
		<result property="errorFlag" 			column="error_flag"/>
		<result property="autoCheck" 			column="auto_check"/>
		<result property="recordRegCnt"			column="record_reg_cnt"/>
		<result property="examRsltCd" 			column="exam_rslt_cd"/>
		<result property="examRsltNm" 			column="exam_rslt_nm"/>
		<result property="examCont" 			column="exam_cont"/>
		<result property="rjctFlag" 			column="rjct_flag"/>
		<result property="rjctCont" 			column="rjct_cont"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderRjctRecord-result" class="rms.take.undTake.domain.UndTakeRjctRecord">
		<result property="recordCenterId" 		column="record_center_id"/>
		<result property="recordTakeSeq" 		column="record_take_seq"/>
		<result property="folderTakeSeq" 		column="folder_take_seq"/>
		<result property="title" 				column="title"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="errorFlag" 			column="error_flag"/>
		<result property="autoCheck" 			column="auto_check"/>
		<result property="examRsltCd" 			column="exam_rslt_cd"/>
		<result property="examRsltNm" 			column="exam_rslt_nm"/>
		<result property="examCont" 			column="exam_cont"/>
	</resultMap>
	
	<resultMap id="undTakeCheckPrintHeader-result" class="rms.take.undTake.domain.TkOrgTakePlan">
		<result property="recordCenterId" 		column="record_center_id"/>
		<result property="takeYyyy" 			column="take_yyyy"/>
		<result property="takeOrgCd" 			column="take_org_cd"/>
		<result property="creatSysCd" 			column="creat_sys_cd"/>
		<result property="takeSno" 				column="take_sno"/>
		<result property="takeUserNm" 			column="take_user_nm"/>
		<result property="takovrUserNm" 		column="takovr_user_nm"/>
		<result property="takeOrgNm" 			column="take_org_nm"/>
	</resultMap>
	
	<resultMap id="undTakeCheckPrintFolder-result" class="rms.take.undTake.domain.TkFolder">
		<result property="creatSysFolderId" 	column="creat_sys_folder_id"/>
		<result property="orgCd" 				column="org_cd"/>
		<result property="clssId" 				column="clss_id"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="folderRegSeq" 		column="folder_reg_seq"/>
		<result property="hoNo" 				column="ho_no"/>												
		<result property="title" 				column="title"/>
		<result property="recordRegCnt" 		column="record_reg_cnt"/>
		<result property="recordTotPageCnt" 	column="record_tot_page_cnt"/>
		<result property="folderTypeDivCd" 		column="folder_type_div_cd"/>
	</resultMap>
	
	<resultMap id="undTakeCurState-result" class="rms.take.undTake.domain.UndTakeCurState">
		<result property="takeOrgCd" 			column="TAKE_ORG_CD"/>
		<result property="takeOrgNm" 			column="TAKE_ORG_NM"/>
		<result property="takeOrgAbbrNm" 		column="TAKE_ORG_ABBR_NM"/>
		<result property="takeYyyy" 			column="TAKE_YYYY"/>
		<result property="creatSysCd" 			column="CREAT_SYS_CD"/>
		<result property="creatSysCdNm" 		column="CREAT_SYS_CD_NM"/>
		<result property="takeFlag" 			column="TAKE_FLAG"/>
		<result property="takeFlagNm" 			column="TAKE_FLAG_NM"/>
		<result property="takeYmd" 				column="TAKE_YMD"/>
		<result property="recvFolderCnt" 		column="RECV_FOLDER_CNT"/>
		<result property="recvRecordCnt" 		column="RECV_RECORD_CNT"/>
		<result property="folderCnt01" 			column="FOLDER_CNT01"/>
		<result property="recordCnt01" 			column="RECORD_CNT01"/>
		<result property="folderCnt02" 			column="FOLDER_CNT02"/>
		<result property="recordCnt02" 			column="RECORD_CNT02"/>
		<result property="regDtime"				column="REG_DTIME"/>
	</resultMap>
	
	
	<resultMap id="undTakeYearCurState-result" class="rms.take.undTake.domain.UndTakeCurState">
		<result property="takeOrgCd" 			column="TAKE_ORG_CD"/>
		<result property="takeOrgNm" 			column="TAKE_ORG_NM"/>
		<result property="takeOrgAbbrNm" 		column="TAKE_ORG_ABBR_NM"/>
		<result property="takeYyyy" 			column="TAKE_YYYY"/>
		<result property="creatYyyy" 			column="CREAT_YYYY"/>
		<result property="creatSysCd" 			column="CREAT_SYS_CD"/>
		<result property="creatSysCdNm" 		column="CREAT_SYS_CD_NM"/>
		<result property="takeFlag" 			column="TAKE_FLAG"/>
		<result property="takeFlagNm" 			column="TAKE_FLAG_NM"/>
		<result property="takeYmd" 				column="TAKE_YMD"/>
		<result property="recvFolderCnt" 		column="RECV_FOLDER_CNT"/>
		<result property="recvRecordCnt" 		column="RECV_RECORD_CNT"/>
		<result property="folderCnt01" 			column="FOLDER_CNT01"/>
		<result property="recordCnt01" 			column="RECORD_CNT01"/>
		<result property="folderCnt02" 			column="FOLDER_CNT02"/>
		<result property="recordCnt02" 			column="RECORD_CNT02"/>
		<result property="regDtime"				column="REG_DTIME"/>
	</resultMap>
	
	<resultMap id="undTakeNotTakeCurState-result" class="rms.take.undTake.domain.UndTakeNotTakeCurState">
		<result property="crReportOrgCd" 		column="cr_report_org_cd"/>
		<result property="crReportOrgNm" 		column="cr_report_org_nm"/>
		<result property="crReportOrgAbbrNm" 	column="cr_report_org_abbr_nm"/>
		<result property="crReportYyyy" 		column="cr_report_yyyy"/>
		<result property="creatSysCd" 			column="creat_sys_cd"/>
		<result property="creatSysCdNm" 		column="creat_sys_cd_nm"/>
		<result property="folderCnt01" 			column="folder_cnt01"/>
		<result property="recordCnt01" 			column="record_cnt01"/>
		<result property="folderCnt02" 			column="folder_cnt02"/>
		<result property="recordCnt02" 			column="record_cnt02"/>
		<result property="folderCnt03" 			column="folder_cnt03"/>
		<result property="recordCnt03" 			column="record_cnt03"/>
		<result property="takeFlag" 			column="take_flag"/>
		<result property="takeFlagNm" 			column="take_flag_nm"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderTakeFolderSpclList-result" class="rms.take.undTake.domain.TkSpclList">
		<result property="recordCenterId" 			column="record_center_id"/>
		<result property="folderTakeSeq" 			column="folder_take_seq"/>
		<result property="seq" 						column="seq"/>
		<result property="spclList1" 				column="spcl_list1"/>
		<result property="spclList2" 				column="spcl_list2"/>
		<result property="spclList3" 				column="spcl_list3"/>
	</resultMap>
	
	<resultMap id="undTakeCheckFolderTakeRecordSpclList-result" class="rms.take.undTake.domain.TkSpclList">
		<result property="recordCenterId" 			column="record_center_id"/>
		<result property="recordTakeSeq" 			column="record_take_seq"/>
		<result property="seq" 						column="seq"/>
		<result property="spclList1" 				column="spcl_list1"/>
		<result property="spclList2" 				column="spcl_list2"/>
		<result property="spclList3" 				column="spcl_list3"/>
	</resultMap>
	
	<resultMap id="undTakeCurStateFolder-result" class="rms.take.undTake.domain.UndTakeCheckFolder">
		<result property="folderTakeSeq" 		column="folder_take_seq"/>
		<result property="clssId" 				column="clss_id"/>
		<result property="clssNm" 				column="clss_nm"/>
		<result property="title" 				column="title"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="presvTermCd" 			column="presv_term_cd"/>
		<result property="presvTermNm" 			column="presv_term_nm"/>
		<result property="erecordFlag" 			column="erecord_flag"/>
		<result property="erecordFlagNm" 		column="erecord_flag_nm"/>
		<result property="appTakeDetTypeCd"		column="app_take_det_type_cd"/>
		<result property="appTakeDetTypeNm"		column="app_take_det_type_nm"/>
	</resultMap>
	
	<resultMap id="findUndTakeRecvFaildList-result" class="rms.take.undTake.domain.TkOrgRecvError">
		<result property="takeYyyy" 		column="take_yyyy"/>
		<result property="fileDivCd" 		column="file_div_cd"/>
		<result property="fileDivNm" 		column="file_div_nm"/>
		<result property="takeFileNm" 		column="take_file_nm"/>
		<result property="lineNo" 			column="line_no"/>
		<result property="folderClssNo" 	column="folder_clss_no"/>
		<result property="folderTitle" 		column="folder_title"/>
		<result property="recordRegNo" 		column="record_reg_no"/>
		<result property="recordTitle" 		column="record_title"/>
		<result property="recvErrorRsn" 	column="recv_error_rsn"/>
	</resultMap>
	
	<resultMap id="undTakeReturnTrgtFolder-result" class="rms.take.undTake.domain.UndTakeCheckFolder">
		<result property="folderTakeSeq" 		column="folder_take_seq"/>
		<result property="clssId" 				column="clss_id"/>
		<result property="clssNm" 				column="clss_nm"/>
		<result property="title" 				column="title"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="presvTermCd" 			column="presv_term_cd"/>
		<result property="presvTermNm" 			column="presv_term_nm"/>
		<result property="erecordFlag" 			column="erecord_flag"/>
		<result property="erecordFlagNm" 		column="erecord_flag_nm"/>
		<result property="errorFlag" 			column="error_flag"/>
		<result property="autoCheck" 			column="auto_check"/>
		<result property="rjctFlagNm" 			column="rjct_flag_nm"/>
		<result property="rjctFlag" 			column="rjct_flag"/>
		<result property="recordCnt01"			column="record_cnt01"/>
		<result property="attachCnt01"			column="attach_cnt01"/>
		<result property="recordCnt03"			column="record_cnt03"/>
		<result property="attachCnt03"			column="attach_cnt03"/>
		<result property="takeFinStateCd"		column="take_fin_state_cd"/>
		<result property="orgCd"				column="org_cd"/>
		<result property="folderRegSeq"			column="folder_reg_seq"/>
		<result property="hoNo"					column="ho_no"/>
		<result property="creatSysCd"			column="creat_sys_cd"/>
	</resultMap>
	
	<resultMap id="findUndTakeRjctFolderList-result" class="rms.take.undTake.domain.UndTakeRjctFolder">
		<result property="recordCenterId" 	column="record_center_id"/>
		<result property="folderTakeSeq" 	column="folder_take_seq"/>
		<result property="creatSysCd" 		column="creat_sys_cd"/>
		<result property="creatSysCdNm" 	column="creat_sys_cd_nm"/>
		<result property="orgCd" 			column="org_cd"/>
		<result property="clssId" 			column="clss_id"/>
		<result property="creatYyyy" 		column="creat_yyyy"/>
		<result property="folderRegSeq" 	column="folder_reg_seq"/>
		<result property="hoNo" 			column="ho_no"/>
		<result property="title" 			column="title"/>
		<result property="takeStateCd" 		column="take_state_cd"/>
		<result property="takeStateCdNm" 	column="take_state_cd_nm"/>
		<result property="regDtime" 		column="reg_dtime"/>
		<result property="folderErrFlag" 	column="folder_err_flag"/>
		<result property="folderErrFlagNm" 	column="folder_err_flag_nm"/>
		<result property="examCont" 		column="exam_cont"/>
		<result property="rjctCont" 		column="rjct_cont"/>
		<result property="recordCnt" 		column="record_cnt"/>
		<result property="fileCnt" 			column="file_cnt"/>
	</resultMap>

	<!-- 
		기록물인수>연계인수>연계인수>인수일정수립 (SELECT count)
	 -->
	<select id="countUndTakeSchedPagedList" parameterClass="rms.take.undTake.domain.UndTakeSched" resultClass="long">
		SELECT COUNT(A.org_cd)
		FROM  TB_STORG A
		   , (SELECT * 
		      FROM TB_TKORGTAKESCHED
		      WHERE record_center_id = #recordCenterId:VARCHAR#
		      AND   take_yyyy = #takeYyyy:VARCHAR#) B
		WHERE A.record_center_id = B.record_center_id(+)
		AND   A.org_cd = B.take_org_cd(+)
		AND   A.record_center_id = #recordCenterId:VARCHAR#
        <isNotEmpty prepend="AND" property="takeOrgCd">
              A.org_cd = #takeOrgCd:VARCHAR#
        </isNotEmpty>
        <isNotEmpty prepend="AND" property="closeFlag">
              A.close_flag = #closeFlag:VARCHAR#
        </isNotEmpty>
		<isEmpty property="takeSchedSetState">
			<isEqual property="erecordFlag" compareValue="1">
				  <isNotEmpty prepend="AND" property="takeStartPlanYmd">
			      B.take_sched_set_state IN ('1', '3')
				  AND   B.erecord_take_close_plan_ymd <![CDATA[>=]]> #takeStartPlanYmd:VARCHAR#
				  </isNotEmpty>
				  <isNotEmpty prepend="AND" property="takeClosePlanYmd">
			      B.take_sched_set_state IN ('1', '3')
				  AND   B.erecord_take_start_plan_ymd <![CDATA[<=]]> #takeClosePlanYmd:VARCHAR#
				  </isNotEmpty>
			</isEqual>
			<isEqual property="erecordFlag" compareValue="2">
				  <isNotEmpty prepend="AND" property="takeStartPlanYmd">
			      B.take_sched_set_state IN ('2', '3')
				  AND   B.noelct_take_close_plan_ymd <![CDATA[>=]]> #takeStartPlanYmd:VARCHAR#
				  </isNotEmpty>
				  <isNotEmpty prepend="AND" property="takeClosePlanYmd">
			      B.take_sched_set_state IN ('2', '3')
				  AND   B.noelct_take_start_plan_ymd <![CDATA[<=]]> #takeClosePlanYmd:VARCHAR#
				  </isNotEmpty>
			</isEqual>
		</isEmpty>
		<isEqual property="takeSchedSetState" compareValue="0">
			<isEqual prepend="AND" property="erecordFlag" compareValue="1">
		          (B.take_sched_set_state IS NULL OR B.take_sched_set_state = '2')
		    </isEqual>
			<isEqual prepend="AND" property="erecordFlag" compareValue="2">
		          (B.take_sched_set_state IS NULL OR B.take_sched_set_state = '1')
		    </isEqual>
		</isEqual>
		<isEqual property="takeSchedSetState" compareValue="1">
			<isEqual prepend="AND" property="erecordFlag" compareValue="1">
			      B.take_sched_set_state IN ('1', '3')
				  <isNotEmpty prepend="AND" property="takeStartPlanYmd">
				  B.erecord_take_close_plan_ymd <![CDATA[>=]]> #takeStartPlanYmd:VARCHAR#
				  </isNotEmpty>
				  <isNotEmpty prepend="AND" property="takeClosePlanYmd">
				  B.erecord_take_start_plan_ymd <![CDATA[<=]]> #takeClosePlanYmd:VARCHAR#
				  </isNotEmpty>
			</isEqual>
			<isEqual prepend="AND" property="erecordFlag" compareValue="2">
			      B.take_sched_set_state IN ('2', '3')
				  <isNotEmpty prepend="AND" property="takeStartPlanYmd">
				  B.noelct_take_close_plan_ymd <![CDATA[>=]]> #takeStartPlanYmd:VARCHAR#
				  </isNotEmpty>
				  <isNotEmpty prepend="AND" property="takeClosePlanYmd">
				  B.noelct_take_start_plan_ymd <![CDATA[<=]]> #takeClosePlanYmd:VARCHAR#
				  </isNotEmpty>
			</isEqual>
		</isEqual>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>인수일정수립 (SELECT)
	 -->
	<select id="findUndTakeSchedPagedList" parameterClass="rms.take.undTake.domain.UndTakeSched" resultMap="undTakeSched-result">
		SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
			SELECT A.org_cd take_org_cd
			     , A.org_nm take_org_nm
			     , A.org_abbr_nm take_org_abbr_nm
			     , B.take_yyyy
			     , B.erecord_take_start_plan_ymd
			     , B.erecord_take_close_plan_ymd
			     , B.noelct_take_start_plan_ymd
			     , B.noelct_take_close_plan_ymd
			     , B.take_sched_set_state
			FROM  TB_STORG A
			   , (SELECT * 
			      FROM TB_TKORGTAKESCHED
			      WHERE record_center_id = #recordCenterId:VARCHAR#
			      AND   take_yyyy = #takeYyyy:VARCHAR#) B
			WHERE A.record_center_id = B.record_center_id(+)
			AND   A.org_cd = B.take_org_cd(+)
			AND   A.record_center_id = #recordCenterId:VARCHAR#
	        <isNotEmpty prepend="AND" property="takeOrgCd">
	              A.org_cd = #takeOrgCd:VARCHAR#
	        </isNotEmpty>
	        <isNotEmpty prepend="AND" property="closeFlag">
	              A.close_flag = #closeFlag:VARCHAR#
	        </isNotEmpty>
			<isEmpty property="takeSchedSetState">
				<isEqual property="erecordFlag" compareValue="1">
					  <isNotEmpty prepend="AND" property="takeStartPlanYmd">
				      B.take_sched_set_state IN ('1', '3')
					  AND   B.erecord_take_start_plan_ymd <![CDATA[>=]]> #takeStartPlanYmd:VARCHAR#
					  </isNotEmpty>
					  <isNotEmpty prepend="AND" property="takeClosePlanYmd">
				      B.take_sched_set_state IN ('1', '3')
					  AND   B.erecord_take_close_plan_ymd <![CDATA[<=]]> #takeClosePlanYmd:VARCHAR#
					  </isNotEmpty>
				</isEqual>
				<isEqual property="erecordFlag" compareValue="2">
					  <isNotEmpty prepend="AND" property="takeStartPlanYmd">
				      B.take_sched_set_state IN ('2', '3')
					  AND   B.noelct_take_start_plan_ymd <![CDATA[>=]]> #takeStartPlanYmd:VARCHAR#
					  </isNotEmpty>
					  <isNotEmpty prepend="AND" property="takeClosePlanYmd">
				      B.take_sched_set_state IN ('2', '3')
					  AND   B.noelct_take_close_plan_ymd <![CDATA[<=]]> #takeClosePlanYmd:VARCHAR#
					  </isNotEmpty>
				</isEqual>
			</isEmpty>
			<isEqual property="takeSchedSetState" compareValue="0">
				<isEqual prepend="AND" property="erecordFlag" compareValue="1">
			          (B.take_sched_set_state IS NULL OR B.take_sched_set_state = '2')
			    </isEqual>
				<isEqual prepend="AND" property="erecordFlag" compareValue="2">
			          (B.take_sched_set_state IS NULL OR B.take_sched_set_state = '1')
			    </isEqual>
			</isEqual>
			<isEqual property="takeSchedSetState" compareValue="1">
				<isEqual prepend="AND" property="erecordFlag" compareValue="1">
				      B.take_sched_set_state IN ('1', '3')
					  <isNotEmpty prepend="AND" property="takeStartPlanYmd">
					  B.erecord_take_close_plan_ymd <![CDATA[>=]]> #takeStartPlanYmd:VARCHAR#
					  </isNotEmpty>
					  <isNotEmpty prepend="AND" property="takeClosePlanYmd">
					  B.erecord_take_start_plan_ymd <![CDATA[<=]]> #takeClosePlanYmd:VARCHAR#
					  </isNotEmpty>
				</isEqual>
				<isEqual prepend="AND" property="erecordFlag" compareValue="2">
				      B.take_sched_set_state IN ('2', '3')
					  <isNotEmpty prepend="AND" property="takeStartPlanYmd">
					  B.noelct_take_close_plan_ymd <![CDATA[>=]]> #takeStartPlanYmd:VARCHAR#
					  </isNotEmpty>
					  <isNotEmpty prepend="AND" property="takeClosePlanYmd">
					  B.noelct_take_start_plan_ymd <![CDATA[<=]]> #takeClosePlanYmd:VARCHAR#
					  </isNotEmpty>
				</isEqual>
			</isEqual>
			<isEmpty property="sortDiv">
				ORDER BY A.org_cd
			</isEmpty>
			<isEqual property="sortDiv" compareValue="0">
				ORDER BY A.org_cd
			</isEqual>
			<isEqual property="sortDiv" compareValue="1">
				ORDER BY B.erecord_take_start_plan_ymd ASC, A.org_cd
			</isEqual>
			<isEqual property="sortDiv" compareValue="2">
				ORDER BY B.noelct_take_start_plan_ymd ASC, A.org_cd
			</isEqual>
			) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>인수일정수립 (INSERT or UPDATE count)
	 -->
	<select id="countUndTakeSchedList" parameterClass="rms.take.undTake.domain.TkOrgTakeSched" resultClass="int">
		SELECT COUNT(1)
		FROM TB_TKORGTAKESCHED
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   take_org_cd = #takeOrgCd:VARCHAR#
		AND   take_yyyy = #takeYyyy:VARCHAR#
	</select>
	<!-- 
		기록물인수>연계인수>연계인수>인수일정수립 (CREATE)
	 -->
	<insert id="createUndTakeSchedList" parameterClass="rms.take.undTake.domain.TkOrgTakeSched">
		INSERT INTO TB_TKORGTAKESCHED
		(	record_center_id
			, take_org_cd
			, take_yyyy
			, erecord_take_start_plan_ymd
			, erecord_take_close_plan_ymd
			, noelct_take_start_plan_ymd
			, noelct_take_close_plan_ymd
			, take_sched_set_state
			, reg_user_id
			, reg_dtime
		)
		VALUES
		(	#recordCenterId:VARCHAR#
			, #takeOrgCd:VARCHAR#
			, #takeYyyy:VARCHAR#
			, #erecordTakeStartPlanYmd:VARCHAR#
			, #erecordTakeClosePlanYmd:VARCHAR#
			, #noelctTakeStartPlanYmd:VARCHAR#
			, #noelctTakeClosePlanYmd:VARCHAR#
			, #takeSchedSetState:VARCHAR#
			, #regUserId:VARCHAR#
			<!--cubrid , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
			, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		)
	</insert>
	<!-- 
		기록물인수>연계인수>연계인수>인수일정수립 (UPDATE)
	 -->
	<update id="updateUndTakeSchedList" parameterClass="rms.take.undTake.domain.TkOrgTakeSched">
		UPDATE TB_TKORGTAKESCHED
		SET erecord_take_start_plan_ymd = #erecordTakeStartPlanYmd:VARCHAR#
		  , erecord_take_close_plan_ymd = #erecordTakeClosePlanYmd:VARCHAR#
		  , noelct_take_start_plan_ymd = #noelctTakeStartPlanYmd:VARCHAR#
		  , noelct_take_close_plan_ymd = #noelctTakeClosePlanYmd:VARCHAR#
		  , take_sched_set_state = #takeSchedSetState:VARCHAR#
		  , chng_user_id = #regUserId:VARCHAR#
		  <!--cubrid , chng_dtime = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
		  , chng_dtime = TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   take_org_cd = #takeOrgCd:VARCHAR#
		AND   take_yyyy = #takeYyyy:VARCHAR#
	</update>
	<!-- 
		기록물인수>연계인수>연계인수>인수일정수립 (DELETE)
	 -->
	<delete id="deleteUndTakeSchedList" parameterClass="rms.take.undTake.domain.TkOrgTakeSched">
		DELETE TB_TKORGTAKESCHED
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   take_org_cd = #takeOrgCd:VARCHAR#
		AND   take_yyyy = #takeYyyy:VARCHAR#
	</delete>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (SELECT count)
	 -->
	<select id="countUndTakeRecvPagedList" parameterClass="rms.take.undTake.domain.UndTakeRecv" resultClass="long">		
		SELECT COUNT(1)
		FROM (
			SELECT A.record_center_id
				, A.org_cd AS take_org_cd
				, A.org_nm AS take_org_nm
				, A.org_abbr_nm AS take_org_abbr_nm
				, A.creat_sys_cd
				, (SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='RD17' AND com_cd=A.creat_sys_cd) creat_sys_cd_nm
				, #takeYyyy:VARCHAR# take_yyyy
				, B.take_sno
				, NVL(B.take_state_div_cd,DECODE(A.take_sched_set_state,'1','02','3','02','01')) take_state_div_cd
				, NVL((SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='TK08' AND com_cd=B.take_state_div_cd)
				        ,DECODE(A.take_sched_set_state,'1','일정수립완료','3','일정수립완료','일정미수립')) take_state_div_cd_nm
				, NVL(B.recv_fin_state_cd,'0') recv_fin_state_cd
				, DECODE(B.recv_fin_state_cd,'1','접수중','2','접수실패','3','접수완료','4','접수대기','미접수') recv_fin_state_cd_nm
			FROM 
				(
					SELECT A.record_center_id, A.org_cd, A.org_nm, A.org_abbr_nm, B.creat_sys_cd, C.take_sched_set_state
					FROM TB_STORG A
					, TB_STLINKTRGT B
					, (SELECT record_center_id,take_org_cd,take_sched_set_state
					    FROM TB_TKORGTAKESCHED WHERE take_yyyy = #takeYyyy:VARCHAR#) C
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					<isNotEmpty prepend="AND" property="takeOrgCd">
						  A.org_cd = #takeOrgCd:VARCHAR#
					</isNotEmpty>
				    <isNotEmpty prepend="AND" property="closeFlag">
						  A.close_flag = #closeFlag:VARCHAR#
					</isNotEmpty>
					AND  A.link_trgt_id = B.link_trgt_id
					<isNotEmpty prepend="AND" property="creatSysCd">
						  B.creat_sys_cd = #creatSysCd:VARCHAR#
					</isNotEmpty>
					AND  A.record_center_id = C.record_center_id(+)
					AND  A.org_cd = C.take_org_cd(+)
				) A
				, (
					SELECT *
					FROM TB_TKORGTAKEPLAN
					WHERE record_center_id = #recordCenterId:VARCHAR#
					AND   take_yyyy = #takeYyyy:VARCHAR#
					<isNotEmpty prepend="AND" property="takeOrgCd">
						  take_org_cd = #takeOrgCd:VARCHAR#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="creatSysCd">
						  creat_sys_cd = #creatSysCd:VARCHAR#
					</isNotEmpty>
					AND	  (app_take_type_cd is null OR app_take_type_cd = '0')
				) B
			WHERE A.record_center_id = B.record_center_id(+)
			AND   A.org_cd = B.take_org_cd(+)
			AND   A.creat_sys_cd = B.creat_sys_cd(+)
		) Z
		<dynamic prepend="WHERE">
		    <isNotEmpty prepend="AND" property="examStateDiv">
				  Z.take_state_div_cd = #examStateDiv:VARCHAR#
			</isNotEmpty>
		    <isNotEmpty prepend="AND" property="recvFinStateCd">
				  Z.recv_fin_state_cd = #recvFinStateCd:VARCHAR#
			</isNotEmpty>
		</dynamic>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (SELECT)
	 -->
	<select id="findUndTakeRecvPagedList" parameterClass="rms.take.undTake.domain.UndTakeRecv" resultMap="undTakeRecv-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT Z.record_center_id, Z.take_yyyy, Z.take_org_cd, Z.take_org_nm, Z.take_org_abbr_nm
		    , Z.creat_sys_cd, Z.creat_sys_cd_nm, Z.take_sno, Z.take_state_div_cd, Z.take_state_div_cd_nm
			, Z.recv_fin_state_cd, Z.recv_fin_state_cd_nm, Z.recv_folder_cnt, Z.recv_record_cnt
			, (SELECT COUNT(1) FROM TB_TKFOLDER D
			    WHERE D.record_center_id=Z.record_center_id
				AND D.take_yyyy=Z.take_yyyy
				AND D.take_org_cd=Z.take_org_cd
				AND D.creat_sys_cd=Z.creat_sys_cd
				AND D.take_sno=Z.take_sno) folder_cnt01
			, (SELECT COUNT(1) FROM TB_TKFOLDER D, TB_TKRECORD E
			    WHERE D.record_center_id=Z.record_center_id
				AND D.take_yyyy=Z.take_yyyy
				AND D.take_org_cd=Z.take_org_cd
				AND D.creat_sys_cd=Z.creat_sys_cd
				AND D.take_sno=Z.take_sno
				AND E.record_center_id=D.record_center_id
				AND E.folder_take_seq=D.folder_take_seq) record_cnt01
			, (SELECT COUNT(1) FROM TB_TKFOLDER D
			    WHERE D.record_center_id=Z.record_center_id
				AND D.take_yyyy=Z.take_yyyy
				AND D.take_org_cd=Z.take_org_cd
				AND D.creat_sys_cd=Z.creat_sys_cd
				AND D.take_sno=Z.take_sno
				AND D.take_fin_flag = '1') folder_cnt05
		FROM (
			SELECT A.record_center_id
				, A.org_cd AS take_org_cd
				, A.org_nm AS take_org_nm
				, A.org_abbr_nm AS take_org_abbr_nm
				, A.creat_sys_cd
				, (SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='RD17' AND com_cd=A.creat_sys_cd) creat_sys_cd_nm
				, #takeYyyy:VARCHAR# take_yyyy
				, B.take_sno
				, NVL(B.take_state_div_cd,DECODE(A.take_sched_set_state,'1','02','3','02','01')) take_state_div_cd
				, NVL((SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='TK08' AND com_cd=B.take_state_div_cd)
				        ,DECODE(A.take_sched_set_state,'1','일정수립완료','3','일정수립완료','일정미수립')) take_state_div_cd_nm
				, NVL(B.recv_fin_state_cd,'0') recv_fin_state_cd
				, DECODE(B.recv_fin_state_cd,'1','접수중','2','접수실패','3','접수완료','4','접수대기','미접수') recv_fin_state_cd_nm
				, NVL(B.recv_folder_cnt,0) AS recv_folder_cnt
				, NVL(B.recv_record_cnt,0) AS recv_record_cnt
			FROM 
				(
					SELECT A.record_center_id, A.org_cd, A.org_nm, A.org_abbr_nm, B.creat_sys_cd, C.take_sched_set_state
					FROM TB_STORG A
					, TB_STLINKTRGT B
					, (SELECT record_center_id,take_org_cd,take_sched_set_state
					    FROM TB_TKORGTAKESCHED WHERE take_yyyy = #takeYyyy:VARCHAR#) C
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					<isNotEmpty prepend="AND" property="takeOrgCd">
						  A.org_cd = #takeOrgCd:VARCHAR#
					</isNotEmpty>
				    <isNotEmpty prepend="AND" property="closeFlag">
						  A.close_flag = #closeFlag:VARCHAR#
					</isNotEmpty>
					AND  A.link_trgt_id = B.link_trgt_id
					<isNotEmpty prepend="AND" property="creatSysCd">
						  B.creat_sys_cd = #creatSysCd:VARCHAR#
					</isNotEmpty>
					AND  A.record_center_id = C.record_center_id(+)
					AND  A.org_cd = C.take_org_cd(+)
				) A
				, (
					SELECT *
					FROM TB_TKORGTAKEPLAN
					WHERE record_center_id = #recordCenterId:VARCHAR#
					AND   take_yyyy = #takeYyyy:VARCHAR#
					<isNotEmpty prepend="AND" property="takeOrgCd">
						  take_org_cd = #takeOrgCd:VARCHAR#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="creatSysCd">
						  creat_sys_cd = #creatSysCd:VARCHAR#
					</isNotEmpty>
					AND	  (app_take_type_cd is null OR app_take_type_cd = '0')
				) B
			WHERE A.record_center_id = B.record_center_id(+)
			AND   A.org_cd = B.take_org_cd(+)
			AND   A.creat_sys_cd = B.creat_sys_cd(+)
		) Z
		<dynamic prepend="WHERE">
		    <isNotEmpty prepend="AND" property="examStateDiv">
				  Z.take_state_div_cd = #examStateDiv:VARCHAR#
			</isNotEmpty>
		    <isNotEmpty prepend="AND" property="recvFinStateCd">
				  Z.recv_fin_state_cd = #recvFinStateCd:VARCHAR#
			</isNotEmpty>
		</dynamic>
		ORDER BY Z.record_center_id, Z.take_org_cd, Z.creat_sys_cd
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (SELECT)
		통합 온-나라  접수 일자로 정렬을 desc 로 정렬
		순서를 접수일자 최근 일자 순, 일정 수립 완료를 상위 코드 순 
	 -->
	<select id="findUndTakeRecvNewPagedList" parameterClass="rms.take.undTake.domain.UndTakeRecv" resultMap="undTakeRecv-result">
		SELECT C.*
    FROM (
        SELECT ROWNUM AS rnum
            , B.*
        FROM (
		SELECT Z.record_center_id, Z.take_yyyy, Z.take_org_cd, Z.take_org_nm, Z.take_org_abbr_nm
            , Z.creat_sys_cd, Z.creat_sys_cd_nm, Z.take_sno, Z.parent_take_sno, Z.take_state_div_cd, Z.take_state_div_cd_nm
            , Z.recv_fin_state_cd, Z.recv_fin_state_cd_nm, Z.recv_folder_cnt, Z.recv_record_cnt, Z.recv_attach_cnt
            , nvl(z.folder_cnt01, 0) as folder_cnt01
            , nvl((z.folder_cnt01-z.folder_cnt03), 0) as folder_cnt02
            , nvl(z.folder_cnt03, 0) as folder_cnt03
            , nvl(z.record_cnt01, 0) as record_cnt01
            , nvl((z.record_cnt01-z.record_cnt03), 0) as record_cnt02
            , nvl(z.record_cnt03, 0) as record_cnt03
            , nvl(z.attach_cnt01, 0) as attach_cnt01
            , nvl((z.attach_cnt01-z.attach_cnt03), 0) as attach_cnt02
            , nvl(z.attach_cnt03, 0) as attach_cnt03
            , nvl(z.folder_cnt04, 0) as folder_cnt04 
            , nvl(z.folder_cnt05, 0) as folder_cnt05
            , rjct_hist_cnt
            , reg_dtime
            , recv_re_flag
        FROM (
            SELECT A.record_center_id
                , A.org_cd AS take_org_cd
                , A.org_nm AS take_org_nm
                , A.org_abbr_nm AS take_org_abbr_nm
                , A.creat_sys_cd
                , (SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='RD17' AND com_cd=A.creat_sys_cd) creat_sys_cd_nm
                , #takeYyyy:VARCHAR# take_yyyy
                , B.take_sno
                , B.parent_take_sno
                , NVL(B.take_state_div_cd,DECODE(A.take_sched_set_state,'1','02','3','02','01')) take_state_div_cd
                , (CASE WHEN B.take_sno != B.parent_take_sno AND B.take_state_div_cd = '04' THEN '재접수완료'
                        ELSE (NVL((SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='TK08' AND com_cd=B.take_state_div_cd)
                                ,DECODE(A.take_sched_set_state,'1','일정수립완료','3','일정수립완료','일정미수립')))
                   END) take_state_div_cd_nm
                , NVL(B.recv_fin_state_cd,'0') recv_fin_state_cd
                , DECODE(B.recv_fin_state_cd,'1','접수중','2','접수실패','3','접수완료','4','접수대기','미접수') recv_fin_state_cd_nm
                , NVL(B.recv_folder_cnt,0) AS recv_folder_cnt
                , NVL(B.recv_record_cnt,0) AS recv_record_cnt
                , NVL(B.recv_attach_cnt,0) AS recv_attach_cnt
                , B.recv_ymd
                , (SELECT MAX(D.recv_ymd) 
                	 FROM TB_TKORGTAKEPLAN D 
                	WHERE D.record_center_id = B.record_center_id
                      AND D.take_yyyy        = B.take_yyyy
                      AND D.take_org_cd      = B.take_org_cd
                      AND D.creat_sys_cd     = B.creat_sys_cd
                      AND D.parent_take_sno  = B.parent_take_sno) max_recv_ymd
                , NVL(recv_folder_cnt, 0) as folder_cnt01
            	, NVL(recv_folder_err_cnt, 0) as folder_cnt03
            	, NVL(recv_record_cnt, 0) as record_cnt01
            	, NVL(recv_record_err_cnt, 0) as record_cnt03    
            	, NVL(recv_attach_cnt, 0) as attach_cnt01 
            	, NVL(recv_attach_err_cnt, 0) as attach_cnt03
            	,(SELECT COUNT(1) 
            		FROM TB_TKFOLDER D
               	   WHERE D.record_center_id	= B.record_center_id
                	 AND D.take_yyyy		= B.take_yyyy
                	 AND D.take_org_cd		= B.take_org_cd
                	 AND D.creat_sys_cd		= B.creat_sys_cd
                	 AND D.take_sno			= B.take_sno
                	 AND D.rjct_flag = '1') folder_cnt04
            	,(SELECT COUNT(1) FROM TB_TKFOLDER D
                   WHERE D.record_center_id=B.record_center_id
                	 AND D.take_yyyy			= B.take_yyyy
                	 AND D.take_org_cd			= B.take_org_cd
                	 AND D.creat_sys_cd			= B.creat_sys_cd
                	 AND D.take_sno				= B.take_sno
                	 AND D.take_fin_flag = '1') folder_cnt05
            	,(SELECT COUNT(1) 
					FROM tb_tkfoldertakehist D
				   <!--cubrid WHERE (D.record_center_id, D.creat_sys_cd, D.org_cd, D.clss_id, D.creat_yyyy, D.folder_reg_seq, D.ho_no, D.take_sno) IN (
				    		SELECT S.record_center_id, S.creat_sys_cd, S.org_cd, S.clss_id, S.creat_yyyy, S.folder_reg_seq, S.ho_no, S.take_sno-->
				   WHERE 
				   EXISTS (
				    		SELECT 1
				    		  FROM TB_TKFOLDER S
				    		 WHERE S.record_center_id  	= B.record_center_id
				    		   AND S.take_yyyy          = B.take_yyyy
				    		   AND S.take_org_cd        = B.take_org_cd
				    		   AND S.creat_sys_cd       = B.creat_sys_cd
				    		   AND S.take_sno           = B.take_sno
				    		   AND S.reg_dtime			= D.reg_dtime
						<!--cubrid-->
						   AND S.record_center_id = D.record_center_id
						   AND S.creat_sys_cd = D.creat_sys_cd
						   AND S.org_cd = D.org_cd
						   AND S.clss_id = D.clss_id
						   AND S.creat_yyyy = D.creat_yyyy
						   AND S.folder_reg_seq = D.folder_reg_seq
						   AND S.ho_no = D.ho_no
						   AND S.take_sno = D.take_sno
						)
	 				 AND take_state_cd IN ('02','03')
            	 ) rjct_hist_cnt
            	 ,(SELECT 	MAX(D.reg_dtime) 
            	     FROM 	tb_tkfolder D
            	    WHERE 	D.record_center_id = B.record_center_id
            	      AND	D.take_yyyy			= B.take_yyyy
            	      AND	D.take_org_cd 		= B.take_org_cd
            	      AND 	D.creat_sys_cd		= B.creat_sys_cd
            	      AND	D.take_sno			= B.take_sno
            	   ) reg_dtime
            	   ,(SELECT count(1)
            	     FROM 	tb_tkfolder D
            	    WHERE 	D.record_center_id = B.record_center_id
            	      AND	D.take_yyyy			= B.take_yyyy
            	      AND	D.take_org_cd 		= B.take_org_cd
            	      AND 	D.creat_sys_cd		= B.creat_sys_cd
            	      AND	D.take_sno			= B.take_sno
            	      AND   D.recv_re_flag 		= '1'
            	   ) recv_re_flag
           FROM (
					SELECT A.record_center_id, A.org_cd, A.org_nm, A.org_abbr_nm, B.creat_sys_cd, C.take_sched_set_state
					FROM TB_STORG A
					, TB_STLINKTRGT B
					, (SELECT record_center_id,take_org_cd,take_sched_set_state
					    FROM TB_TKORGTAKESCHED WHERE take_yyyy = #takeYyyy:VARCHAR#) C
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					<isNotEmpty prepend="AND" property="takeOrgCd">
						  A.org_cd = #takeOrgCd:VARCHAR#
					</isNotEmpty>
				    <isNotEmpty prepend="AND" property="closeFlag">
						  A.close_flag = #closeFlag:VARCHAR#
					</isNotEmpty>
					AND  A.link_trgt_id = B.link_trgt_id
					<isNotEmpty prepend="AND" property="creatSysCd">
						  B.creat_sys_cd = #creatSysCd:VARCHAR#
					</isNotEmpty>
					AND  A.record_center_id = C.record_center_id(+)
					AND  A.org_cd = C.take_org_cd(+)
				) A
				, (
					SELECT *
					FROM TB_TKORGTAKEPLAN
					WHERE record_center_id = #recordCenterId:VARCHAR#
					AND   take_yyyy = #takeYyyy:VARCHAR#
					<isNotEmpty prepend="AND" property="takeOrgCd">
						  take_org_cd = #takeOrgCd:VARCHAR#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="creatSysCd">
						  creat_sys_cd = #creatSysCd:VARCHAR#
					</isNotEmpty>
					AND	  (app_take_type_cd is null OR app_take_type_cd = '0')
				) B
			WHERE A.record_center_id = B.record_center_id(+)
			AND   A.org_cd = B.take_org_cd(+)
			AND   A.creat_sys_cd = B.creat_sys_cd(+)
			) Z
		<dynamic prepend="WHERE">
		    <isNotEmpty prepend="AND" property="examStateDiv">
				  Z.take_state_div_cd = #examStateDiv:VARCHAR#
			</isNotEmpty>
		    <isNotEmpty prepend="AND" property="recvFinStateCd">
				  Z.recv_fin_state_cd = #recvFinStateCd:VARCHAR#
			</isNotEmpty>
		</dynamic>
		ORDER BY Z.record_center_id, Z.max_recv_ymd desc nulls last,  Z.take_org_cd, Z.creat_sys_cd DESC,  Z.take_state_div_cd_nm desc, Z.take_sno desc
		        	 ) B
        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
    ) C
    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#  
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리(삭제-0.인수_바이러스검사이력) (DELETE)
	 -->
	
	<delete id="deleteTkVirusCheck"  parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
	DELETE FROM TB_TKVIRUSCHECK
	WHERE RECORD_CENTER_ID = #recordCenterId:VARCHAR#
	AND RECORD_TAKE_SEQ IN
	(
		SELECT C.RECORD_TAKE_SEQ
		FROM TB_TKORGTAKEPLAN A INNER JOIN TB_TKFOLDER B
		ON A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
		AND A.TAKE_ORG_CD = B.TAKE_ORG_CD
		AND A.TAKE_YYYY = B.TAKE_YYYY
		AND A.TAKE_SNO = B.TAKE_SNO
		INNER JOIN TB_TKRECORD C
		ON B.RECORD_CENTER_ID = C.RECORD_CENTER_ID
		AND B.FOLDER_TAKE_SEQ = C.FOLDER_TAKE_SEQ
		WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		AND A.TAKE_ORG_CD = #takeOrgCd:VARCHAR#
		AND A.TAKE_YYYY = #takeYyyy:VARCHAR#
		AND A.TAKE_SNO = #takeSno:NUMBER#
	)
	</delete>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리(삭제-0.반려이력정보) (DELETE)
	 -->
	 <delete id="deleteRecvTakeFolderTakeHist" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
	 	DELETE FROM TB_TKFOLDERTAKEHIST 
                <!--cubrid delete-->
	 	WHERE CONCAT(record_center_id, folder_take_seq)
	 	IN (
	 		SELECT CONCAT(record_center_id, folder_take_seq)
	 		FROM tb_tkfolder 
		    WHERE record_center_id 	= #recordCenterId:VARCHAR#
		    AND take_org_cd 		= #takeOrgCd:VARCHAR#
		    AND take_yyyy 			= #takeYyyy:VARCHAR#
		    AND take_sno 			= #takeSno:NUMBER#
	 	)
                AND record_center_id > 0 AND folder_take_seq > 0
	 </delete>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-1.첨부파일정보) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRecordAttachFile" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKATTACHFILE
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, record_take_seq)
		IN 
		(
			SELECT CONCAT(C.record_center_id, C.record_take_seq)
                        FROM   TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
                        INNER JOIN TB_TKATTACHFILE C ON B.record_center_id = C.record_center_id AND    B.record_take_seq = C.record_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND record_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-2.기록물건변경이력정보) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRecordChngHist" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKRECORDCHNGHIST
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, record_take_seq)
		IN 
		(
			SELECT CONCAT(C.record_center_id, C.record_take_seq)
                        FROM   TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
                        INNER JOIN TB_TKRECORDCHNGHIST C ON B.record_center_id = C.record_center_id AND    B.record_take_seq = C.record_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND record_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-3.기록물건생산내역) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRecordCreat" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKRECORDCREAT
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, record_take_seq)
		IN 
		(
			SELECT CONCAT(C.record_center_id, C.record_take_seq)
			FROM TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND A.folder_take_seq = B.folder_take_seq      
			INNER JOIN TB_TKRECORDCREAT C ON    B.record_center_id = C.record_center_id AND    B.record_take_seq = C.record_take_seq              
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND record_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-4.특수목록 건내역) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRecordSpclList" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKSPCLLIST
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, record_take_seq)
		IN 
		(
			SELECT CONCAT(C.record_center_id, C.record_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
                        INNER JOIN TB_TKSPCLLIST C ON B.record_center_id = C.record_center_id AND    B.record_take_seq = C.record_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
			AND    C.spcl_list_loc = '2'
		)
                AND record_center_id > 0 AND record_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-5.기록물건관계정보) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRecordRel" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKRECORDREL
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, record_take_seq)
		IN 
		(
			SELECT CONCAT(C.record_center_id, C.record_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
                        INNER JOIN TB_TKRECORDREL C ON B.record_center_id = C.record_center_id AND    B.record_take_seq = C.record_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND record_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-6.기록물건정보출처) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRecordInfoSrc" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKRECORDINFOSRC
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, record_take_seq)
		IN 
		(
			SELECT CONCAT(C.record_center_id, C.record_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
                        INNER JOIN TB_TKRECORDINFOSRC C ON B.record_center_id = C.record_center_id AND    B.record_take_seq = C.record_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-7.기록물건인수오류) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRecordError" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKRECORDERROR
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, record_take_seq)
		IN 
		(
			SELECT CONCAT(C.record_center_id, C.record_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
                        INNER JOIN TB_TKRECORDERROR C ON B.record_center_id = C.record_center_id AND    B.record_take_seq = C.record_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND record_take_seq > 0
	</delete>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-21.기록물건수정이력정보) (DELETE)
		2014.06.17 이옥찬
	 -->
	<delete id="deleteRecvTakeFolderRecordOpenHist" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKRECORDOPENHIST
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, record_take_seq) 
                IN
                (
			SELECT CONCAT(C.record_center_id, C.record_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
                        INNER JOIN TB_TKRECORDOPENHIST C ON B.record_center_id = C.record_center_id AND    B.record_take_seq = C.record_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND record_take_seq > 0
	</delete>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-8.기록물건) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRecord" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKRECORD
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq) 
                IN
                (
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKRECORD B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-9.기록물철변경이력정보) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderChngHist" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKFOLDERCHNGHIST
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq)
                IN
                (
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKFOLDERCHNGHIST B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-10.기록물철생산내역) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderCreat" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKFOLDERCREAT
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq)
		IN
		(
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKFOLDERCREAT B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-11.기록물철인수인계정보) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderTakeTakovr" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKFOLDERTAKETAKOVR
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq)
                IN
                (
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKFOLDERTAKETAKOVR B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-12.특수목록 철내역) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderSpclList" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKSPCLLIST
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq)
                IN
                (
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKSPCLLIST B ON  A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
			AND    B.spcl_list_loc = '1'
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-13.기록물철관계정보) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderRel" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKFOLDERREL
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq)
                IN
                (
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKFOLDERREL B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-14.기록물철인수오류) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderError" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKFOLDERERROR
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq)
                IN
                (
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKFOLDERERROR B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-15.기록물철목적분류) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolderPjtClss" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKFOLDERPJTCLSS
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq)
                IN
                (
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKFOLDERPJTCLSS B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-16.비전자기록물철 인수계획) (DELETE)
	 -->
	 <delete id="deleteRecvTakeFolderNonElectPlan" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKFOLDER_NONELECT
                <!--cubrid delete-->
		WHERE CONCAT(record_center_id, folder_take_seq)
                IN
                (
			SELECT CONCAT(B.record_center_id, B.folder_take_seq)
			FROM   TB_TKFOLDER A INNER JOIN TB_TKFOLDERPJTCLSS B ON A.record_center_id = B.record_center_id AND    A.folder_take_seq = B.folder_take_seq
			WHERE  A.record_center_id = #recordCenterId:VARCHAR#
			AND    A.take_yyyy = #takeYyyy:VARCHAR#
			AND    A.take_org_cd = #takeOrgCd:VARCHAR#
			AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND    A.take_sno = #takeSno:NUMBER#
		)
                AND record_center_id > 0 AND folder_take_seq > 0
	</delete>
	 
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-16.기록물철) (DELETE)
	 -->
	<delete id="deleteRecvTakeFolder" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKFOLDER A
		WHERE  A.record_center_id = #recordCenterId:VARCHAR#
		AND    A.take_yyyy = #takeYyyy:VARCHAR#
		AND    A.take_org_cd = #takeOrgCd:VARCHAR#
		AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
		AND    A.take_sno = #takeSno:NUMBER#
	</delete>
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-17.처리과별 인수오류) (DELETE)
	 -->
	<delete id="deleteRecvTakeOrgTakeError" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKORGTAKEERROR A
		WHERE  A.record_center_id = #recordCenterId:VARCHAR#
		AND    A.take_yyyy = #takeYyyy:VARCHAR#
		AND    A.take_org_cd = #takeOrgCd:VARCHAR#
		AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
		AND    A.take_sno = #takeSno:NUMBER#
	</delete>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-18.처리과별 인수오류) (DELETE)
	 -->
	<delete id="deleteRecvTakeOrgRecvError" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKORGRECVERROR A
		WHERE  A.record_center_id = #recordCenterId:VARCHAR#
		AND    A.take_yyyy = #takeYyyy:VARCHAR#
		AND    A.take_org_cd = #takeOrgCd:VARCHAR#
		AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
		AND    A.take_sno = #takeSno:NUMBER#
	</delete>
	
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (삭제-19.처리과별 인수계획) (DELETE)
	 -->
	<delete id="deleteRecvTakeOrgTakePlan" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		DELETE FROM TB_TKORGTAKEPLAN a
		WHERE  A.record_center_id = #recordCenterId:VARCHAR#
		AND    A.take_yyyy = #takeYyyy:VARCHAR#
		AND    A.take_org_cd = #takeOrgCd:VARCHAR#
		AND    A.creat_sys_cd = #creatSysCd:VARCHAR#
		AND    A.take_sno = #takeSno:NUMBER#
	</delete>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리 (SELECT count)
	 -->
	<select id="countUndTakeCheckPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheck" resultClass="long">		
		SELECT count(1)
	    FROM (SELECT  A.record_center_id
	                , A.take_yyyy
	                , A.take_org_cd 
	                , A.creat_sys_cd
	                , A.parent_take_sno parent_take_sno
	                , max(A.take_sno) take_sno
	                , sum(A.recv_folder_cnt) recv_folder_cnt
	                , sum(A.recv_record_cnt) recv_record_cnt
	          FROM tb_tkorgtakeplan A
	          WHERE A.record_center_id = #recordCenterId:VARCHAR#
	          AND   A.take_yyyy = #takeYyyy:VARCHAR#
	          AND   A.take_org_cd  IN (SELECT B.org_cd
	                                   FROM TB_STORG B, TB_STLINKTRGT C
	                                   WHERE B.record_center_id = #recordCenterId:VARCHAR#
	                                   AND   B.lINk_trgt_id=C.lINk_trgt_id
	                                   <isNotEmpty prepend="AND" property="takeOrgCd">
	                                      B.org_cd = #takeOrgCd:VARCHAR#
	                                   </isNotEmpty>
	                                   <isNotEmpty prepend="AND" property="creatSysCd">
	                                      C.creat_sys_cd = #creatSysCd:VARCHAR#
	                                   </isNotEmpty>
	                                  )
	          <isNotEmpty prepend="AND" property="creatSysCd">
	                A.creat_sys_cd = #creatSysCd:VARCHAR#
	          </isNotEmpty>
	          AND   A.recv_fin_state_cd = '3'
	          <isNotEmpty prepend="AND" property="examStateDiv">
	                A.take_state_div_cd = #examStateDiv:VARCHAR#
	          </isNotEmpty>                                    
	          AND  (A.app_take_type_cd is null OR A.app_take_type_cd = '0')
	          GROUP BY record_center_id, creat_sys_cd, take_yyyy, take_org_cd, parent_take_sno 
	    ) B
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리 (SELECT)
	 -->
	<select id="findUndTakeCheckPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheck" resultMap="undTakeCheck-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT Z.record_center_id
		      ,Z.take_yyyy
		      ,Z.take_org_cd
		      ,Z.creat_sys_cd
		      ,Z.take_sno
		      ,Z.take_state_div_cd
		      ,(SELECT org_nm FROM TB_STORG WHERE record_center_id=Z.record_center_id AND org_cd=Z.take_org_cd) take_org_nm
		      ,(SELECT org_abbr_nm FROM TB_STORG WHERE record_center_id=Z.record_center_id AND org_cd=Z.take_org_cd) take_org_abbr_nm
		      ,(SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='RD17' AND com_cd=Z.creat_sys_cd) creat_sys_cd_nm
		      ,(SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='TK08' AND com_cd=Z.take_state_div_cd) take_state_div_cd_nm
		      ,Z.recv_folder_cnt
		      ,Z.recv_record_cnt
		      ,Z.virus_check_flag
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 1, 10)) folder_cnt01
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 12, 10)) folder_cnt02
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 23, 10)) folder_cnt03
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 34, 10)) folder_cnt04
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 45, 10)) folder_cnt05
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 56, 10)) folder_cnt06
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 67, 10)) folder_cnt07
		      ,TO_NUMBER(SUBSTR(Z.record_info, 1, 10)) record_cnt01
		      ,TO_NUMBER(SUBSTR(Z.record_info, 12, 10)) record_cnt02
		      ,TO_NUMBER(SUBSTR(Z.record_info, 23, 10)) record_cnt03
		      ,TO_NUMBER(SUBSTR(Z.record_info, 34, 10)) record_cnt04
		      ,TO_NUMBER(SUBSTR(Z.record_info, 45, 10)) record_cnt05
		      ,TO_NUMBER(SUBSTR(Z.record_info, 56, 10)) record_cnt06
		      ,TO_NUMBER(SUBSTR(Z.record_info, 67, 10)) record_cnt07
		      ,erecord_flag_cnt
		FROM (
		    SELECT   B.record_center_id
		           , B.take_yyyy
		           , B.take_org_cd
		           , B.creat_sys_cd
		           , B.parent_take_sno
		           , B.take_sno
		           , B.recv_folder_cnt
		           , B.recv_record_cnt 
		           , (SELECT Z.take_state_div_cd FROM tb_tkorgtakeplan Z WHERE Z.record_center_id = B.record_center_id AND Z.take_yyyy = B.take_yyyy AND Z.take_org_cd = B.take_org_cd AND Z.creat_sys_cd = B.creat_sys_cd AND Z.take_sno = B.take_sno) take_state_div_cd
		           , (SELECT Z.virus_check_flag FROM tb_tkorgtakeplan Z WHERE Z.record_center_id = B.record_center_id AND Z.take_yyyy = B.take_yyyy AND Z.take_org_cd = B.take_org_cd AND Z.creat_sys_cd = B.creat_sys_cd AND Z.take_sno = B.take_sno) virus_check_flag
		           ,  ( SELECT LPAD(COUNT(1),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.exam_rslt_cd, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.exam_rslt_cd, '2', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.rjct_flag, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_flag, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_state_cd, '0', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_state_cd, '3', 1, 0)),0),10,'0')
		                        FROM TB_TKFOLDER C
		                        WHERE C.record_center_id    = B.record_center_id
		                        AND   C.take_yyyy           = B.take_yyyy
		                        AND   C.take_org_cd         = B.take_org_cd
		                        AND   C.creat_sys_cd        = B.creat_sys_cd
		                        AND   C.take_sno            IN (SELECT Z.take_sno 
		                                                        FROM tb_tkorgtakeplan Z 
		                                                        WHERE Z.record_center_id = B.record_center_id 
		                                                        AND Z.take_yyyy = B.take_yyyy 
		                                                        AND Z.take_org_cd = B.take_org_cd 
		                                                        AND Z.creat_sys_cd = B.creat_sys_cd
		                                                        AND Z.parent_take_sno = B.parent_take_sno)
		                        AND   C.recv_re_flag  is null
		                        ) AS folder_INfo
		            , ( SELECT LPAD(COUNT(1),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.exam_rslt_cd, '1',1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.exam_rslt_cd, '2', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.rjct_flag, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_flag, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_state_cd, '0', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_state_cd, '3', 1, 0)),0),10,'0')
		                        FROM  TB_TKFOLDER C
		                            , TB_TKRECORD D
		                        WHERE C.record_center_id    = B.record_center_id
		                        AND   C.take_yyyy           = B.take_yyyy
		                        AND   C.take_org_cd         = B.take_org_cd
		                        AND   C.creat_sys_cd        = B.creat_sys_cd
		                        AND   C.take_sno            IN (SELECT Z.take_sno 
		                                                        FROM tb_tkorgtakeplan Z 
		                                                        WHERE Z.record_center_id = B.record_center_id 
		                                                        AND Z.take_yyyy = B.take_yyyy 
		                                                        AND Z.take_org_cd = B.take_org_cd 
		                                                        AND Z.creat_sys_cd = B.creat_sys_cd
		                                                        AND Z.parent_take_sno = B.parent_take_sno)
		                        AND   C.recv_re_flag is null
		                        AND   D.record_center_id    = C.record_center_id
		                        AND   D.folder_take_seq     = C.folder_take_seq) AS record_INfo
		            , ( SELECT count(1) 
                       FROM   tb_tkfolder X 
                       WHERE  X.record_center_id = B.record_center_id
                       AND    X.take_yyyy = B.take_yyyy
                       AND    X.take_org_cd = B.take_org_cd
                       AND    X.creat_sys_cd = B.creat_sys_cd 
                       AND    X.take_sno     IN (SELECT Z.take_sno 
                                                                FROM tb_tkorgtakeplan Z 
                                                                WHERE Z.record_center_id = B.record_center_id 
                                                                AND Z.take_yyyy = B.take_yyyy 
                                                                AND Z.take_org_cd = B.take_org_cd 
                                                                AND Z.creat_sys_cd = B.creat_sys_cd
                                                                AND Z.parent_take_sno = B.parent_take_sno)
                       AND X.erecord_flag in ('2','3')
                       AND recv_re_flag is null) erecord_flag_cnt
                     ,B.take_ymd
                     ,B.reg_dtime
		    FROM (SELECT  A.record_center_id
		                , A.take_yyyy
		                , A.take_org_cd 
		                , A.creat_sys_cd
		                , A.parent_take_sno parent_take_sno
		                , MAX(A.take_sno) take_sno
		                , SUM(A.recv_folder_cnt) recv_folder_cnt
		                , SUM(A.recv_record_cnt) recv_record_cnt
		                , MAX(A.take_ymd) take_ymd
                     	, MAX(A.reg_dtime) reg_dtime
		          FROM tb_tkorgtakeplan A
		          WHERE A.record_center_id = #recordCenterId:VARCHAR#
		          AND   A.take_yyyy = #takeYyyy:VARCHAR#
		          AND   A.take_org_cd  IN (SELECT B.org_cd
		                                   FROM TB_STORG B, TB_STLINKTRGT C
		                                   WHERE B.record_center_id = #recordCenterId:VARCHAR#
		                                   AND   B.lINk_trgt_id=C.lINk_trgt_id
		                                   <isNotEmpty prepend="AND" property="takeOrgCd">
		                                      B.org_cd = #takeOrgCd:VARCHAR#
		                                   </isNotEmpty>
		                                   <isNotEmpty prepend="AND" property="creatSysCd">
		                                      C.creat_sys_cd = #creatSysCd:VARCHAR#
		                                   </isNotEmpty>
		                                  )
		          <isNotEmpty prepend="AND" property="creatSysCd">
		                A.creat_sys_cd = #creatSysCd:VARCHAR#
		          </isNotEmpty>
		          AND   A.recv_fin_state_cd = '3'
		          <isNotEmpty prepend="AND" property="examStateDiv">
		                A.take_state_div_cd = #examStateDiv:VARCHAR#
		          </isNotEmpty>                                    
		          AND  (A.app_take_type_cd is null OR A.app_take_type_cd = '0')
		          GROUP BY record_center_id, creat_sys_cd, take_yyyy, take_org_cd, parent_take_sno 
		    ) B
		)Z
		ORDER BY Z.record_center_id, Z.take_ymd DESC, Z.reg_dtime DESC, Z.take_yyyy, Z.take_org_cd, Z.creat_sys_cd, Z.take_sno
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(반려통보) (SELECT)
	 -->
	<select id="findUndTakeCheckRjctInfrm" parameterClass="rms.take.undTake.domain.UndTakeCheckRjctInfrm" resultMap="undTakeCheckRjctInfrm-result">
		SELECT record_center_id
		     , take_yyyy
		     , take_org_cd
		     , creat_sys_cd
		     , take_sno
		     , take_state_div_cd
		     , rjct_ymd
		     , rjct_rsn
		     , recv_div_cd
		     , infrm_file_nm
		     , NVL(infrm_div_cd,'0') infrm_div_cd
		FROM  TB_TKORGTAKEPLAN
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   take_yyyy = #takeYyyy:VARCHAR#
		AND   take_org_cd = #takeOrgCd:VARCHAR#
		AND   creat_sys_cd = #creatSysCd:VARCHAR#
		AND   take_sno = #takeSno:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수통보) (SELECT)
	 -->
	<select id="findUndTakeCheckTakeInfrm" parameterClass="rms.take.undTake.domain.UndTakeCheckTakeInfrm" resultMap="undTakeCheckTakeInfrm-result">
		SELECT record_center_id
		     , take_yyyy
		     , take_org_cd
		     , creat_sys_cd
		     , take_sno
		     , take_state_div_cd
		     , take_ymd
		     , take_user_nm
		     , takovr_user_nm
		     , recv_div_cd
		     , infrm_file_nm
		     , NVL(infrm_div_cd,'0') infrm_div_cd
		FROM  TB_TKORGTAKEPLAN
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   take_yyyy = #takeYyyy:VARCHAR#
		AND   take_org_cd = #takeOrgCd:VARCHAR#
		AND   creat_sys_cd = #creatSysCd:VARCHAR#
		AND   take_sno = #takeSno:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인쇄-인수인계서 해더정보) (SELECT)
	 -->
	<select id="findUndTakeCheckPrintHeader" parameterClass="rms.take.undTake.domain.UndTakeCheck" resultMap="undTakeCheckPrintHeader-result">
		SELECT A.record_center_id
		     , A.take_yyyy
		     , A.take_org_cd
		     , A.creat_sys_cd
		     , A.take_sno
		     , A.take_user_nm
		     , A.takovr_user_nm
		     , B.org_nm take_org_nm
		FROM  TB_TKORGTAKEPLAN A
		    , TB_STORG B
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		AND   A.take_yyyy = #takeYyyy:VARCHAR#
		AND   A.take_org_cd = #takeOrgCd:VARCHAR#
		AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
		AND   A.take_sno = #takeSno:NUMBER#
		AND   A.record_center_id = B.record_center_id
		AND   A.take_org_cd = B.org_cd
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인쇄-인수인계서 철목록) (SELECT)
	 -->
	<select id="findUndTakeCheckPrintFolder" parameterClass="rms.take.undTake.domain.UndTakeCheck" resultMap="undTakeCheckPrintFolder-result">
		SELECT A.creat_sys_folder_id
		     , A.org_cd
		     , A.clss_id
		     , A.creat_yyyy
		     , A.folder_reg_seq
		     , A.ho_no		     		     		     		     		
		     , A.title
		     , TO_CHAR(TO_NUMBER(A.record_reg_cnt)) record_reg_cnt
		     , TO_CHAR(TO_NUMBER(A.record_tot_page_cnt)) record_tot_page_cnt
		     , B.com_cd_nm folder_type_div_cd
		FROM  TB_TKFOLDER A
		    , (SELECT com_cd, com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd = 'RD01') B
		WHERE A.folder_type_div_cd = B.com_cd(+)
		AND   A.record_center_id = #recordCenterId:VARCHAR#
		AND   A.take_yyyy = #takeYyyy:VARCHAR#
		AND   A.take_org_cd = #takeOrgCd:VARCHAR#
		AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
		AND   A.take_sno = #takeSno:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(철목록) (COUNT)
	 -->
	<select id="countUndTakeCheckFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="long">
		SELECT COUNT(1)
		FROM  (
			SELECT A.folder_take_seq
			     , A.clss_id
			     , A.clss_nm
			     , A.title
			     , A.creat_yyyy
			     , A.presv_term_cd
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
				    AND   C.com_cd = A.presv_term_cd) presv_term_nm
			     , A.erecord_flag
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'RD23'
				    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
			     , A.virus_flag
			     , A.error_flag
			     , DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) auto_check
			     , NVL(A.exam_rslt_cd,'0') exam_rslt_cd
			     , (SELECT C.com_cd_nm
		            FROM  TB_ZZCOMCD C
			        WHERE C.com_type_cd = 'TK03'
			        AND   C.com_cd = NVL(A.exam_rslt_cd,'0')) exam_rslt_nm
			     , A.rjct_flag
			     , A.rjct_cont
			     , A.take_fin_flag
			     , DECODE(A.take_fin_flag,'1','4',DECODE(A.rjct_flag,'1','3',NVL(A.exam_rslt_cd,'0'))) status
			     , A.take_fin_state_cd
			     ,  NVL((SELECT Z.take_off_div_cd 
		         		 FROM tb_tkfolder_nonelect Z 
		         		 WHERE Z.record_center_id = A.record_center_id 
		         		 AND Z.folder_take_seq = 
		         		 A.folder_take_seq), '0') nefolder_state_cd
			FROM  TB_TKFOLDER A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.take_yyyy = #takeYyyy:VARCHAR#
			AND   A.take_org_cd = #takeOrgCd:VARCHAR#
			AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
			<isNotEmpty prepend="AND" property="orgCd">
				A.org_cd = #orgCd:VARCHAR#
			</isNotEmpty>
			AND   A.take_sno IN (SELECT Z.take_sno 
                        		 FROM tb_tkorgtakeplan Z
                         	 	 WHERE Z.record_center_id= A.record_center_id
                         		 AND   Z.take_yyyy       = A.take_yyyy
                         		 AND   Z.take_org_cd     = A.take_org_cd
                         		 AND   Z.creat_sys_cd    = A.creat_sys_cd
                         		 and   Z.parent_take_sno = (SELECT K.parent_take_sno 
                                                    		FROM tb_tkorgtakeplan K 
                                                    		WHERE K.record_center_id = Z.record_center_id 
                                                    		AND K.take_yyyy = Z.take_yyyy 
                                                    		AND K.take_org_cd = Z.take_org_cd
                                                    		AND K.creat_sys_cd = Z.creat_sys_cd 
                                                    		AND K.take_sno = #takeSno:NUMBER#))
    		AND recv_re_flag is null
			<isNotEmpty prepend="AND" property="erecordFlag">
				  A.erecord_flag = #erecordFlag:VARCHAR#
			</isNotEmpty>
		)
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="autoCheck">
				  auto_check = #autoCheck:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="status">
				  status = #status:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="nEfolderStateCd">
				<isEqual property="nEfolderStateCd"  compareValue="X">
					nefolder_state_cd = '0' AND erecord_flag IN ('2', '3')
				</isEqual>
				<isEqual property="nEfolderStateCd"  compareValue="-">
					nefolder_state_cd = '0' AND erecord_flag = '1'
				</isEqual>
				<isEqual property="nEfolderStateCd" compareValue="O">
					nefolder_state_cd != '0'
				</isEqual>
			</isNotEmpty>
		</dynamic>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(철목록) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeCheckFolder-result">
	SELECT C.*
  FROM (SELECT ROWNUM AS rnum, B.*
          FROM (
		SELECT record_center_id
		     , folder_take_seq
		     , clss_id
		     , clss_nm
		     , title
		     , creat_yyyy
		     , presv_term_cd
		     , presv_term_nm
		     , erecord_flag
		     , erecord_flag_nm
		     , virus_flag
		     , error_flag
		     , auto_check
		     , exam_rslt_cd
		     , exam_rslt_nm
		     , rjct_flag
		     , rjct_cont
		     , take_fin_flag
		     , status
		     , DECODE(status,'4','인수','3','반려',exam_rslt_nm) status_nm
		     , take_fin_state_cd
		     , recv_re_cnt
		     , nefolder_state_cd
		FROM  (
			SELECT A.record_center_id
			     , A.folder_take_seq
			     , A.clss_id
			     , A.clss_nm
			     , A.title
			     , A.creat_yyyy
			     , A.presv_term_cd
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
				    AND   C.com_cd = A.presv_term_cd) presv_term_nm
			     , A.erecord_flag
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'RD23'
				    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
			     , A.virus_flag
			     , A.error_flag
			     , DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) auto_check
			     , NVL(A.exam_rslt_cd,'0') exam_rslt_cd
			     , (SELECT C.com_cd_nm
		            FROM  TB_ZZCOMCD C
			        WHERE C.com_type_cd = 'TK03'
			        AND   C.com_cd = NVL(A.exam_rslt_cd,'0')) exam_rslt_nm
			     , A.rjct_flag
			     , A.rjct_cont
			     , A.take_fin_flag
			     , DECODE(A.take_fin_flag,'1','4',DECODE(A.rjct_flag,'1','3',NVL(A.exam_rslt_cd,'0'))) status
			     , A.take_fin_state_cd
			     , (SELECT COUNT(1)
		            FROM tb_tkfoldertakehist Z 
		            WHERE Z.record_center_id = A.record_center_id 
		            AND Z.creat_sys_cd = A.creat_sys_cd 
		            AND Z.org_cd = A.org_cd
		            AND Z.clss_id = A.clss_id
		            AND Z.folder_reg_seq = A.folder_reg_seq
		            AND Z.ho_no = A.ho_no
		            AND Z.take_state_cd IN ('02','03')) recv_re_cnt
		         ,  NVL((SELECT Z.take_off_div_cd 
		         		 FROM tb_tkfolder_nonelect Z 
		         		 WHERE Z.record_center_id = A.record_center_id 
		         		 AND Z.folder_take_seq = A.folder_take_seq), '0') nefolder_state_cd
			FROM  TB_TKFOLDER A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.take_yyyy = #takeYyyy:VARCHAR#
			AND   A.take_org_cd = #takeOrgCd:VARCHAR#
			AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
			<isNotEmpty prepend="AND" property="orgCd">
				A.org_cd = #orgCd:VARCHAR#
			</isNotEmpty>
			AND   A.take_sno IN (SELECT Z.take_sno 
                        		 FROM tb_tkorgtakeplan Z
                         	 	 WHERE Z.record_center_id= A.record_center_id
                         		 AND   Z.take_yyyy       = A.take_yyyy
                         		 AND   Z.take_org_cd     = A.take_org_cd
                         		 AND   Z.creat_sys_cd    = A.creat_sys_cd
                         		 and   Z.parent_take_sno = (SELECT K.parent_take_sno 
                                                    		FROM tb_tkorgtakeplan K 
                                                    		WHERE K.record_center_id = Z.record_center_id 
                                                    		AND K.take_yyyy = Z.take_yyyy 
                                                    		AND K.take_org_cd = Z.take_org_cd
                                                    		AND K.creat_sys_cd = Z.creat_sys_cd
                                                    		AND K.take_sno = #takeSno:NUMBER#))
    		AND recv_re_flag is null
			<isNotEmpty prepend="AND" property="erecordFlag">
				  A.erecord_flag = #erecordFlag:VARCHAR#
			</isNotEmpty>
		)
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="autoCheck">
				  auto_check = #autoCheck:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="status">
				  status = #status:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="nEfolderStateCd">
				<isEqual property="nEfolderStateCd"  compareValue="X">
					nefolder_state_cd = '0' AND erecord_flag IN ('2', '3')
				</isEqual>
				<isEqual property="nEfolderStateCd"  compareValue="-">
					nefolder_state_cd = '0' AND erecord_flag = '1'
				</isEqual>
				<isEqual property="nEfolderStateCd"  compareValue="O">
					nefolder_state_cd != '0'
				</isEqual>
			</isNotEmpty>
		</dynamic>
		ORDER BY folder_take_seq
		) B
		WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리 (인수부서 내 기록물중 오류가 존재하는 기록물철의 수량)
	 -->
	<select id="findUndTakeCheckFolderCount" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="int">
		SELECT COUNT(1)
		  FROM TB_TKFOLDER A
		 WHERE A.record_center_id   = #recordCenterId:VARCHAR#
		   AND A.take_yyyy          = #takeYyyy:VARCHAR#
		   AND A.take_org_cd        = #takeOrgCd:VARCHAR#
		   AND A.creat_sys_cd       = #creatSysCd:VARCHAR#
		   AND A.take_sno IN (
		                    SELECT Z.take_sno
		                      FROM tb_tkorgtakeplan Z
		                     WHERE Z.record_center_id = A.record_center_id
		                       AND Z.take_yyyy = A.take_yyyy
		                       AND Z.take_org_cd = A.take_org_cd
		                       AND Z.creat_sys_cd = A.creat_sys_cd
		                       AND Z.parent_take_sno = (
		                                                SELECT K.parent_take_sno
		                                                  FROM tb_tkorgtakeplan K
		                                                 WHERE K.record_center_id = Z.record_center_id
		                                                   AND K.take_yyyy = Z.take_yyyy
		                                                   AND K.take_org_cd = Z.take_org_cd
		                                                   AND K.creat_sys_cd = Z.creat_sys_cd
		                                                   AND K.take_sno = #takeSno:NUMBER#
		                                                )
		                     )
		   AND (a.recv_re_flag IS NULL OR NVL (A.recv_re_flag, '0') = '0')
		   AND DECODE (A.error_flag, 'Y', 'X', DECODE (NVL (A.virus_dtime, ''), '', 'X', DECODE (A.virus_flag, '1', 'X', 'O'))) = 'O'
	</select>
	
	<select id="findUndTakeCheckExamErrorCount" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="int">
		SELECT COUNT(1)
		  FROM TB_TKFOLDER A
		 WHERE A.record_center_id   = #recordCenterId:VARCHAR#
		   AND A.take_yyyy          = #takeYyyy:VARCHAR#
		   AND A.take_org_cd        = #takeOrgCd:VARCHAR#
		   AND A.creat_sys_cd       = #creatSysCd:VARCHAR#
		   AND A.take_sno IN (
		                    SELECT Z.take_sno
		                      FROM tb_tkorgtakeplan Z
		                     WHERE Z.record_center_id = A.record_center_id
		                       AND Z.take_yyyy = A.take_yyyy
		                       AND Z.take_org_cd = A.take_org_cd
		                       AND Z.creat_sys_cd = A.creat_sys_cd
		                       AND Z.parent_take_sno = (
		                                                SELECT K.parent_take_sno
		                                                  FROM tb_tkorgtakeplan K
		                                                 WHERE K.record_center_id = Z.record_center_id
		                                                   AND K.take_yyyy = Z.take_yyyy
		                                                   AND K.take_org_cd = Z.take_org_cd
		                                                   AND K.creat_sys_cd = Z.creat_sys_cd
		                                                   AND K.take_sno = #takeSno:NUMBER#
		                                                )
		                     )
		   AND (a.recv_re_flag IS NULL OR NVL (A.recv_re_flag, '0') = '0')
		   AND a.exam_rslt_cd = '2'
	</select>
	
	
	<select id="findUndTakeFolderCount" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="int">
		SELECT COUNT(1)
		  FROM TB_TKFOLDER A
		 WHERE A.record_center_id   = #recordCenterId:VARCHAR#
		   AND A.take_yyyy          = #takeYyyy:VARCHAR#
		   AND A.take_org_cd        = #takeOrgCd:VARCHAR#
		   AND A.creat_sys_cd       = #creatSysCd:VARCHAR#
		   AND A.take_sno IN (
		                    SELECT Z.take_sno
		                      FROM tb_tkorgtakeplan Z
		                     WHERE Z.record_center_id = A.record_center_id
		                       AND Z.take_yyyy = A.take_yyyy
		                       AND Z.take_org_cd = A.take_org_cd
		                       AND Z.creat_sys_cd = A.creat_sys_cd
		                       AND Z.parent_take_sno = (
		                                                SELECT K.parent_take_sno
		                                                  FROM tb_tkorgtakeplan K
		                                                 WHERE K.record_center_id = Z.record_center_id
		                                                   AND K.take_yyyy = Z.take_yyyy
		                                                   AND K.take_org_cd = Z.take_org_cd
		                                                   AND K.creat_sys_cd = Z.creat_sys_cd
		                                                   AND K.take_sno = #takeSno:NUMBER#
		                                                )
		                     )
		   AND (a.recv_re_flag IS NULL OR NVL (A.recv_re_flag, '0') = '0')
	</select>
	
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(처리과 인수상태구분값 조회) (SELECT)
	 -->
	<select id="findUndTakeChechTakeStateDiv" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="String">
 	 SELECT A.take_state_div_cd 
	   FROM tb_tkorgtakeplan A
	  WHERE A.record_center_id = #recordCenterId:VARCHAR#
	    AND A.take_yyyy          = #takeYyyy:VARCHAR#
	    AND A.take_org_cd        = #takeOrgCd:VARCHAR#
	    AND A.creat_sys_cd       = #creatSysCd:VARCHAR#
	    AND A.take_sno 		     = #takeSno:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수대상 및 계획수량 조회) (SELECT)
	 -->
	<resultMap id="findUndTakeCheckNerecordFolderCnt-result" class="java.util.HashMap">
		<result property="nErecordCnt" 			column="n_erecord_cnt"/>
		<result property="nErecordPlanCnt" 		column="n_erecord_plan_cnt"/>
	</resultMap>
	<select id="findUndTakeCheckNerecordFolderCnt" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="findUndTakeCheckNerecordFolderCnt-result">
		    SELECT  SUM(CASE WHEN A.erecord_flag = '2' OR A.erecord_flag = '3' THEN '1'
		                 ELSE '0'
		            END) n_erecord_cnt
		           ,SUM((SELECT COUNT(1) FROM tb_tkfolder_nonelect Z WHERE Z.record_center_id = A.record_center_id AND Z.folder_take_seq = A.folder_take_seq AND A.erecord_flag in ('2','3'))) n_erecord_plan_cnt
		    FROM tb_tkfolder A
		    WHERE A.record_center_id = #recordCenterId:VARCHAR#
		    AND A.take_yyyy          = #takeYyyy:VARCHAR#
		    AND A.take_org_cd        = #takeOrgCd:VARCHAR#
		    AND A.creat_sys_cd       = #creatSysCd:VARCHAR#
		    AND A.take_sno IN (SELECT Z.take_sno 
		                                     FROM tb_tkorgtakeplan Z
		                                       WHERE Z.record_center_id= A.record_center_id
		                                      AND   Z.take_yyyy       = A.take_yyyy
		                                      AND   Z.take_org_cd     = A.take_org_cd
		                                      AND   Z.creat_sys_cd    = A.creat_sys_cd
		                                      and   Z.parent_take_sno = (SELECT K.parent_take_sno 
		                                                                FROM tb_tkorgtakeplan K 
		                                                                WHERE K.record_center_id = Z.record_center_id 
		                                                                AND K.take_yyyy = Z.take_yyyy 
		                                                                AND K.take_org_cd = Z.take_org_cd
		                                                                AND K.creat_sys_cd = Z.creat_sys_cd 
		                                                                AND K.take_sno = #takeSno:NUMBER#))
		    AND A.recv_re_flag IS NULL
	</select>
	 
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수계획 철목록) (COUNT)
	 -->
	<select id="countUndTakePlanFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakePlanFolder" resultClass="long">
		SELECT COUNT(1)
		FROM  (
		    SELECT (SELECT NVL(Z.take_off_div_cd, '0') FROM tb_tkfolder_nonelect Z WHERE Z.record_center_id = A.record_center_id AND Z.folder_take_seq = A.folder_take_seq) take_off_div_cd
		    FROM  TB_TKFOLDER A
		    WHERE A.record_center_id = #recordCenterId:VARCHAR#
		    AND   A.take_yyyy        = #takeYyyy:VARCHAR#
		    AND   A.take_org_cd      = #takeOrgCd:VARCHAR#
		    AND   A.creat_sys_cd     = #creatSysCd:VARCHAR#
		    AND   A.take_sno IN (SELECT Z.take_sno 
		                         FROM tb_tkorgtakeplan Z
		                           WHERE Z.record_center_id= A.record_center_id
		                          AND   Z.take_yyyy       = A.take_yyyy
		                          AND   Z.take_org_cd     = A.take_org_cd
		                          AND   Z.creat_sys_cd    = A.creat_sys_cd
		                          and   Z.parent_take_sno = (SELECT K.parent_take_sno 
		                                                    FROM tb_tkorgtakeplan K 
		                                                    WHERE K.record_center_id = Z.record_center_id 
		                                                    AND K.take_yyyy = Z.take_yyyy 
		                                                    AND K.take_org_cd = Z.take_org_cd 
		                                                    AND K.creat_sys_cd = Z.creat_sys_cd
		                                                    AND K.take_sno = #takeSno:NUMBER#))
		    AND erecord_flag in ('2', '3')
		    AND recv_re_flag is null
		) C
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="takeOffDivCd">
				NVL(C.take_off_div_cd, '0') = #takeOffDivCd:VARCHAR#
			</isNotEmpty>
		</dynamic>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수계획 철목록) (RESULT)
	 -->
	<resultMap id="undTakePlanFolder-result" class="rms.take.undTake.domain.TkFolder">
		<result property="folderTakeSeq" 			column="folder_take_seq"/>
		<result property="clssId" 					column="clss_id"/>
		<result property="clssNm" 					column="clss_nm"/>
		<result property="title" 					column="title"/>
		<result property="creatYyyy" 				column="creat_yyyy"/>
		<result property="presvTermCd" 				column="presv_term_cd"/>
		<result property="presvTermNm" 				column="presv_term_nm"/>
		<result property="erecordFlag" 				column="erecord_flag"/>
		<result property="erecordFlagNm" 			column="erecord_flag_nm"/>
		<result property="examRsltCd"	 			column="exam_rslt_cd"/>
		<result property="examRsltNm"	 			column="exam_rslt_nm"/>
		<result property="takeFinFlag"	 			column="take_fin_flag"/>
		<result property="takePlanYyyy"	 			column="take_plan_yyyy"/>
		<result property="takeOffDivCd"				column="take_off_div_cd"/>
		<result property="takeOffRsn"				column="take_off_rsn"/>
		<result property="notEfile"					column="not_efile"/>
		<result property="takeStateDivNm"			column="take_state_div_nm"/>
	</resultMap>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수계획 철목록) (SELECT)
	 -->
	<select id="findUndTakePlanFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakePlanFolder" resultMap="undTakePlanFolder-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT C.folder_take_seq
		      ,C.clss_id
		      ,C.clss_nm
		      ,C.title
		      ,C.creat_yyyy
		      ,C.presv_term_cd
		      ,C.presv_term_nm
		      ,C.erecord_flag
		      ,C.erecord_flag_nm
		      ,C.exam_rslt_cd
		      ,C.exam_rslt_nm
		      ,C.take_fin_flag
		      ,C.take_plan_yyyy
		      ,NVL(C.take_off_div_cd, '0') take_off_div_cd
		      ,C.take_off_rsn
		      ,C.not_efile
		      , case 
		      	when NVL(C.take_off_div_cd, '0') = '0' then '미처리'
		      	when NVL(C.take_off_div_cd, '0') = '1' then '확정'
		      	when NVL(C.take_off_div_cd, '0') = '2' then '보류'
		      	end AS take_state_div_nm
		FROM  (
		    SELECT A.folder_take_seq
		         , A.clss_id
		         , A.clss_nm
		         , A.title
		         , A.creat_yyyy
		         , A.presv_term_cd
		         , (SELECT C.com_cd_nm
		            FROM TB_ZZCOMCD C
		            WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
		            AND   C.com_cd = A.presv_term_cd) presv_term_nm
		         , A.erecord_flag
		         , (SELECT C.com_cd_nm
		            FROM TB_ZZCOMCD C
		            WHERE C.com_type_cd = 'RD23'
		            AND   C.com_cd = A.erecord_flag) erecord_flag_nm
		         , A.exam_rslt_cd
		         , (SELECT C.com_cd_nm
		            FROM  TB_ZZCOMCD C
		            WHERE C.com_type_cd = 'TK03'
		            AND   C.com_cd = NVL(A.exam_rslt_cd,'0')) exam_rslt_nm
		         , A.take_fin_flag
		         , (SELECT Z.take_plan_yyyy FROM tb_tkfolder_nonelect Z WHERE Z.record_center_id = A.record_center_id AND Z.folder_take_seq = A.folder_take_seq) take_plan_yyyy
		         , (SELECT NVL(Z.take_off_div_cd, '0') FROM tb_tkfolder_nonelect Z WHERE Z.record_center_id = A.record_center_id AND Z.folder_take_seq = A.folder_take_seq) take_off_div_cd
		         , (SELECT Z.take_off_RSN FROM tb_tkfolder_nonelect Z WHERE Z.record_center_id = A.record_center_id AND Z.folder_take_seq = A.folder_take_seq) take_off_rsn
		         , (SELECT COUNT(1) FROM tb_tkrecord Z WHERE Z.record_center_id = A.record_center_id AND Z.folder_take_seq = A.folder_take_seq AND Z.erecord_flag = '2') not_efile
		    FROM  TB_TKFOLDER A
		    WHERE A.record_center_id = #recordCenterId:VARCHAR#
		    AND   A.take_yyyy        = #takeYyyy:VARCHAR#
		    AND   A.take_org_cd      = #takeOrgCd:VARCHAR#
		    AND   A.creat_sys_cd     = #creatSysCd:VARCHAR#
		    AND   A.take_sno IN (SELECT Z.take_sno 
		                         FROM tb_tkorgtakeplan Z
		                           WHERE Z.record_center_id= A.record_center_id
		                          AND   Z.take_yyyy       = A.take_yyyy
		                          AND   Z.take_org_cd     = A.take_org_cd
		                          AND   Z.creat_sys_cd    = A.creat_sys_cd
		                          and   Z.parent_take_sno = (SELECT K.parent_take_sno 
		                                                    FROM tb_tkorgtakeplan K 
		                                                    WHERE K.record_center_id = Z.record_center_id 
		                                                    AND K.take_yyyy = Z.take_yyyy 
		                                                    AND K.take_org_cd = Z.take_org_cd 
		                                                    AND K.creat_sys_cd = Z.creat_sys_cd
		                                                    AND K.take_sno = #takeSno:NUMBER#))
		    AND erecord_flag in ('2', '3')
		    AND recv_re_flag is null
		) C
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="takeOffDivCd">
				NVL(C.take_off_div_cd, '0') = #takeOffDivCd:VARCHAR#
			</isNotEmpty>
		</dynamic>
		ORDER BY folder_take_seq
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수계획 등록여부 판별) (select)
	 -->
	 <select id="countUndTakePlanFolderList" parameterClass="rms.take.undTake.domain.UndTakePlanFolder" resultClass="int">
	 	SELECT COUNT(1) FROM tb_tkfolder_nonelect WHERE record_center_id = #recordCenterId:VARCHAR# AND folder_take_seq = #folderTakeSeq:VARCHAR#
	 </select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수계획 등록) (CREATE)
	 -->
	<insert id="createUndTakePlanFolderList" parameterClass="rms.take.undTake.domain.UndTakePlanFolder">
		INSERT INTO tb_tkfolder_nonelect 
			(record_center_id, folder_take_seq, take_plan_yyyy, take_off_div_cd, take_off_rsn, reg_dtime)
		VALUES
			<!--cubrid (#recordCenterId:VARCHAR#, #folderTakeSeq:VARCHAR#, #takePlanYyyy:VARCHAR#, #takeOffDivCd:VARCHAR#, #takeOffRsn:VARCHAR#, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))-->
			(#recordCenterId:VARCHAR#, #folderTakeSeq:VARCHAR#, #takePlanYyyy:VARCHAR#, #takeOffDivCd:VARCHAR#, #takeOffRsn:VARCHAR#, TO_CHAR(sys_datetime, 'YYYYMMDDHH24MISS'))
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수계획 수정) (UPDATE)
	 -->
	<insert id="updateUndTakePlanFolderList" parameterClass="rms.take.undTake.domain.UndTakePlanFolder">
		UPDATE tb_tkfolder_nonelect 
		   SET take_plan_yyyy = #takePlanYyyy:VARCHAR#
		   	  ,take_off_div_cd = #takeOffDivCd:VARCHAR#
		      ,take_off_rsn   = #takeOffRsn:VARCHAR#
		      <!--cubrid ,reg_dtime 	  = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')-->
		      ,reg_dtime 	  = TO_CHAR(sys_datetime, 'YYYYMMDDHH24MISS')
		 WHERE record_center_id = #recordCenterId:VARCHAR#
		   AND folder_take_seq  = #folderTakeSeq:VARCHAR# 
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수계획) - RD쪽 비전자인수계획 등록 여부 판별용 folderId 조회	
	 -->
	<select id="findUndTakePlanNonElectFolderId" parameterClass="rms.take.undTake.domain.UndTakePlanFolder" resultClass="string">
		SELECT folder_id FROM tb_rdfolder WHERE record_center_id = #recordCenterId:VARCHAR# AND folder_take_seq = #folderTakeSeq:VARCHAR#
	</select>

	<!-- 
		기록물인수>연계인수>연계인수>검수처리(비전자기록물 인수계획) - RD 비전자기록물 인수계획 등록여부 조회
	 -->
	<select id="countUndTakePlanNonElectFolder" parameterClass="rms.take.undTake.domain.UndTakePlanFolder" resultClass="int">
		SELECT count(1) FROM tb_rdfolder_nonelect WHERE record_center_id = #recordCenterId:VARCHAR# AND folder_id = #folderId:VARCHAR#	
	</select>
		
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(철목록-일괄검수) (UPDATE)
		바이러스 검출 여부와 상관 없이 오류여부로만 판단 하도록 수정
	 -->
	<update id="updateUndTakeCheckFolderBatch" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKFOLDER
                <!--cubrid update-->
		SET exam_rslt_cd = (CASE WHEN error_flag = 'Y' THEN '2' ELSE '1' END)
		WHERE CONCAT(record_center_id, folder_take_seq)
			IN ( SELECT CONCAT(record_center_id, folder_take_seq)
		         FROM ( SELECT E.record_center_id, E.folder_take_seq, E.take_yyyy, E.take_org_cd, E.creat_sys_cd, E.take_sno
		                     , E.exam_rslt_cd, E.error_flag, E.virus_flag
					         , DECODE(E.error_flag,'Y','X',DECODE(NVL(E.virus_dtime,''),'','X',DECODE(E.virus_flag,'1','X','O'))) auto_check
							 , DECODE(E.take_fin_flag,'1','4',DECODE(E.rjct_flag,'1','3',NVL(E.exam_rslt_cd,'0'))) status
		                FROM  TB_TKFOLDER E
						WHERE E.record_center_id = #recordCenterId:VARCHAR#
						AND   E.take_yyyy = #takeYyyy:VARCHAR#
						AND   E.take_org_cd = #takeOrgCd:VARCHAR#
						AND   E.creat_sys_cd = #creatSysCd:VARCHAR#
						AND   E.take_sno IN (SELECT take_sno 
                                             FROM tb_tkorgtakeplan D 
                                             WHERE D.record_center_id = E.record_center_id
                                             AND D.take_yyyy          = E.take_yyyy     
                                             AND D.take_org_cd        = E.take_org_cd
                                             AND D.creat_sys_cd       = E.creat_sys_cd
                                             AND D.parent_take_sno    = (SELECT F.parent_take_sno 
                                                                         FROM tb_tkorgtakeplan F 
                                                                         WHERE F.record_center_id = D.record_center_id 
                                                                         AND F.take_yyyy = D.take_yyyy 
                                                                         AND F.take_org_cd = D.take_org_cd 
                                                                         AND F.creat_sys_cd = D.creat_sys_cd
                                                                         AND F.take_sno = #takeSno:NUMBER#))
						AND   E.exam_rslt_cd = '0' 
						AND   (E.rjct_flag = '0' or E.rjct_flag is null) 
						<isNotEmpty prepend="AND" property="erecordFlag">
							  E.erecord_flag = #erecordFlag:VARCHAR#
						</isNotEmpty>
					)
					<dynamic prepend="WHERE">
						<isNotEmpty prepend="AND" property="autoCheck">
							  auto_check = #autoCheck:VARCHAR#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="status">
							  status = #status:VARCHAR#
						</isNotEmpty>
					</dynamic>
				)
		AND record_center_id > 0 AND folder_take_seq > 0
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(철목록-일괄검수-일괄 철저장 후 해당 인수계획에 포함된 미검수 수량조회) (select)
	 -->
	<select id="countUndTakeCheckFolderBatchPlan" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="int">
		SELECT COUNT(1)
		FROM  TB_TKFOLDER E
		WHERE E.record_center_id = #recordCenterId:VARCHAR#
		AND   E.take_yyyy = #takeYyyy:VARCHAR#
		AND   E.take_org_cd = #takeOrgCd:VARCHAR#
		AND   E.creat_sys_cd = #creatSysCd:VARCHAR#
		AND   E.take_sno IN (SELECT take_sno 
                                             FROM tb_tkorgtakeplan D 
                                             WHERE D.record_center_id = E.record_center_id
                                             AND D.take_yyyy          = E.take_yyyy     
                                             AND D.take_org_cd        = E.take_org_cd
                                             AND D.creat_sys_cd       = E.creat_sys_cd
                                             AND D.parent_take_sno    = (SELECT F.parent_take_sno 
                                                                         FROM tb_tkorgtakeplan F 
                                                                         WHERE F.record_center_id = D.record_center_id 
                                                                         AND F.take_yyyy = D.take_yyyy 
                                                                         AND F.take_org_cd = D.take_org_cd 
                                                                         AND F.creat_sys_cd = D.creat_sys_cd
                                                                         AND F.take_sno = #takeSno:NUMBER#))
		AND   E.exam_rslt_cd = '0'
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(철목록-일괄검수-일괄 철저장 후 해당 인수계획의 인수상태구분코드 변경) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderBatchPlan" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKORGTAKEPLAN
		SET   take_state_div_cd = '06'
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   take_yyyy = #takeYyyy:VARCHAR#
		AND   take_org_cd = #takeOrgCd:VARCHAR#
		AND   creat_sys_cd = #creatSysCd:VARCHAR#
		AND   take_sno = #takeSno:NUMBER#
	</update>
	
	<select id="countUndTakeCheckFolderCheckedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolderListParam" resultClass="long">
		SELECT COUNT(*)
		FROM  (
			SELECT A.record_center_id
			     , A.folder_take_seq
			     , A.org_cd
			     , A.clss_id
			     , A.clss_nm
			     , A.title
			     , A.creat_yyyy
			     , A.presv_term_cd
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
				    AND   C.com_cd = A.presv_term_cd) presv_term_nm
			     , A.virus_flag
			     , A.error_flag
			     , DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) auto_check
			     , A.erecord_flag
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'RD23'
				    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
			     , TO_NUMBER(A.record_reg_cnt) record_reg_cnt
			     , NVL(A.exam_rslt_cd,'0') exam_rslt_cd
			     , (SELECT C.com_cd_nm
		            FROM  TB_ZZCOMCD C
			        WHERE C.com_type_cd = 'TK03'
			        AND   C.com_cd = NVL(A.exam_rslt_cd,'0')) exam_rslt_nm
			     , A.exam_cont
			     , DECODE(A.take_fin_flag,'1','4',DECODE(A.rjct_flag,'1','3',NVL(A.exam_rslt_cd,'0'))) status
			FROM TB_TKFOLDER A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			<dynamic>
				<iterate prepend="AND A.folder_take_seq IN" property="folderTakeSeqList" open="(" close=")" conjunction=",">
						#folderTakeSeqList[]:VARCHAR#
				</iterate>
			</dynamic>
			<isNotEmpty prepend="AND" property="autoCheck">
				  DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) = #autoCheck:VARCHAR#
			</isNotEmpty>
			
		)
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-철목록) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderCheckedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolderListParam" resultMap="undTakeCheckFolderCheckedList-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT record_center_id
		     , folder_take_seq
		     , org_cd
		     , clss_id
		     , clss_nm
		     , title
		     , creat_yyyy
		     , presv_term_cd
		     , presv_term_nm
		     , virus_flag
		     , error_flag
		     , auto_check
		     , erecord_flag
		     , erecord_flag_nm
		     , record_reg_cnt
		     , exam_rslt_cd
		     , exam_rslt_nm
		     , exam_cont
		     , status
		     , DECODE(status,'4','인수','3','반려',exam_rslt_nm) status_nm
		FROM  (
			SELECT A.record_center_id
			     , A.folder_take_seq
			     , A.org_cd
			     , A.clss_id
			     , A.clss_nm
			     , A.title
			     , A.creat_yyyy
			     , A.presv_term_cd
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
				    AND   C.com_cd = A.presv_term_cd) presv_term_nm
			     , A.virus_flag
			     , A.error_flag
			     , DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) auto_check
			     , A.erecord_flag
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'RD23'
				    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
			     , TO_NUMBER(A.record_reg_cnt) record_reg_cnt
			     , NVL(A.exam_rslt_cd,'0') exam_rslt_cd
			     , (SELECT C.com_cd_nm
		            FROM  TB_ZZCOMCD C
			        WHERE C.com_type_cd = 'TK03'
			        AND   C.com_cd = NVL(A.exam_rslt_cd,'0')) exam_rslt_nm
			     , A.exam_cont
			     , DECODE(A.take_fin_flag,'1','4',DECODE(A.rjct_flag,'1','3',NVL(A.exam_rslt_cd,'0'))) status
			FROM TB_TKFOLDER A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			<dynamic>
				<iterate prepend="AND A.folder_take_seq IN" property="folderTakeSeqList" open="(" close=")" conjunction=",">
						#folderTakeSeqList[]:VARCHAR#
				</iterate>
			</dynamic>
			<isNotEmpty prepend="AND" property="autoCheck">
				  DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) = #autoCheck:VARCHAR#
			</isNotEmpty>
		)
		ORDER BY folder_take_seq
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-철검수결과저장-정상) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderNormal" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKFOLDER
		SET   exam_rslt_cd = '1'
			, exam_cont = #examCont:VARCHAR#
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-철검수결과저장-오류) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderAbnormal" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKFOLDER
		SET   exam_rslt_cd = '2'
			, exam_cont = #examCont:VARCHAR#
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-철검수결과저장-철저장 후 해당 인수계획에 포함된 미검수 수량조회) (select)
	 -->
	<select id="countUndTakeCheckFolderPlan" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="int">
		SELECT COUNT(1)
		FROM  TB_TKFOLDER A
		<!--cubrid WHERE ( record_center_id, take_yyyy, take_org_cd, creat_sys_cd, take_sno )-->
		WHERE 
			  EXISTS
			  (
				<!--cubridSELECT record_center_id, take_yyyy, take_org_cd, creat_sys_cd, take_sno-->
				SELECT 1
				FROM  TB_TKFOLDER
				WHERE record_center_id = #recordCenterId:VARCHAR#
				AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
				<!--cubrid-->
				AND   record_center_id = A.record_center_id
				AND   take_yyyy = A.take_yyyy
				AND   take_org_cd = A.take_org_cd
				AND   creat_sys_cd = A.creat_sys_cd  
				AND   take_sno = A.take_sno
			   )
		AND   exam_rslt_cd = '0'
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-철검수결과저장-철저장 후 해당 인수계획의 인수상태구분코드 변경) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderPlan" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKORGTAKEPLAN AAA
		SET	<isEqual property="creatSysCd" compareValue="05">
				take_state_div_cd = #regProgStateCd:VARCHAR#
			</isEqual> 
			<isNotEqual property="creatSysCd" compareValue="05">
				take_state_div_cd = '06'
			</isNotEqual>
		WHERE 
		<!--CUBRID
		( record_center_id, take_yyyy, take_org_cd, creat_sys_cd, take_sno )
			  IN
			  (
				SELECT record_center_id, take_yyyy, take_org_cd, creat_sys_cd, take_sno
				-->
		EXISTS (SELECT 1
				FROM  TB_TKFOLDER
				WHERE record_center_id = #recordCenterId:VARCHAR#
				AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
				AND AAA.record_center_id = record_center_id
				AND AAA.take_yyyy = take_yyyy
				AND AAA.take_org_cd = take_org_cd
				AND AAA.creat_sys_cd= creat_sys_cd
				AND AAA.take_sno = take_sno
			   )
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리
		(검수팝업-철검수결과저장-철저장 후 업데이트구분이 일괄등록 일 경우 일괄등록 접수테이블에 포함된 검수완료 수량조회) (select)
	 -->
	<select id="countUndTakeCheckRecvHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="int">
		SELECT COUNT(1)
		FROM  TB_TKFOLDER AAA
		WHERE 
		<!--
		( record_center_id, reg_dtime )
			  IN
			  (
				SELECT record_center_id, reg_dtime
		-->
		EXISTS (SELECT 1
				FROM  TB_TKFOLDER
				WHERE record_center_id = #recordCenterId:VARCHAR#
				AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
				AND AAA.record_center_id = record_center_id
				AND AAA.reg_dtime= reg_dtime
			   )
		AND   ( exam_rslt_cd = '0' OR exam_rslt_cd IS NULL )
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리
		(검수팝업-철검수결과저장-철저장 후 업데이트구분이 일괄등록 일 경우 일괄등록 접수테이블에 포함된 검수오류 수량조회) (select)
	 -->
	<select id="countUndTakeCheckRecvHistError" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="int">
		SELECT COUNT(1)
		FROM  TB_TKFOLDER AAA
		WHERE 
		<!--CUBRID
		( record_center_id, reg_dtime )
			  IN
			  (
				SELECT record_center_id, reg_dtime
		-->
		EXISTS (SELECT 1
				FROM  TB_TKFOLDER
				WHERE record_center_id = #recordCenterId:VARCHAR#
				AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
				AND AAA.record_center_id = record_center_id
				AND AAA.reg_dtime = reg_dtime
			   )
		AND   exam_rslt_cd = '2'
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-철검수결과저장-철저장 후 업데이트구분이 일괄등록 일 경우 일괄등록 접수테이블의 인수상태구분코드 변경) (UPDATE)
	 -->
	<update id="updateUndTakeCheckRecvHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKRECVHIST AAA
		SET   reg_prog_state_cd = #regProgStateCd:VARCHAR#
		    , exam_error_cnt = #examErrorCnt#
		WHERE 
		<!--CUBRID
		( record_center_id, recv_dtime )
			  IN
			  (
				SELECT record_center_id, reg_dtime
				-->
				EXISTS (SELECT 1
				FROM  TB_TKFOLDER
				WHERE record_center_id = #recordCenterId:VARCHAR#
				AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
				AND AAA.record_center_id = record_center_id
				AND AAA.recv_dtime = reg_dtime
			   )
		AND   creat_sys_cd = #creatSysCd:VARCHAR#
		AND   file_div_cd = '1'
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-건목록) (COUNT)
	 -->
	<select id="countUndTakeCheckFolderCheckedRecordPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckRecord" resultClass="long">
		SELECT COUNT(*)
		FROM (
			SELECT A.record_center_id
			     , A.record_take_seq
				 , A.folder_take_seq
			     , A.title
			     , A.creat_yyyy
			     , A.error_flag
			     , A.erecord_flag
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'RD23'
				    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
			     , DECODE(A.error_flag,'Y','X','O') auto_check
			     , NVL(A.exam_rslt_cd,'0') exam_rslt_cd
			     , (SELECT C.com_cd_nm
		            FROM  TB_ZZCOMCD C
			        WHERE C.com_type_cd = 'TK03'
			        AND   C.com_cd = NVL(A.exam_rslt_cd,'0')) exam_rslt_nm
			     , A.exam_cont
				 , (SELECT COUNT(1)
				    FROM TB_TKATTACHFILE B
					WHERE B.record_center_id = A.record_center_id
					AND   B.record_take_seq = A.record_take_seq
					AND   B.virus_flag = '1') virus_cnt
			FROM  TB_TKRECORD A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
			
		) A
		<isNotEmpty prepend="WHERE" property="autoCheck">
				  DECODE(A.error_flag,'Y','X',DECODE(A.virus_cnt,0,'O','X')) = #autoCheck:VARCHAR#
		</isNotEmpty>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-건목록) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderCheckedRecordPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckRecord" resultMap="undTakeCheckFolderCheckedRecord-result">
		SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT A.record_center_id
		     , A.record_take_seq
			 , A.folder_take_seq
		     , A.title
		     , A.creat_yyyy
		     , A.error_flag
		     , A.erecord_flag
			 , A.erecord_flag_nm
		     , DECODE(A.error_flag,'Y','X',DECODE(A.virus_cnt,0,'O','X')) auto_check
		     , A.exam_rslt_cd
		     , A.exam_rslt_nm
		     , A.exam_cont
			 , DECODE(A.virus_cnt,0,'0','1') virus_flag
		FROM (
			SELECT A.record_center_id
			     , A.record_take_seq
				 , A.folder_take_seq
			     , A.title
			     , A.creat_yyyy
			     , A.error_flag
			     , A.erecord_flag
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'RD23'
				    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
			     , DECODE(A.error_flag,'Y','X','O') auto_check
			     , NVL(A.exam_rslt_cd,'0') exam_rslt_cd
			     , (SELECT C.com_cd_nm
		            FROM  TB_ZZCOMCD C
			        WHERE C.com_type_cd = 'TK03'
			        AND   C.com_cd = NVL(A.exam_rslt_cd,'0')) exam_rslt_nm
			     , A.exam_cont
				 , (SELECT COUNT(1)
				    FROM TB_TKATTACHFILE B
					WHERE B.record_center_id = A.record_center_id
					AND   B.record_take_seq = A.record_take_seq
					AND   B.virus_flag = '1'
					AND	  B.virus_clean_flag = '1') virus_cnt
			FROM  TB_TKRECORD A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
			
		) A
		<isNotEmpty prepend="WHERE" property="autoCheck">
				  DECODE(A.error_flag,'Y','X',DECODE(A.virus_cnt,0,'O','X')) = #autoCheck:VARCHAR#
		</isNotEmpty>
		ORDER BY A.record_take_seq
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-건검수결과저장-정상) (UPDATE)
	 -->
	<update id="updateUndTakeCheckRecordNormal" parameterClass="rms.take.undTake.domain.UndTakeCheckRecord">
		UPDATE TB_TKRECORD
		SET   exam_rslt_cd = '1'
			, exam_cont = #examCont:VARCHAR#
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   record_take_seq = #updateRecordTakeSeq:VARCHAR#
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(검수팝업-건검수결과저장-오류) (UPDATE)
	 -->
	<update id="updateUndTakeCheckRecordAbnormal" parameterClass="rms.take.undTake.domain.UndTakeCheckRecord">
		UPDATE TB_TKRECORD
		SET   exam_rslt_cd = '2'
			, exam_cont = #examCont:VARCHAR#
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   record_take_seq = #updateRecordTakeSeq:VARCHAR#
	</update>

	<select id="countUndTakeCheckFolderRjctFolderList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolderListParam" resultClass="long">
	SELECT COUNT(*)
		FROM TB_TKFOLDER A
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		<dynamic>
			<iterate prepend="AND A.folder_take_seq IN" property="folderTakeSeqList" open="(" close=")" conjunction=",">
				#folderTakeSeqList[]:VARCHAR#
			</iterate>
		</dynamic>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(반려팝업-철목록) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderRjctFolderList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolderListParam" resultMap="undTakeCheckFolderRjctFolderList-result">
		SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT A.record_center_id
		     , A.folder_take_seq
		     , A.org_cd
		     , A.clss_id
		     , A.clss_nm
		     , A.title
		     , A.creat_yyyy
		     , A.presv_term_cd
			 , (SELECT C.com_cd_nm
			    FROM TB_ZZCOMCD C
			    WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
			    AND   C.com_cd = A.presv_term_cd) presv_term_nm
		     , A.virus_flag
		     , A.error_flag
		     , DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) auto_check
		     , A.erecord_flag
			 , (SELECT C.com_cd_nm
			    FROM TB_ZZCOMCD C
			    WHERE C.com_type_cd = 'RD23'
			    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
		     , TO_NUMBER(A.record_reg_cnt) AS record_reg_cnt
		     , NVL(A.exam_rslt_cd,'0') exam_rslt_cd
		     , DECODE(A.rjct_flag,'1','반려'
							     ,(SELECT C.com_cd_nm
						            FROM  TB_ZZCOMCD C
							        WHERE C.com_type_cd = 'TK03'
							        AND   C.com_cd = NVL(A.exam_rslt_cd,'0'))) exam_rslt_nm
		     , A.exam_cont
		     , A.rjct_flag
		     , A.rjct_cont
		FROM TB_TKFOLDER A
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		<dynamic>
			<iterate prepend="AND A.folder_take_seq IN" property="folderTakeSeqList" open="(" close=")" conjunction=",">
				#folderTakeSeqList[]:VARCHAR#
			</iterate>
		</dynamic>
		ORDER BY A.folder_take_seq
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(반려팝업-철반려내용저장) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderRjctFolder" parameterClass="rms.take.undTake.domain.UndTakeRjctFolder">
		UPDATE TB_TKFOLDER
		SET   rjct_flag = '1'
			, rjct_cont = #rjctCont:VARCHAR#
			, exam_rslt_cd = '2'
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(반려팝업-건목록) (COUNT)
	 -->
	<select id="countUndTakeCheckFolderRjctRecordPagedList" parameterClass="rms.take.undTake.domain.UndTakeRjctRecord" resultClass="long">
		SELECT COUNT(1)
		FROM  TB_TKRECORD A
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(반려팝업-건목록) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderRjctRecordPagedList" parameterClass="rms.take.undTake.domain.UndTakeRjctRecord" resultMap="undTakeCheckFolderRjctRecord-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT record_center_id
		      ,record_take_seq
		      ,folder_take_seq
		      ,title
		      ,creat_yyyy
		      ,error_flag
		      ,DECODE(auto_check,'X','X', DECODE(virus_cnt, 0, 'O','X')) auto_check
		      ,exam_rslt_cd
		      ,exam_rslt_nm
		      ,exam_cont
		FROM   (SELECT A.record_center_id
		              ,A.record_take_seq
		              ,A.folder_take_seq
		              ,A.title
		              ,A.creat_yyyy
		              ,A.error_flag
		              ,DECODE(A.error_flag,'Y','X','O') auto_check
		              ,NVL(A.exam_rslt_cd,'0') exam_rslt_cd
		              ,(SELECT C.com_cd_nm
		                FROM   TB_ZZCOMCD C
		                WHERE  C.com_type_cd = 'TK03'
		                AND    C.com_cd = NVL(A.exam_rslt_cd,'0')) exam_rslt_nm
		              ,A.exam_cont
		              ,(SELECT COUNT(1) FROM TB_TKATTACHFILE Z WHERE Z.record_center_id = A.record_center_id AND Z.record_take_seq = A.record_take_seq AND Z.virus_flag = '1') virus_cnt
		        FROM   TB_TKRECORD A
		        WHERE  A.record_center_id = #recordCenterId:VARCHAR#
		        AND    A.folder_take_seq = #folderTakeSeq:VARCHAR#)
		ORDER BY record_take_seq
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(일괄인수-인수처리할 철목록) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeFolderBatchList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeCheckFolderTakeFolderBatchList-result">
		SELECT record_center_id
		     , folder_take_seq
		     , take_yyyy
		     , creat_sys_cd
		     , take_org_cd
		     , take_sno
		FROM  (
			SELECT A.record_center_id
			     , A.folder_take_seq
			     , A.erecord_flag
				 , DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) auto_check
			     , NVL(A.exam_rslt_cd,'0') exam_rslt_cd
			     , NVL(A.rjct_flag,'0') rjct_flag
			     , NVL(A.take_fin_flag,'0') take_fin_flag
			     , DECODE(A.take_fin_flag,'1','4',DECODE(A.rjct_flag,'1','3',NVL(A.exam_rslt_cd,'0'))) status
			     , take_yyyy
			     , creat_sys_cd
			     , take_org_cd
			     , take_sno
			FROM  TB_TKFOLDER A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.take_yyyy = #takeYyyy:VARCHAR#
			AND   A.take_org_cd = #takeOrgCd:VARCHAR#
			AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND   A.take_sno IN (SELECT take_sno 
                                             FROM tb_tkorgtakeplan D 
                                             WHERE D.record_center_id = A.record_center_id
                                             AND D.take_yyyy          = A.take_yyyy     
                                             AND D.take_org_cd        = A.take_org_cd
                                             AND D.creat_sys_cd       = A.creat_sys_cd
                                             AND D.parent_take_sno    = (SELECT F.parent_take_sno 
                                                                         FROM tb_tkorgtakeplan F 
                                                                         WHERE F.record_center_id = D.record_center_id 
                                                                         AND F.take_yyyy = D.take_yyyy 
                                                                         AND F.take_org_cd = D.take_org_cd 
                                                                         AND F.creat_sys_cd = D.creat_sys_cd
                                                                         AND F.take_sno = #takeSno:NUMBER#))
			<isNotEmpty prepend="AND" property="erecordFlag">
				  A.erecord_flag = #erecordFlag:VARCHAR#
			</isNotEmpty>
			AND   A.exam_rslt_cd = '1'
			AND   (A.rjct_flag = '0' OR A.rjct_flag is null)
			AND   A.take_fin_flag = '0'
		)
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="autoCheck">
				  auto_check = #autoCheck:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="status">
				  status = #status:VARCHAR#
			</isNotEmpty>
		</dynamic>
		ORDER BY record_center_id, folder_take_seq
	</select>
	
	<select id="findUndTakeCheckFolderTakeFolderId" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="string">
		SELECT folder_id
		FROM  TB_RDFOLDER
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #folderTakeSeq:VARCHAR#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-1.기록물철) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeFolder" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDER
		(
		    record_center_id
		    , FOLDER_ID
		    , creat_sys_cd, clss_div_cd, clss_id, creat_yyyy, folder_reg_seq
			, ho_no, take_yyyy, TAKE_YYYY_SNO, clss_nm, org_title, title
			, sub_title, folder_type_div_cd, etc_folder_type, folder_detl_type_cd, creat_purps
			, media_format, medium, folder_size, record_tot_page_cnt, record_reg_cnt
			, efile_cnt, new_div_cd, chng_flag, old_folder_creat_org_nm, old_folder_clss_no
			, folder_bispjt_div_cd, bis_clss_path_nm, pjt_clss_path_nm, folder_start_dtime, folder_close_dtime
			, funsh_end_dtime, funsh_rsn
			, PRESV_TERM_CD, trans_dtime
			, presv_term_fix_rsn, presv_method_cd
			, presv_area_cd, presv_loc, presv_duty_chrgr_nm, secu_clss_cd, secu_clss_rsn
			, read_range, take_takovr_div_cd, take_takovr_org_cd, take_takovr_clss_id, take_takovr_creat_yyyy
			, take_takovr_folder_reg_seq, take_takovr_ho_no, take_takovr_ymd, creat_user_id, creat_user_nm
			, creat_user_org_cd, creat_user_org_nm, creat_user_pos_rank_nm, creat_dtime, erecord_flag
			, creat_sys_folder_id, virus_flag, virus_dtime, reg_dtime, transf_aprov_user_id
		    , transf_aprov_user_nm, transf_aprov_dtime, org_cd, read_cnt, oper_read_range_cd
		    , sumry, group_presv_term_cd, folder_take_seq, take_org_cd, cur_keep_org_cd
			, OPEN_DIV_CD, MIG_FLAG, FOLDER_KEEP_STATE_CD, EFILE_DEL_FLAG
			, EXPT_DISUSE_YYYY, EXPT_TRANSF_YYYY,PERIOD_FROM_DT, PERIOD_TO_DT
		)
		(
			SELECT A.record_center_id
			     , TO_CHAR(SYSDATE,'YYYY')||LPAD((TB_RDFOLDER_SQ01.nextval), 10, '0') folder_id
			     , A.creat_sys_cd, A.clss_div_cd, A.clss_id, A.creat_yyyy, A.folder_reg_seq
				 , A.ho_no, A.take_yyyy, A.take_sno, A.clss_nm, A.title, A.title
				 , A.sub_title, A.folder_type_div_cd, A.etc_folder_type, A.folder_detl_type_cd, A.creat_purps
				 , A.media_format, A.medium, A.folder_size, A.record_tot_page_cnt, A.record_reg_cnt
				 , A.efile_cnt, A.new_div_cd, A.chng_flag, A.old_folder_creat_org_nm, A.old_folder_clss_no
				 , A.folder_bispjt_div_cd, A.bis_clss_path_nm, A.pjt_clss_path_nm, A.folder_start_dtime, A.folder_close_dtime
				 , A.funsh_end_dtime, A.funsh_rsn
				 , DECODE(A.creat_sys_cd,'02',DECODE(A.presv_term_cd,'20','25',A.presv_term_cd),A.presv_term_cd) presv_term_cd, trans_dtime
				 , A.presv_term_fix_rsn, A.presv_method_cd
				 , A.presv_area_cd, A.presv_loc, A.presv_duty_chrgr_nm, A.secu_clss_cd, A.secu_clss_rsn
				 , A.read_range, A.take_takovr_div_cd, A.take_takovr_org_cd, A.take_takovr_clss_id, A.take_takovr_creat_yyyy
				 , A.take_takovr_folder_reg_seq, A.take_takovr_ho_no, A.take_takovr_ymd, A.creat_user_id, A.creat_user_nm
				 , A.creat_user_org_cd, A.creat_user_org_nm, A.creat_user_pos_rank_nm, A.creat_dtime, A.erecord_flag
				 <!--cubrid , A.creat_sys_folder_id, A.virus_flag, A.virus_dtime, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), A.transf_aprov_user_id-->
				 , A.creat_sys_folder_id, A.virus_flag, A.virus_dtime, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), A.transf_aprov_user_id
			     , A.transf_aprov_user_nm, A.transf_aprov_dtime, A.org_cd, A.read_cnt
				 , '01' oper_read_range_cd
			     , A.sumry, A.group_presv_term_cd, A.folder_take_seq, A.take_org_cd, A.take_org_cd
				 , '3' open_div_cd, '0' mig_flag, '01' folder_keep_state_cd, '0' efile_del_flag
				 , DECODE( GREATEST(TO_NUMBER(A.presv_term_cd),19), 19, (TO_NUMBER(DECODE(A.creat_sys_cd,'01',A.creat_yyyy,'04',A.creat_yyyy,NVL(SUBSTR(A.FOLDER_CLOSE_DTIME,0,4),A.CREAT_YYYY)))+1+TO_NUMBER(A.presv_term_cd)) ) expt_disuse_yyyy
				 , (CASE WHEN A.folder_type_div_cd = '3' OR A.folder_type_div_cd = '4'
				        THEN DECODE( LEAST(TO_NUMBER(A.presv_term_cd),20), 20, (TO_NUMBER(DECODE(A.creat_sys_cd,'01',A.creat_yyyy,'04',A.creat_yyyy,NVL(SUBSTR(A.FOLDER_CLOSE_DTIME,0,4),A.CREAT_YYYY)))+5) )
				        ELSE DECODE( LEAST(TO_NUMBER(A.presv_term_cd),20), 20, (TO_NUMBER(DECODE(A.creat_sys_cd,'01',A.creat_yyyy,'04',A.creat_yyyy,NVL(SUBSTR(A.FOLDER_CLOSE_DTIME,0,4),A.CREAT_YYYY)))+10) )
				        END
				  	) expt_transf_yyyy
				 , PERIOD_FROM_DT, PERIOD_TO_DT
			FROM TB_TKFOLDER A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-2.기록물철 관계정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeFolderRel" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERREL
		(
		    record_center_id, folder_id, rel_type_cd, rel_seq, rel_trgt_id
		    , rel_descr, reg_dtime
		)
		(
			SELECT B.record_center_id
			     , B.folder_id
			     , A.rel_type_cd
			     , A.rel_seq
			     , A.rel_trgt_id
			     , A.rel_descr
			     <!--cubrid , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
			     , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_TKFOLDERREL A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_take_seq = B.folder_take_seq
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-3.기록물철 생산내역) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeFolderCreat" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERCREAT
		(
		    record_center_id, folder_id, agent_sno, agent_type_cd, agent_id
			, agent_nm, agent_org_cd, agent_org_nm, agent_pos_rank_nm, duty_type_cd
			, duty_act_dtime, reg_dtime, opin
		)
		(
			SELECT B.record_center_id, B.folder_id, A.agent_sno, A.agent_type_cd, A.agent_id
				 , A.agent_nm, A.agent_org_cd, A.agent_org_nm, A.agent_pos_rank_nm, A.duty_type_cd
				 <!--cubrid, A.duty_act_dtime, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), A.opin-->
				 , A.duty_act_dtime, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), A.opin
			FROM TB_TKFOLDERCREAT A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_take_seq = B.folder_take_seq
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-4.기록물철 목적분류) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeFolderPjtClss" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERPJTCLSS
		(
		    record_center_id, folder_id, sno, pjt_clss_id
		)
		(
			SELECT B.record_center_id, B.folder_id, A.sno, A.pjt_clss_id
			FROM TB_TKFOLDERPJTCLSS A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_take_seq = B.folder_take_seq
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-5.기록물철 인수인계정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeFolderTaketakovr" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERTAKETAKOVR
		(
		    record_center_id, folder_id, sno, take_takovr_div_cd, take_takovr_creat_dtime
			, take_takovr_org_cd, take_takovr_org_nm, reg_dtime, take_takovr_clss_id, take_takovr_creat_yyyy
			, take_takovr_folder_id, take_takovr_folder_title, take_takovr_folder_reg_seq, take_takovr_ho_no
		)
		(
			SELECT B.record_center_id, B.folder_id, A.sno, A.take_takovr_div_cd, A.take_takovr_creat_dtime
				 <!--cubrid, A.take_takovr_org_cd, A.take_takovr_org_nm, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), A.take_takovr_clss_id, A.take_takovr_creat_yyyy-->
				 , A.take_takovr_org_cd, A.take_takovr_org_nm, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), A.take_takovr_clss_id, A.take_takovr_creat_yyyy
				 , A.take_takovr_folder_id, A.take_takovr_folder_title, A.take_takovr_folder_reg_seq, A.take_takovr_ho_no
			FROM TB_TKFOLDERTAKETAKOVR A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_take_seq = B.folder_take_seq
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-6.기록물철 변경이력정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeFolderChngHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERCHNGHIST
		(
		    record_center_id, folder_id, chng_hist_no, org_cd, clss_id
			, creat_yyyy, folder_reg_seq, ho_no, title_bef, title_aft
			, folder_type_div_cd_bef, folder_type_div_cd_aft, chng_ymd, chng_rsn, chng_user_nm
			, reg_dtime
		)
		(
			SELECT B.record_center_id, B.folder_id, A.chng_hist_no, A.org_cd, A.clss_id
				 , A.creat_yyyy, A.folder_reg_seq, A.ho_no, A.title_bef, A.title_aft
				 , A.folder_type_div_cd_bef, A.folder_type_div_cd_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm
				 <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
				 , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_TKFOLDERCHNGHIST A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_take_seq = B.folder_take_seq
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-7-1.기록물철 특수목록) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeFolderSpclList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeCheckFolderTakeFolderSpclList-result">
		SELECT record_center_id
		     , folder_take_seq
		     , seq
		     , spcl_list1
		     , spcl_list2
		     , spcl_list3
		FROM  TB_TKSPCLLIST
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #folderTakeSeq:VARCHAR#
		AND   spcl_list_loc = '1'
		ORDER BY record_center_id, folder_take_seq, seq
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-7-2.기록물철 특수목록) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeFolderSpclList" parameterClass="rms.take.undTake.domain.TkSpclList">
		INSERT INTO TB_RDFOLDERKEYWD
		(
		    record_center_id, folder_id, keywd_levl, keywd, reg_dtime
		)
		(
			SELECT record_center_id
			     , folder_id
			     , '1'
			     , #spclList1:VARCHAR#
			     <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
			     , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM  TB_RDFOLDER
			WHERE record_center_id = #recordCenterId:VARCHAR#
			AND   folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-8.기록물건) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeRecord" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORD
		(
			record_center_id
			, record_id
			, folder_id
			, take_yyyy, take_yyyy_sno, clss_div_cd, clss_id, clss_nm
			, creat_sys_cd, org_cd, creat_yyyy, creat_reg_dtime
			, creat_reg_no
			, dtch_reg_no, org_title, title, sub_title, record_reg_div_cd, record_detl_type_cd
			, record_sumry, audvis_record_type, audvis_record_sumry, media_format, medium
			, record_size, attach_cnt, record_page_cnt, aprov_pos_rank_nm, duty_chrgr_nm
			, enforc_ymd, creat_org_reg_no, erecord_flag, old_record_creat_org_nm, old_record_docno
			, old_record_presv_term, presv_loc, secu_clss_cd, secu_clss_rsn, read_range
			, open_div_cd, open_grade, part_open_rsn, open_limit_date, open_limit_part, open_expt_dtime
			, recver, sender, chng_ver_no, doc_distr_no, folder_clss_no
			, spcl_record_type, orign_copy_flag, new_div_cd, chng_flag, rjct_flag
			, doc_no, doc_no_org_nm, creat_user_id, creat_user_org_cd, creat_user_org_nm, creat_user_pos_rank_nm
			, creat_dtime, creat_sys_record_id, reg_dtime, record_take_seq
			, oper_read_range_cd
			, MIG_FLAG, enforc_docno, lang, record_sno
			, secret_clss, secret_term, prod_type_cd, close_type_cd, distribute_no
			, distribute_dt, recall_type_cd, record_clss_cd, transf_neo_trans_state, nonelect_reg_dtime
			, bms_record_detl_type_cd, bms_record_detl_sort_cd
		)
		(
			SELECT record_center_id
				, TO_CHAR(SYSDATE,'YYYY')||LPAD((TB_RDRECORD_SQ01.nextval), 10, '0') record_id
				, folder_id
				, take_yyyy, take_yyyy_sno, clss_div_cd, clss_id, clss_nm
				, creat_sys_cd, org_cd, creat_yyyy, creat_reg_dtime
				, creat_reg_no
				, dtch_reg_no, org_title, title, sub_title, record_reg_div_cd, record_detl_type_cd
				, record_sumry, audvis_record_type, audvis_record_sumry, media_format, medium
				, record_size, attach_cnt, record_page_cnt, aprov_pos_rank_nm, duty_chrgr_nm
				, enforc_ymd, creat_org_reg_no, erecord_flag, old_record_creat_org_nm, old_record_docno
				, old_record_presv_term, presv_loc, NVL(secu_clss_cd,'01'), secu_clss_rsn, read_range
				, open_div_cd, open_grade, part_open_rsn, open_limit_date, open_limit_part, open_expt_dtime
				, recver, sender, chng_ver_no, doc_distr_no, folder_clss_no
				, spcl_record_type, orign_copy_flag, new_div_cd, chng_flag, rjct_flag
				, doc_no, doc_no_org_nm, creat_user_id, creat_user_org_cd, creat_user_org_nm, creat_user_pos_rank_nm
				<!--cubrid, creat_dtime, creat_sys_record_id, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), record_take_seq-->
				, creat_dtime, creat_sys_record_id, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), record_take_seq
				, oper_read_range_cd
				, mig_flag, enforc_docno, lang, record_sno
				, secret_clss, secret_term, prod_type_cd, close_type_cd, distribute_no
				, distribute_dt, recall_type_cd, record_clss_cd, transf_neo_trans_state, nonelect_reg_dtime
				, bms_record_detl_type_cd, bms_record_detl_sort_cd
			FROM 
			(
				(
					SELECT record_center_id
						, folder_id
						, take_yyyy, take_yyyy_sno, clss_div_cd, clss_id, clss_nm
						, creat_sys_cd, org_cd, creat_yyyy, creat_reg_dtime
						, LPAD(max_no+row_no,13,'0') creat_reg_no
						, dtch_reg_no, org_title, title, sub_title, record_reg_div_cd, record_detl_type_cd
						, record_sumry, audvis_record_type, audvis_record_sumry, media_format, medium
						, record_size, attach_cnt, record_page_cnt, aprov_pos_rank_nm, duty_chrgr_nm
						, enforc_ymd, creat_org_reg_no, erecord_flag, old_record_creat_org_nm, old_record_docno
						, old_record_presv_term, presv_loc, secu_clss_cd, secu_clss_rsn, read_range
						, open_div_cd, open_grade, part_open_rsn, open_limit_date, open_limit_part, open_expt_dtime
						, recver, sender, chng_ver_no, doc_distr_no, folder_clss_no
						, spcl_record_type, orign_copy_flag, new_div_cd, chng_flag, rjct_flag
						, doc_no, doc_no_org_nm, creat_user_id, creat_user_org_cd, creat_user_org_nm, creat_user_pos_rank_nm
						, creat_dtime, creat_sys_record_id, record_take_seq
						, oper_read_range_cd
						, mig_flag, enforc_docno, lang, record_sno
						, secret_clss, secret_term, prod_type_cd, close_type_cd, distribute_no
						, distribute_dt, recall_type_cd, record_clss_cd, transf_neo_trans_state, nonelect_reg_dtime
						, bms_record_detl_type_cd, bms_record_detl_sort_cd
					FROM (
						SELECT B.record_center_id
							 , B.folder_id
							 , B.take_yyyy, B.take_yyyy_sno, B.clss_div_cd, B.clss_id, B.clss_nm
							 , A.creat_sys_cd, A.org_cd, A.creat_yyyy, A.creat_reg_dtime
							 , NVL((SELECT MAX(TO_NUMBER(NVL(C.creat_reg_no,0))) 
								    FROM TB_RDRECORD C
									WHERE C.record_center_id = A.record_center_id
									AND   C.creat_sys_cd = A.creat_sys_cd
									AND   C.org_cd = A.org_cd
									AND   C.creat_yyyy = A.creat_yyyy),0) max_no
							 , ROW_NUMBER() OVER (PARTITION BY A.record_center_id, A.creat_yyyy, A.org_cd, A.creat_sys_cd ORDER BY A.creat_reg_no) row_no
							 , A.dtch_reg_no, A.title AS org_title, A.title, A.sub_title, A.record_reg_div_cd, A.record_detl_type_cd
							 , A.record_sumry, A.audvis_record_type, A.audvis_record_sumry, A.media_format, A.medium
							 , A.record_size, A.attach_cnt, A.record_page_cnt, A.aprov_pos_rank_nm, A.duty_chrgr_nm
							 , A.enforc_ymd, A.creat_org_reg_no, A.erecord_flag, A.old_record_creat_org_nm, A.old_record_docno
							 , A.old_record_presv_term, A.presv_loc, A.secu_clss_cd, A.secu_clss_rsn, A.read_range
							 , A.open_div_cd, A.open_grade, A.part_open_rsn, A.open_limit_date, A.open_limit_part, A.open_expt_dtime
							 , A.recver, A.sender, A.chng_ver_no, A.doc_distr_no, A.folder_clss_no
							 , A.spcl_record_type, A.orign_copy_flag, A.new_div_cd, A.chng_flag, A.rjct_flag
							 , A.doc_no, A.doc_no_org_nm, A.creat_user_id, A.creat_user_org_cd, A.creat_user_org_nm, A.creat_user_pos_rank_nm
							 , A.creat_dtime, A.creat_sys_record_id, A.record_take_seq
							 , DECODE(A.record_detl_type_cd, '01', DECODE(A.read_range,'0','03','1','01'
							                                                          , DECODE((SELECT COUNT(1) FROM TB_STORG WHERE record_center_id=A.record_center_id AND upper_org_cd=A.read_range)
												                                               ,0,'02','01'))
												                 , '02') oper_read_range_cd
							 , '0' mig_flag, A.enforc_docno, A.lang, A.record_sno
							 , A.secret_clss, A.secret_term, '' prod_type_cd, ''  close_type_cd, '' distribute_no
						     , '' distribute_dt, '' recall_type_cd, A.record_clss_cd, '0' transf_neo_trans_state, A.nonelect_reg_dtime
						     , '' as bms_record_detl_type_cd, '' as bms_record_detl_sort_cd
						FROM TB_TKRECORD A
						   , TB_RDFOLDER B
						WHERE A.record_center_id = B.record_center_id
						AND   A.folder_take_seq = B.folder_take_seq
						AND   B.record_center_id = #recordCenterId:VARCHAR#
						AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
						AND   B.mig_flag = '0'
						AND   A.creat_sys_cd = '01'
						ORDER BY A.record_center_id, A.creat_sys_cd, A.org_cd, A.creat_yyyy, A.creat_reg_dtime, A.creat_reg_no, A.record_take_seq
					)
				)
				UNION ALL
				(
					SELECT *
					FROM (
						SELECT B.record_center_id
							 , B.folder_id
							 , B.take_yyyy, B.take_yyyy_sno, B.clss_div_cd, B.clss_id, B.clss_nm
							 , A.creat_sys_cd, A.org_cd, A.creat_yyyy, A.creat_reg_dtime
							 , A.creat_reg_no
							 , A.dtch_reg_no, A.title AS org_title, A.title, A.sub_title, A.record_reg_div_cd, A.record_detl_type_cd
							 , A.record_sumry, A.audvis_record_type, A.audvis_record_sumry, A.media_format, A.medium
							 , A.record_size, A.attach_cnt, A.record_page_cnt, A.aprov_pos_rank_nm, A.duty_chrgr_nm
							 , A.enforc_ymd, A.creat_org_reg_no, A.erecord_flag, A.old_record_creat_org_nm, A.old_record_docno
							 , A.old_record_presv_term, A.presv_loc, A.secu_clss_cd, A.secu_clss_rsn, A.read_range
							 , A.open_div_cd, A.open_grade, A.part_open_rsn, A.open_limit_date, A.open_limit_part, A.open_expt_dtime
							 , A.recver, A.sender, A.chng_ver_no, A.doc_distr_no, A.folder_clss_no
							 , A.spcl_record_type, A.orign_copy_flag, A.new_div_cd, A.chng_flag, A.rjct_flag
							 , A.doc_no, A.doc_no_org_nm, A.creat_user_id, A.creat_user_org_cd, A.creat_user_org_nm, A.creat_user_pos_rank_nm
							 , A.creat_dtime, A.creat_sys_record_id, A.record_take_seq
							 , '02' oper_read_range_cd
							 , '0' mig_flag, A.enforc_docno, A.lang, A.record_sno
							 , A.secret_clss, A.secret_term, A.prod_type_cd, ''  close_type_cd, '' distribute_no
							     , '' distribute_dt, '' recall_type_cd, A.record_clss_cd, '0' transf_neo_trans_state, nonelect_reg_dtime
							 , '' as bms_record_detl_type_cd, '' as bms_record_detl_sort_cd
						FROM TB_TKRECORD A
						   , TB_RDFOLDER B
						WHERE A.record_center_id = B.record_center_id
						AND   A.folder_take_seq = B.folder_take_seq
						AND   B.record_center_id = #recordCenterId:VARCHAR#
						AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
						AND   B.mig_flag = '0'
						AND   A.creat_sys_cd = '02'
						ORDER BY A.record_center_id, A.creat_sys_cd, A.org_cd, A.creat_yyyy, A.creat_reg_no, A.dtch_reg_no
					)
				)
				UNION ALL
				(
					SELECT record_center_id
						, folder_id
						, take_yyyy, take_yyyy_sno, clss_div_cd, clss_id, clss_nm
						, creat_sys_cd, org_cd, creat_yyyy, creat_reg_dtime
						, LPAD(max_no+row_no,13,'0') creat_reg_no
						, dtch_reg_no, org_title, title, sub_title, record_reg_div_cd, record_detl_type_cd
						, record_sumry, audvis_record_type, audvis_record_sumry, media_format, medium
						, record_size, attach_cnt, record_page_cnt, aprov_pos_rank_nm, duty_chrgr_nm
						, enforc_ymd, creat_org_reg_no, erecord_flag, old_record_creat_org_nm, old_record_docno
						, old_record_presv_term, presv_loc, secu_clss_cd, secu_clss_rsn, read_range
						, open_div_cd, open_grade, part_open_rsn, open_limit_date, open_limit_part, open_expt_dtime
						, recver, sender, chng_ver_no, doc_distr_no, folder_clss_no
						, spcl_record_type, orign_copy_flag, new_div_cd, chng_flag, rjct_flag
						, doc_no, doc_no_org_nm, creat_user_id, creat_user_org_cd, creat_user_org_nm, creat_user_pos_rank_nm
						, creat_dtime, creat_sys_record_id, record_take_seq
						, oper_read_range_cd
						, mig_flag, enforc_docno, lang, record_sno
						, secret_clss, secret_term, '' prod_type_cd, ''  close_type_cd, '' distribute_no
						     , '' distribute_dt, '' recall_type_cd, record_clss_cd, transf_neo_trans_state, nonelect_reg_dtime
						, '' as bms_record_detl_type_cd, '' as bms_record_detl_sort_cd
					FROM (
						SELECT B.record_center_id
							 , B.folder_id
							 , B.take_yyyy, B.take_yyyy_sno, B.clss_div_cd, B.clss_id, B.clss_nm
							 , A.creat_sys_cd, A.org_cd, A.creat_yyyy, A.creat_reg_dtime
							 , NVL((SELECT MAX(TO_NUMBER(NVL(C.creat_reg_no,0))) 
								    FROM TB_RDRECORD C
									WHERE C.record_center_id = A.record_center_id
									AND   C.creat_sys_cd = A.creat_sys_cd
									AND   C.org_cd = A.org_cd
									AND   C.creat_yyyy = A.creat_yyyy),0) max_no
							 , ROW_NUMBER() OVER (PARTITION BY A.record_center_id, A.creat_yyyy, A.org_cd, A.creat_sys_cd ORDER BY A.record_center_id, A.creat_reg_dtime, A.creat_reg_no, A.record_take_seq) row_no
							 , A.dtch_reg_no, A.title AS org_title, A.title, A.sub_title, A.record_reg_div_cd, A.record_detl_type_cd
							 , A.record_sumry, A.audvis_record_type, A.audvis_record_sumry, A.media_format, A.medium
							 , A.record_size, A.attach_cnt, A.record_page_cnt, A.aprov_pos_rank_nm, A.duty_chrgr_nm
							 , A.enforc_ymd, A.creat_org_reg_no, A.erecord_flag, A.old_record_creat_org_nm, A.old_record_docno
							 , A.old_record_presv_term, A.presv_loc, A.secu_clss_cd, A.secu_clss_rsn, A.read_range
							 , A.open_div_cd, A.open_grade, A.part_open_rsn, A.open_limit_date, A.open_limit_part, A.open_expt_dtime
							 , A.recver, A.sender, A.chng_ver_no, A.doc_distr_no, A.folder_clss_no
							 , A.spcl_record_type, A.orign_copy_flag, A.new_div_cd, A.chng_flag, A.rjct_flag
							 , A.doc_no, A.doc_no_org_nm, A.creat_user_id, A.creat_user_org_cd, A.creat_user_org_nm, A.creat_user_pos_rank_nm
							 , A.creat_dtime, A.creat_sys_record_id, A.record_take_seq
							 , A.oper_read_range_cd
							 , '0' mig_flag, A.enforc_docno, A.lang, A.record_sno
							 , A.secret_clss, A.secret_term, '' prod_type_cd, ''  close_type_cd, '' distribute_no
						     , '' distribute_dt, '' recall_type_cd, A.record_clss_cd, '0' transf_neo_trans_state, nonelect_reg_dtime
						FROM TB_TKRECORD A
						   , TB_RDFOLDER B
						WHERE A.record_center_id = B.record_center_id
						AND   A.folder_take_seq = B.folder_take_seq
						AND   B.record_center_id = #recordCenterId:VARCHAR#
						AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
						AND   B.mig_flag = '0'
						AND   A.creat_sys_cd = '03'
						ORDER BY A.record_center_id, A.creat_reg_dtime, A.creat_reg_no, A.record_take_seq
					)
					UNION ALL
					(
					SELECT record_center_id
						, folder_id
						, take_yyyy, take_yyyy_sno, clss_div_cd, clss_id, clss_nm
						, creat_sys_cd, org_cd, creat_yyyy, creat_reg_dtime
						, creat_reg_no
						, dtch_reg_no, org_title, title, sub_title, record_reg_div_cd, record_detl_type_cd
						, record_sumry, audvis_record_type, audvis_record_sumry, media_format, medium
						, record_size, attach_cnt, record_page_cnt, aprov_pos_rank_nm, duty_chrgr_nm
						, enforc_ymd, creat_org_reg_no, erecord_flag, old_record_creat_org_nm, old_record_docno
						, old_record_presv_term, presv_loc, secu_clss_cd, secu_clss_rsn, read_range
						, open_div_cd, open_grade, part_open_rsn, open_limit_date, open_limit_part, open_expt_dtime
						, recver, sender, chng_ver_no, doc_distr_no, folder_clss_no
						, spcl_record_type, orign_copy_flag, new_div_cd, chng_flag, rjct_flag
						, doc_no, doc_no_org_nm, creat_user_id, creat_user_org_cd, creat_user_org_nm, creat_user_pos_rank_nm
						, creat_dtime, creat_sys_record_id, record_take_seq
						, oper_read_range_cd
						, mig_flag, enforc_docno, lang, record_sno
						, secret_clss, secret_term, prod_type_cd, close_type_cd, distribute_no
						, distribute_dt, recall_type_cd, record_clss_cd, transf_neo_trans_state, nonelect_reg_dtime
						, bms_record_detl_type_cd, bms_record_detl_sort_cd
					FROM (
						SELECT B.record_center_id
							 , B.folder_id
							 , B.take_yyyy, B.take_yyyy_sno, B.clss_div_cd, B.clss_id, B.clss_nm
							 , A.creat_sys_cd, A.org_cd, A.creat_yyyy, A.creat_reg_dtime
							 , A.creat_reg_no
							 , A.dtch_reg_no, A.title AS org_title, A.title, A.sub_title, A.record_reg_div_cd, A.record_detl_type_cd
							 , A.record_sumry, A.audvis_record_type, A.audvis_record_sumry, A.media_format, A.medium
							 , A.record_size, A.attach_cnt, A.record_page_cnt, A.aprov_pos_rank_nm, A.duty_chrgr_nm
							 , A.enforc_ymd, A.creat_org_reg_no, A.erecord_flag, A.old_record_creat_org_nm, A.old_record_docno
							 , A.old_record_presv_term, A.presv_loc, A.secu_clss_cd, A.secu_clss_rsn, A.read_range
							 , A.open_div_cd, A.open_grade, A.part_open_rsn, A.open_limit_date, A.open_limit_part, A.open_expt_dtime
							 , A.recver, A.sender, A.chng_ver_no, A.doc_distr_no, A.folder_clss_no
							 , A.spcl_record_type, A.orign_copy_flag, A.new_div_cd, A.chng_flag, A.rjct_flag
							 , A.doc_no, A.doc_no_org_nm, A.creat_user_id, A.creat_user_org_cd, A.creat_user_org_nm, A.creat_user_pos_rank_nm
							 , A.creat_dtime, A.creat_sys_record_id, A.record_take_seq
							 , DECODE(A.record_detl_type_cd, '01', DECODE(A.read_range,'0','03','1','01'
							                                                          , DECODE((SELECT COUNT(1) FROM TB_STORG WHERE record_center_id=A.record_center_id AND upper_org_cd=A.read_range)
												                                               ,0,'02','01'))
												                 , '02') oper_read_range_cd
							 , '0' mig_flag, A.enforc_docno, A.lang, A.record_sno
							 , A.secret_clss, A.secret_term, A.prod_type_cd, A.close_type_cd, A.distribute_no
						     , A.distribute_dt, A.recall_type_cd, A.record_clss_cd, '0' transf_neo_trans_state, nonelect_reg_dtime
						     , A.bms_record_detl_type_cd, A.bms_record_detl_sort_cd
						FROM TB_TKRECORD A
						   , TB_RDFOLDER B
						WHERE A.record_center_id = B.record_center_id
						AND   A.folder_take_seq = B.folder_take_seq
						AND   B.record_center_id = #recordCenterId:VARCHAR#
						AND   B.folder_take_seq = #folderTakeSeq:VARCHAR#
						AND   B.mig_flag = '0'
						AND   A.creat_sys_cd = '04'
						ORDER BY A.record_center_id, A.creat_sys_cd, A.org_cd, A.creat_yyyy, A.creat_reg_dtime, A.creat_reg_no, A.record_take_seq
					)
				)
				)
			)
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-9.기록물건 관계정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeRecordRel" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDREL
		(
			record_center_id, record_id, rel_type_cd, rel_seq, rel_trgt_id
			, rel_descr, reg_dtime
		)
		(
			SELECT B.record_center_id, B.record_id, A.rel_type_cd, A.rel_seq, A.rel_trgt_id
				 <!--cubrid select, A.rel_descr, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
				 , A.rel_descr, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_TKRECORDREL A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_take_seq = B.record_take_seq
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-10.기록물건 생산내역) (INSERT)
	 
	<insert id="createUndTakeCheckFolderTakeRecordCreat" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDCREAT
		(
			record_center_id, record_id, agent_sno, agent_type_cd, agent_id
			, agent_nm, agent_org_cd, agent_org_nm, agent_pos_rank_nm, req_state_val
			, duty_type_cd, duty_act_dtime, opin, opin_dtime, handl_rslt, reg_dtime
			, take_mng_no, req_person_opin, send_orgn_nm, send_dept_nm, agent_duty_type_cd
			
		)
		(
			SELECT B.record_center_id, B.record_id, A.agent_sno, A.agent_type_cd, A.agent_id
				 , A.agent_nm, A.agent_org_cd, A.agent_org_nm, A.agent_pos_rank_nm, A.req_state_val
				 , A.duty_type_cd, A.duty_act_dtime, A.opin, A.opin_dtime, A.handl_rslt, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
				 , A.take_mng_no, A.req_person_opin, A.send_org_nm, A.send_dept_nm, A.agent_duty_type_cd
			FROM TB_TKRECORDCREAT A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_take_seq = B.record_take_seq
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>
	-->
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-10.기록물건 생산내역) (INSERT)
		경찰청 인수 속도 개선 2014.06.23 이옥찬
	 -->
	<insert id="createUndTakeCheckFolderTakeRecordCreat" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDCREAT
		(
			record_center_id, record_id, agent_sno, agent_type_cd, agent_id
			, agent_nm, agent_org_cd, agent_org_nm, agent_pos_rank_nm, req_state_val
			, duty_type_cd, duty_act_dtime, opin, opin_dtime, handl_rslt, reg_dtime
			, take_mng_no, req_person_opin, send_orgn_nm, send_dept_nm, agent_duty_type_cd
			
		)
		(
			SELECT B.RECORD_CENTER_ID, B.RECORD_ID, C.AGENT_SNO, C.AGENT_TYPE_CD, C.AGENT_ID
			     , C.AGENT_NM, C.AGENT_ORG_CD, C.AGENT_ORG_NM, C.AGENT_POS_RANK_NM, C.REQ_STATE_VAL
			     <!--cubrid select , C.DUTY_TYPE_CD, C.DUTY_ACT_DTIME, C.OPIN, C.OPIN_DTIME, C.HANDL_RSLT, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
			     , C.DUTY_TYPE_CD, C.DUTY_ACT_DTIME, C.OPIN, C.OPIN_DTIME, C.HANDL_RSLT, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			     , C.TAKE_MNG_NO, C.REQ_PERSON_OPIN, C.SEND_ORG_NM, C.SEND_DEPT_NM, C.AGENT_DUTY_TYPE_CD
			  FROM TB_RDFOLDER A,
			       TB_RDRECORD B,
			       TB_TKRECORDCREAT C
			 WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
			   AND A.FOLDER_ID = B.FOLDER_ID
			   AND B.RECORD_CENTER_ID = C.RECORD_CENTER_ID
			   AND B.RECORD_TAKE_SEQ = C.RECORD_TAKE_SEQ
			   AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
			   AND A.FOLDER_TAKE_SEQ = #folderTakeSeq:VARCHAR#
			   AND A.MIG_FLAG = '0'
			   AND B.MIG_FLAG = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-11.기록물건 정보출처) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeRecordInfoSrc" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDINFOSRC
		(
			record_center_id, record_id, info_src_type_cd, info_src_sno, info_src_title
			, info_src_id, reg_dtime
		)
		(
			SELECT B.record_center_id, B.record_id, A.info_src_type_cd, A.info_src_sno, A.info_src_title
				 <!--cubrid select , A.info_src_id, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
				 , A.info_src_id, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_TKRECORDINFOSRC A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_take_seq = B.record_take_seq
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-12.기록물건 변경이력정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeRecordChngHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDCHNGHIST
		(
			record_center_id, record_id, chng_hist_no, org_cd, creat_yyyy
			, creat_reg_no, dtch_reg_no, creat_reg_ymd_bef, creat_reg_ymd_aft, title_bef
			, title_aft, page_cnt_bef, page_cnt_aft, aprov_pos_rank_bef, aprov_pos_rank_aft
			, duty_chrgr_bef, duty_chrgr_aft, enforc_ymd_bef, enforc_ymd_aft, recver_bef
			, recver_aft, chng_ymd, chng_rsn, chng_user_nm, reg_dtime
		)
		(
			SELECT B.record_center_id, B.record_id, A.chng_hist_no, A.org_cd, A.creat_yyyy
				 , A.creat_reg_no, A.dtch_reg_no, A.creat_reg_ymd_bef, A.creat_reg_ymd_aft, A.title_bef
				 , A.title_aft, A.page_cnt_bef, A.page_cnt_aft, A.aprov_pos_rank_bef, A.aprov_pos_rank_aft
				 , A.duty_chrgr_bef, A.duty_chrgr_aft, A.enforc_ymd_bef, A.enforc_ymd_aft, A.recver_bef
				 <!--cubrid insert, A.recver_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
				 , A.recver_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_TKRECORDCHNGHIST A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_take_seq = B.record_take_seq
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-13.기록물건 수정이력정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeRecordOpenHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDOPENHIST
		(
			RECORD_CENTER_ID, RECORD_ID, CHNG_HIST_NO, OPEN_DIV_CD, OPEN_LIMIT_PART
			, PART_OPEN_RSN, OPEN_LIMIT_DATE, CHNG_DTIME, CHNG_RSN, CHNG_USER_NM
		)
		(
			SELECT B.RECORD_CENTER_ID, B.RECORD_ID, A.CHNG_HIST_NO, A.OPEN_DIV_CD, A.OPEN_LIMIT_PART
				 , A.PART_OPEN_RSN, A.OPEN_LIMIT_DATE, A.CHNG_DTIME, A.CHNG_RSN, A.CHNG_USER_NM
			FROM TB_TKRECORDOPENHIST A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_take_seq = B.record_take_seq
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-13-2.기록물건 특수목록 등록 키워드 조회) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeRecordSpclList" parameterClass="rms.take.undTake.domain.UndTakeRecord" resultMap="undTakeCheckFolderTakeRecordSpclList-result">
		SELECT record_center_id
		     , record_take_seq
		     , seq
		     , spcl_list1
		     , spcl_list2
		     , spcl_list3
		FROM  TB_TKSPCLLIST
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   record_take_seq = #recordTakeSeq:VARCHAR#
		AND   spcl_list_loc = '2'
		ORDER BY record_center_id, record_take_seq, seq
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-13-3.기록물건 특수목록) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeRecordSpclList" parameterClass="rms.take.undTake.domain.TkSpclList">
		INSERT INTO TB_RDRECORDKEYWD
		(
		    record_center_id, record_id, keywd_levl, keywd, reg_dtime
		)
		(
			SELECT record_center_id
			     , record_id
			     , '1'
			     , #spclList1:VARCHAR#
			     <!--cubrid insert, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
			     , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_RDRECORD
			WHERE record_center_id = #recordCenterId:VARCHAR#
			AND   record_take_seq = #recordTakeSeq:VARCHAR#
			AND   mig_flag = '0'
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-14.원문엔진 등록할 기록물건목록 조회) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeRecordList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeCheckFolderTakeRecordList-result">
		SELECT B.record_center_id
			 , B.record_id
		     , B.erecord_flag
		     , B.record_take_seq
		FROM TB_RDFOLDER A
		   , TB_RDRECORD B
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
		AND   A.record_center_id = B.record_center_id
		AND   A.folder_id = B.folder_id
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-15.원문엔진 등록할 파일목록 조회) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeAttachList" parameterClass="rms.take.undTake.domain.UndTakeRecord" resultMap="undTakeCheckFolderTakeAttachList-result">
		SELECT B.doc_type_cd
			 , B.attach_file_path
			 , B.file_nm
			 , B.agent_nm
			 , B.ver
			 , NVL(B.attach_file_page_cnt,0) attach_file_page_cnt
			 , NVL(B.file_size,0) file_size
			 , B.attach_file_mng_info
			 , B.virus_flag
		FROM TB_RDRECORD A
		   , TB_TKATTACHFILE B
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		AND   A.record_id = #recordId:VARCHAR#
		AND   A.record_center_id = B.record_center_id
		AND   A.record_take_seq = B.record_take_seq
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-16.기록물건 원문ID 갱신) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderTakeRecordOrign" parameterClass="rms.take.undTake.domain.UndTakeRecord">
		UPDATE TB_RDRECORD
		SET   orign_id = #orignId:VARCHAR#
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   record_id = #recordId:VARCHAR#
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-17.기록물건 인수완료) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderTakeRecordFin" parameterClass="rms.take.undTake.domain.UndTakeRecord">
		UPDATE TB_TKRECORD
		SET   take_fin_flag = '1'
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   record_take_seq = #recordTakeSeq:VARCHAR#
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-18.기록물철 인수완료) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderTakeFolderFin" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKFOLDER
		SET   take_fin_flag = '1'
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #folderTakeSeq:VARCHAR#
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-기록물철 생산시스템 구분 확인) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderCreatSysCd" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="string">
		SELECT creat_sys_cd
		FROM  TB_TKFOLDER
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #folderTakeSeq:VARCHAR#
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-19.생산현황등록-생산현황보고접수) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatReport" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRREPORT
		(
		    record_center_id, cr_report_yyyy, cr_report_org_cd, creat_sys_cd, cr_report_sno
		    , state_div_cd, reg_dtime
		)
		(
		   SELECT A.record_center_id
			    , A.take_yyyy
			    , A.take_org_cd
			    , A.creat_sys_cd
			    , NVL(MAX((SELECT C.cr_report_sno 
			               FROM TB_CRREPORT C 
			               WHERE C.record_center_id = A.record_center_id 
			               AND C.cr_report_yyyy = A.take_yyyy 
			               AND C.cr_report_org_cd = A.take_org_cd 
			               AND C.creat_sys_cd = A.creat_sys_cd 
			               )), 0) + 1 as cr_report_sno
			    , DECODE(A.creat_sys_cd,'03','08','06') as creat_sys_cd
			    <!--cubrid insert, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') as reg_dtime-->
			    , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS') as reg_dtime
			FROM  TB_RDFOLDER A 
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND NOT EXISTS (
			    SELECT folder_take_seq 
			    FROM TB_CRREPORT B 
			    WHERE B.record_center_id = A.record_center_id
			    AND   B.cr_report_yyyy = A.take_yyyy
			    AND   B.cr_report_org_cd = A.take_org_cd
			    AND   B.creat_sys_cd = A.creat_sys_cd
			    AND   B.cr_report_infrm_flag = '0'
			)
			GROUP BY A.record_center_id, A.take_yyyy, a.take_org_cd, a.creat_sys_cd, a.take_yyyy_sno, a.creat_sys_cd
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-20.생산현황등록-생산현황보고 기록물철) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatFolder" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		<selectKey resultClass="string" keyProperty="takeSno">
			SELECT (SELECT MAX(B.cr_report_sno) 
					FROM TB_CRREPORT B 
					WHERE B.record_center_id = A.record_center_id 
					AND B.cr_report_yyyy 	 = A.take_yyyy 
					AND B.cr_report_org_cd 	 = A.take_org_cd 
					AND B.creat_sys_cd 		 = A.creat_sys_cd 
					AND cr_report_infrm_flag = '0') AS "takeSno" 
			FROM  TB_RDFOLDER a 
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
		</selectKey>
		INSERT INTO TB_CRFOLDER
		(
		    record_center_id, folder_recv_seq, org_cd, cr_report_yyyy, cr_report_org_cd
		    , creat_sys_cd, cr_report_sno, clss_div_cd, clss_id, creat_yyyy
		    , folder_reg_seq, ho_no, clss_nm, title, sub_title
		    , folder_type_div_cd, etc_folder_type, folder_detl_type_cd, creat_purps, media_format
		    , medium, folder_size, record_tot_page_cnt, record_reg_cnt, efile_cnt
		    , new_div_cd, chng_flag, old_folder_creat_org_nm, old_folder_clss_no, folder_bispjt_div_cd
		    , bis_clss_path_nm, pjt_clss_path_nm, folder_start_dtime, folder_close_dtime, funsh_end_dtime
		    , funsh_rsn, presv_term_cd, presv_term_fix_rsn, presv_method_cd, presv_area_cd
		    , presv_loc, presv_duty_chrgr_nm, secu_clss_cd, secu_clss_rsn, read_range
		    , take_takovr_div_cd, take_takovr_org_cd, take_takovr_clss_id, take_takovr_creat_yyyy, take_takovr_folder_reg_seq
		    , take_takovr_ho_no, take_takovr_ymd, creat_user_id, creat_user_nm, creat_user_org_cd
		    , creat_user_org_nm, creat_user_pos_rank_nm, creat_dtime, erecord_flag, creat_sys_folder_id
		    , error_flag, exam_rslt_cd, exam_cont, rjct_flag, rjct_cont
		    , take_fin_flag, cr_report_infrm_flag, reg_dtime, group_presv_term_cd, folder_take_seq
		    , sumry, trans_dtime
		)
		(
		    SELECT record_center_id
		        , TO_CHAR(SYSDATE,'YYYY')||LPAD((TB_CRFOLDER_SQ01.nextval), 15, '0')
		        , org_cd, take_yyyy, take_org_cd
		        , creat_sys_cd, #takeSno:NUMBER#, clss_div_cd, clss_id, creat_yyyy
		        , folder_reg_seq, ho_no, clss_nm, title, sub_title
		        , folder_type_div_cd, etc_folder_type, folder_detl_type_cd, creat_purps, media_format
		        , medium, folder_size, record_tot_page_cnt, record_reg_cnt, efile_cnt
		        , new_div_cd, chng_flag, old_folder_creat_org_nm, old_folder_clss_no, folder_bispjt_div_cd
		        , bis_clss_path_nm, pjt_clss_path_nm, folder_start_dtime, folder_close_dtime, funsh_end_dtime
		        , funsh_rsn, presv_term_cd, presv_term_fix_rsn, presv_method_cd, presv_area_cd
		        , presv_loc, presv_duty_chrgr_nm, secu_clss_cd, secu_clss_rsn, read_range
		        , take_takovr_div_cd, take_takovr_org_cd, take_takovr_clss_id, take_takovr_creat_yyyy, take_takovr_folder_reg_seq
		        , take_takovr_ho_no, take_takovr_ymd, creat_user_id, creat_user_nm, creat_user_org_cd
		        , creat_user_org_nm, creat_user_pos_rank_nm, creat_dtime, erecord_flag, creat_sys_folder_id
		        , 'N', '0', '', '0', ''
		        <!--cubrid insert, '1', '0', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), presv_term_cd, folder_take_seq-->
		        , '1', '0', TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), presv_term_cd, folder_take_seq
		        , sumry, trans_dtime
		    FROM  TB_RDFOLDER
		    WHERE record_center_id = #recordCenterId:VARCHAR#
		    AND   folder_take_seq = #folderTakeSeq:VARCHAR#
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-21.생산현황등록-기록물철인수인계정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatFolderTakeTakovr" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRFOLDERTAKETAKOVR
		(
		    record_center_id, folder_recv_seq, sno, take_takovr_div_cd, take_takovr_creat_dtime
		    , take_takovr_org_cd, take_takovr_org_nm, reg_dtime, take_takovr_clss_id, take_takovr_creat_yyyy
		    , take_takovr_folder_reg_seq, take_takovr_ho_no
		)
		(
		    SELECT C.record_center_id
		        , C.folder_recv_seq
		        , A.sno
		        , A.take_takovr_div_cd
		        , A.take_takovr_creat_dtime
		        , A.take_takovr_org_cd
		        , A.take_takovr_org_nm
		        <!--cubrid insert, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
		        , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		        , A.take_takovr_clss_id
		        , A.take_takovr_creat_yyyy
		        , A.take_takovr_folder_reg_seq
		        , A.take_takovr_ho_no
		    FROM  TB_RDFOLDERTAKETAKOVR A
		        , TB_RDFOLDER B
		        , TB_CRFOLDER C
		    WHERE C.record_center_id = #recordCenterId:VARCHAR#
		    AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.clss_id = B.clss_id
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.folder_reg_seq = B.folder_reg_seq
		    AND   C.ho_no = B.ho_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.folder_id = A.folder_id
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-22.생산현황등록-생산현황보고 기록물철변경이력) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatFolderChngHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRFOLDERCHNGHIST
		(
		    record_center_id, folder_recv_seq, chng_hist_no, org_cd, clss_id
		    , creat_yyyy, folder_reg_seq, ho_no, title_bef, title_aft
		    , folder_type_div_cd_bef, folder_type_div_cd_aft, chng_ymd, chng_rsn, chng_user_nm
		    , reg_dtime
		)
		(
		    SELECT C.record_center_id
		        , C.folder_recv_seq
		        , A.chng_hist_no
		        , A.org_cd
		        , A.clss_id
		        , A.creat_yyyy
		        , A.folder_reg_seq
		        , A.ho_no
		        , A.title_bef
		        , A.title_aft
		        , A.folder_type_div_cd_bef
		        , A.folder_type_div_cd_aft
		        , A.chng_ymd
		        , A.chng_rsn
		        , A.chng_user_nm
		        <!--cubrid insert, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
		        , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		    FROM  TB_RDFOLDERCHNGHIST A
		        , TB_RDFOLDER B
		        , TB_CRFOLDER C
		    WHERE C.record_center_id = #recordCenterId:VARCHAR#
		    AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.clss_id = B.clss_id
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.folder_reg_seq = B.folder_reg_seq
		    AND   C.ho_no = B.ho_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.folder_id = A.folder_id
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-23.생산현황등록-생산현황보고 (철)특수목록내용) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatFolderSpclList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRSPCLLIST
		(
		    record_center_id, spcl_list_reg_no, folder_recv_seq, record_recv_seq, spcl_list_loc
		    , folder_clss_no, record_reg_no, seq, spcl_list1, spcl_list2
		    , spcl_list3, reg_dtime
		)
		(
		    SELECT C.record_center_id
		        , LPAD((TB_CRSPCLLIST_SQ01.nextval), 15, '0') 
		        , C.folder_recv_seq
		        , '', '1'
		        , (C.org_cd||C.clss_id||C.creat_yyyy||C.folder_reg_seq||C.ho_no) folder_clss_no
		        , ''
		        , ( SELECT LPAD((NVL(MAX(Z.seq),0)+1), 3, '0')
		            FROM  TB_CRSPCLLIST Z
		        	WHERE Z.folder_recv_seq = C.folder_recv_seq ) seq
		        <!--cubrid insert , A.keywd, '', '', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
		        , A.keywd, '', '', TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		    FROM TB_RDFOLDERKEYWD A
		        , TB_RDFOLDER B
		        , TB_CRFOLDER C
		    WHERE C.record_center_id = #recordCenterId:VARCHAR#
		    AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.clss_id = B.clss_id
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.folder_reg_seq = B.folder_reg_seq
		    AND   C.ho_no = B.ho_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.folder_id = A.folder_id
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-24.생산현황등록-생산현황보고 기록물건) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatRecord" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRRECORD
		(
		    record_center_id, record_recv_seq, folder_recv_seq, creat_sys_cd, org_cd
		    , creat_yyyy, creat_reg_dtime, creat_reg_no, dtch_reg_no, title
		    , sub_title, record_reg_div_cd, record_detl_type_cd, audvis_record_type, audvis_record_sumry
		    , media_format, medium, record_size, attach_cnt, record_page_cnt
		    , aprov_pos_rank_nm, duty_chrgr_nm, enforc_ymd, creat_org_reg_no, erecord_flag
		    , old_record_creat_org_nm, old_record_docno, old_record_presv_term, presv_loc, secu_clss_cd
		    , secu_clss_rsn, read_range, open_div_cd, open_grade, part_open_rsn
		    , open_limit_part, open_expt_dtime, recver, sender, chng_ver_no
		    , doc_distr_no, folder_clss_no, spcl_record_type, orign_copy_flag, new_div_cd
		    , chng_flag, rjct_flag, doc_no, creat_sys_record_id, error_flag
		    , exam_rslt_cd, take_fin_flag, cr_report_flag, reg_dtime, take_error_cont
		    , exam_cont, doc_no_org_nm, open_limit_date
		) 
		(
		    SELECT C.record_center_id
		        , TO_CHAR(SYSDATE,'YYYY')||LPAD((TB_CRRECORD_SQ01.nextval), 15, '0')
		        , C.folder_recv_seq
		        , A.creat_sys_cd, A.org_cd
		        , A.creat_yyyy, A.creat_reg_dtime, A.creat_reg_no, A.dtch_reg_no, A.title
		        , A.sub_title, A.record_reg_div_cd, A.record_detl_type_cd, A.audvis_record_type, A.audvis_record_sumry
		        , A.media_format, A.medium, A.record_size, A.attach_cnt, A.record_page_cnt
		        , A.aprov_pos_rank_nm, A.duty_chrgr_nm, A.enforc_ymd, A.creat_org_reg_no, A.erecord_flag
		        , A.old_record_creat_org_nm, A.old_record_docno, A.old_record_presv_term, A.presv_loc, A.secu_clss_cd
		        , A.secu_clss_rsn, A.read_range, A.open_div_cd, A.open_grade, A.part_open_rsn
		        , A.open_limit_part, A.open_expt_dtime, A.recver, A.sender, A.chng_ver_no
		        , A.doc_distr_no, A.folder_clss_no, A.spcl_record_type, A.orign_copy_flag, A.new_div_cd
		        , A.chng_flag, '0', A.doc_no, A.creat_sys_record_id, 'N'
		        <!--cubrid insert, '0', '0', '', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), ''-->
		        , '0', '0', '', TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), ''
		        , '', a.doc_no_org_nm, a.open_limit_date
		    FROM  TB_RDRECORD A
		        , TB_RDFOLDER B
		        , TB_CRFOLDER C
		    WHERE C.record_center_id = #recordCenterId:VARCHAR#
		    AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.clss_id = B.clss_id
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.folder_reg_seq = B.folder_reg_seq
		    AND   C.ho_no = B.ho_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.folder_id = A.folder_id
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-25.생산현황등록-생산현황보고 기록물건변경이력) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatRecordChngHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRRECORDCHNGHIST
		(
		    record_center_id, record_recv_seq, chng_hist_no, org_cd, creat_yyyy
		    , creat_reg_no, dtch_reg_no, creat_reg_ymd_bef, creat_reg_ymd_aft, title_bef
		    , title_aft, page_cnt_bef, page_cnt_aft, aprov_pos_rank_bef, aprov_pos_rank_aft
		    , duty_chrgr_bef, duty_chrgr_aft, enforc_ymd_bef, enforc_ymd_aft, recver_bef
		    , recver_aft, chng_ymd, chng_rsn, chng_user_nm, reg_dtime
		)
		(
		    SELECT C.record_center_id, C.record_recv_seq, A.chng_hist_no, A.org_cd, A.creat_yyyy
		        , A.creat_reg_no, A.dtch_reg_no, A.creat_reg_ymd_bef, A.creat_reg_ymd_aft, A.title_bef
		        , A.title_aft, A.page_cnt_bef, A.page_cnt_aft, A.aprov_pos_rank_bef, A.aprov_pos_rank_aft
		        , A.duty_chrgr_bef, A.duty_chrgr_aft, A.enforc_ymd_bef, A.enforc_ymd_aft, A.recver_bef
		        <!--cubrid insert, A.recver_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
		        , A.recver_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		    FROM  TB_RDRECORDCHNGHIST A
		        , TB_RDRECORD B
		        , TB_CRRECORD C
		        , TB_CRFOLDER D
		    WHERE D.record_center_id = #recordCenterId:VARCHAR#
		    AND   D.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   D.record_center_id = C.record_center_id
		    AND   D.folder_recv_seq = C.folder_recv_seq
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.creat_reg_no = B.creat_reg_no
		    AND   C.dtch_reg_no = B.dtch_reg_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.record_id = A.record_id
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-26.생산현황등록-생산현황보고 (건)특수목록내용) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatRecordSpclList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRSPCLLIST
		(
		    record_center_id, spcl_list_reg_no, folder_recv_seq, record_recv_seq, spcl_list_loc
		    , folder_clss_no, record_reg_no, seq, spcl_list1, spcl_list2
		    , spcl_list3, reg_dtime
		)
		(
		    SELECT C.record_center_id
		        , LPAD((TB_CRSPCLLIST_SQ01.nextval), 15, '0') 
                        <!--cubrid insert-->
		        , C.record_recv_seq
		        , '', '2', ''
		        , (C.creat_yyyy||C.creat_reg_no||C.dtch_reg_no) record_reg_no
		        , ( SELECT LPAD((NVL(MAX(Z.seq),0)+1), 3, '0')
		            FROM  TB_CRSPCLLIST Z
		        	WHERE Z.record_recv_seq = C.record_recv_seq ) seq
		        <!--cubrid insert, A.keywd, '', '', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
		        , A.keywd, '', '', TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		    FROM TB_RDRECORDKEYWD A
		        , TB_RDRECORD B
		        , TB_CRRECORD C
		        , TB_CRFOLDER D
		    WHERE D.record_center_id = #recordCenterId:VARCHAR#
		    AND   D.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   D.record_center_id = C.record_center_id
		    AND   D.folder_recv_seq = C.folder_recv_seq
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.creat_reg_no = B.creat_reg_no
		    AND   C.dtch_reg_no = B.dtch_reg_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.record_id = A.record_id
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-27.생산현황등록-생산현황보고 첨부파일) (INSERT)
		2014.06.17 이옥찬 중복 건 인수 가능으로 DISTINCT 추가..
	 -->
	<insert id="createUndTakeCheckFolderTakeCreatAttachFile" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRATTACHFILE
		(
		    record_center_id, record_recv_seq, reg_seq, org_cd, creat_yyyy
		    , creat_reg_no, attach_file_seq, attach_file_page_cnt, reg_dtime, doc_type_cd
		    , file_size
		)
		(
		    SELECT DISTINCT C.record_center_id, C.record_recv_seq, A.reg_seq, A.org_cd, A.creat_yyyy
		        , B.creat_reg_no, NVL(A.attach_file_seq,'00'), A.attach_file_page_cnt
		        <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
		        , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		        , A.doc_type_cd, A.file_size
		    FROM  TB_TKATTACHFILE A
		        , TB_RDRECORD B
		        , TB_CRRECORD C
		        , TB_CRFOLDER D
		    WHERE D.record_center_id = #recordCenterId:VARCHAR#
		    AND   D.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   D.record_center_id = C.record_center_id
		    AND   D.folder_recv_seq = C.folder_recv_seq
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.creat_reg_no = B.creat_reg_no
		    AND   C.dtch_reg_no = B.dtch_reg_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.record_take_seq = A.record_take_seq
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-28.기록물인수 기록물철 접근권한부여) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeFolderAccs" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERACCS
		(
			record_center_id, folder_id, accs_sno, accs_type_cd, accs_user_id, accs_dept_cd, reg_dtime
		)
		(
			SELECT A.record_center_id
			     , A.folder_id
			     , (SELECT (NVL(MAX(Z.accs_sno),0)+1)
			        FROM TB_RDFOLDERACCS Z
			        WHERE Z.record_center_id = A.record_center_id
			        AND   Z.folder_id = A.folder_id)
			     , '2' accs_type_cd
			     , null
			     , A.take_org_cd
			     <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
			     , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM  TB_RDFOLDER A
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리(인수처리-29.기록물인수 기록물건 접근권한부여) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeRecordAccs" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDACCS
		(
			record_center_id, record_id, accs_sno, accs_type_cd, accs_user_id, accs_dept_cd, reg_dtime
		)
		(
			SELECT B.record_center_id
			     , B.record_id
			     , (SELECT (NVL(MAX(Z.accs_sno),0)+1)
			        FROM TB_RDRECORDACCS Z
			        WHERE Z.record_center_id = B.record_center_id
			        AND   Z.record_id = B.record_id)
			     , '2' accs_type_cd
			     , null
			     , A.take_org_cd
			     <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
			     , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM  TB_RDFOLDER A
			    , TB_RDRECORD B
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   A.record_center_id = B.record_center_id
			AND   A.folder_id = B.folder_id
		)
	</insert>
	
	<!-- 
		기록물인수>연계인수>연계인수>인수처리(철목록-인수완료상태(1:인수대기,2:인수중,3:접수실패,4:접수완료) ) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderTakeFolderFinState" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKFOLDER
		SET   take_fin_state_cd = #takeFinStateCd:VARCHAR#
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #folderTakeSeq:VARCHAR#
		AND   NVL(take_fin_state_cd,'0') != '4'
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>인수처리(철목록-처리과인수완료상태확인(인수완료 안된수량) ) (COUNT)
	 -->
	<select id="countUndTakeCheckOrgFinState" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="int">
		SELECT COUNT(1)
		FROM  TB_TKFOLDER
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   take_yyyy = #takeYyyy:VARCHAR#
		AND   take_org_cd = #takeOrgCd:VARCHAR#
		AND   creat_sys_cd = #creatSysCd:VARCHAR#
		AND   take_sno = #takeSno:NUMBER#
		AND   take_fin_state_cd != '4'
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>인수처리(철목록-인수완료상태(1:접수중->0:미인수) ) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderTakeFolderFinStateClearList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_TKFOLDER
		SET take_fin_state_cd = '0'
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #folderTakeSeq:VARCHAR#
		AND   take_fin_state_cd = '1'
	</update>
	
	<!-- 
		기록물인수>연계인수>연계인수>인수현황 (COUNT)
	 -->
	<select id="countUndTakeCurStatePagedList" parameterClass="rms.take.undTake.domain.UndTakeCurState" resultClass="long">
		SELECT COUNT(*) 
			FROM 
				 (SELECT A.ORG_CD AS TAKE_ORG_CD, 
						A.ORG_NM AS TAKE_ORG_NM, 
						A.TAKE_ORG_ABBR_NM AS TAKE_ORG_ABBR_NM, 
						A.COM_CD AS CREAT_SYS_CD, 
						A.COM_CD_NM AS CREAT_SYS_CD_NM, 
						B.TAKE_YYYY,
						CREAT_YYYY,
						DECODE(B.TAKE_STATE_DIV_CD, '08', '1', '0') AS TAKE_FLAG, 
						DECODE(B.TAKE_STATE_DIV_CD, '08', '인수', '미인수') TAKE_FLAG_NM, 
						B.TAKE_YMD, 
						NVL(B.CNT1, 0) AS RECV_FOLDER_CNT, 
						NVL(B.CNT2, 0) AS RECV_RECORD_CNT, 
						NVL(B.CNT3, 0) AS FOLDER_CNT01, 
						NVL(B.CNT4, 0) AS RECORD_CNT01, 
						NVL(B.CNT5, 0) AS FOLDER_CNT02, 
						NVL(B.CNT6, 0) AS RECORD_CNT02, 
						SUBSTR (B.REG_DTIME, 0, 8) AS REG_DTIME
				   FROM 
						(SELECT A.RECORD_CENTER_ID, 
							   A.ORG_CD, 
							   A.ORG_NM, 
							   A.ORG_ABBR_NM TAKE_ORG_ABBR_NM, 
							   B.COM_CD, 
							   B.COM_CD_NM 
						  FROM TB_STORG A, 
							   (SELECT COM_CD, 
									  COM_CD_NM 
								 FROM TB_ZZCOMCD 
								WHERE COM_TYPE_CD = 'RD17' 
							   ) B 
						)A, 
						(SELECT A.RECORD_CENTER_ID, 
							   A.TAKE_YYYY, 
							   A.TAKE_ORG_CD, 
							   A.CREAT_SYS_CD, 
							   A.TAKE_SNO, 
							   A.TAKE_STATE_DIV_CD, 
							   A.TAKE_YMD, 
							   A.REG_DTIME, 
							   SUM(B.CNT1) AS CNT1, 
							   SUM(B.CNT2) AS CNT2, 
							   SUM(B.CNT3) AS CNT3, 
							   SUM(B.CNT4) AS CNT4, 
							   ( SUM(B.CNT1) - SUM(B.CNT3) ) AS CNT5, 
							   ( SUM(B.CNT2) - SUM(B.CNT4) ) AS CNT6, 
							   A.APP_TAKE_TYPE_CD, 
							   CREAT_YYYY 
						  FROM TB_TKORGTAKEPLAN A, 
							   (SELECT RECORD_CENTER_ID, 
									  TAKE_YYYY, 
									  TAKE_ORG_CD, 
									  CREAT_SYS_CD, 
									  TAKE_SNO, 
									  COUNT(*) AS CNT1, 
									  SUM(CNT2) AS CNT2, 
									  (SELECT COUNT(*) 
										FROM TB_RDFOLDER B 
									   WHERE B.RECORD_CENTER_ID = A.RECORD_CENTER_ID 
											 AND A.TAKE_YYYY = B.TAKE_YYYY 
											 AND A.FOLDER_TAKE_SEQ = B.FOLDER_TAKE_SEQ 
									  ) AS CNT3, 
									  SUM(CNT4) AS CNT4, 
									  A.CREAT_YYYY 
								 FROM 
									  (SELECT G.RECORD_CENTER_ID, 
											 G.TAKE_YYYY, 
											 G.TAKE_ORG_CD, 
											 G.CREAT_SYS_CD, 
											 G.TAKE_SNO, 
											 (SELECT COUNT(*) 
											   FROM TB_TKRECORD K 
											  WHERE K.RECORD_CENTER_ID = G.RECORD_CENTER_ID 
													AND K.FOLDER_TAKE_SEQ = G.FOLDER_TAKE_SEQ 
											 ) AS CNT2, 
											 (SELECT COUNT(*) 
											   FROM TB_RDRECORD J 
											  WHERE J.RECORD_CENTER_ID = R.RECORD_CENTER_ID 
													AND J.FOLDER_ID = R.FOLDER_ID 
											 ) AS CNT4, 
											 G.FOLDER_TAKE_SEQ, 
											 R.CREAT_YYYY 
										FROM TB_TKFOLDER G, 
											 TB_RDFOLDER R 
									   WHERE G.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
											 AND G.TAKE_YYYY = #takeYyyy:VARCHAR#
											 AND G.RECORD_CENTER_ID = R.RECORD_CENTER_ID(+) 
											 AND G.FOLDER_TAKE_SEQ = R.FOLDER_TAKE_SEQ(+) 
											 AND 
											 ( 
												 G.APP_TAKE_DET_TYPE_CD IN ( '0', '2' ) 
												 OR G.APP_TAKE_DET_TYPE_CD IS NULL 
											 ) 
											 AND G.RECV_RE_FLAG IS NULL 
									  )A 
								GROUP BY RECORD_CENTER_ID, 
									  TAKE_YYYY, 
									  TAKE_ORG_CD, 
									  CREAT_SYS_CD, 
									  TAKE_SNO, 
									  FOLDER_TAKE_SEQ, 
									  CREAT_YYYY 
							   )B 
						 WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID 
							   AND A.TAKE_YYYY = B.TAKE_YYYY 
							   AND A.TAKE_ORG_CD = B.TAKE_ORG_CD 
							   AND A.CREAT_SYS_CD = B.CREAT_SYS_CD 
							   AND A.TAKE_SNO = B.TAKE_SNO 
						 GROUP BY A.RECORD_CENTER_ID, 
							   A.TAKE_YYYY, 
							   A.TAKE_ORG_CD, 
							   A.CREAT_SYS_CD, 
							   A.TAKE_SNO, 
							   A.TAKE_STATE_DIV_CD, 
							   A.TAKE_YMD, 
							   A.REG_DTIME, 
							   A.APP_TAKE_TYPE_CD, 
							   CREAT_YYYY 
						)B 
				  WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID(+) 
						AND A.ORG_CD = B.TAKE_ORG_CD(+) 
						AND A.COM_CD = B.CREAT_SYS_CD(+)
						AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
						<isEmpty prepend="AND" property="creatSysCd">
						   	  A.com_cd IN ('01','02','04')
						</isEmpty>
						<isNotEmpty prepend="AND" property="creatSysCd">
							  A.com_cd = #creatSysCd:VARCHAR#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="takeOrgCd">
		          	   		  A.org_cd = #takeOrgCd:VARCHAR#
		                </isNotEmpty>
		               ) Z
						<dynamic prepend="WHERE">
						    <isNotEmpty prepend="AND" property="takeFlag">
								  Z.take_flag = #takeFlag:VARCHAR#
							</isNotEmpty>
						</dynamic>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>인수현황 (SELECT)
	 -->
	 <!-- 20140522 2/4분기 패치수정 인수현황 조회속도 관련 쿼리수정 (간결하고 빠르게 수정) BY 박찬모 -->
	 <!-- 20150310 1/4분기 패치수정 지철 구분 Record_center_id 항목 추가 - 김경수 -->
	<select id="findUndTakeCurStatePagedList" parameterClass="rms.take.undTake.domain.UndTakeCurState" resultMap="undTakeCurState-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		  SELECT * 
			FROM 
				 (SELECT A.ORG_CD AS TAKE_ORG_CD, 
						A.ORG_NM AS TAKE_ORG_NM, 
						A.TAKE_ORG_ABBR_NM AS TAKE_ORG_ABBR_NM, 
						A.COM_CD AS CREAT_SYS_CD, 
						A.COM_CD_NM AS CREAT_SYS_CD_NM, 
						B.TAKE_YYYY,
						CREAT_YYYY,
						DECODE(B.TAKE_STATE_DIV_CD, '08', '1', '0') AS TAKE_FLAG, 
						DECODE(B.TAKE_STATE_DIV_CD, '08', '인수', '미인수') TAKE_FLAG_NM, 
						B.TAKE_YMD, 
						NVL(B.CNT1, 0) AS RECV_FOLDER_CNT, 
						NVL(B.CNT2, 0) AS RECV_RECORD_CNT, 
						NVL(B.CNT3, 0) AS FOLDER_CNT01, 
						NVL(B.CNT4, 0) AS RECORD_CNT01, 
						NVL(B.CNT5, 0) AS FOLDER_CNT02, 
						NVL(B.CNT6, 0) AS RECORD_CNT02, 
						SUBSTR (B.REG_DTIME, 0, 8) AS REG_DTIME
				   FROM 
						(SELECT A.RECORD_CENTER_ID, 
							   A.ORG_CD, 
							   A.ORG_NM, 
							   A.ORG_ABBR_NM TAKE_ORG_ABBR_NM, 
							   B.COM_CD, 
							   B.COM_CD_NM 
						  FROM TB_STORG A, 
							   (SELECT COM_CD, 
									  COM_CD_NM 
								 FROM TB_ZZCOMCD 
								WHERE COM_TYPE_CD = 'RD17' 
							   ) B 
						  WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
						)A, 
						(SELECT A.RECORD_CENTER_ID, 
							   A.TAKE_YYYY, 
							   A.TAKE_ORG_CD, 
							   A.CREAT_SYS_CD, 
							   A.TAKE_SNO, 
							   A.TAKE_STATE_DIV_CD, 
							   A.TAKE_YMD, 
							   A.REG_DTIME, 
							   SUM(B.CNT1) AS CNT1, 
							   SUM(B.CNT2) AS CNT2, 
							   SUM(B.CNT3) AS CNT3, 
							   SUM(B.CNT4) AS CNT4, 
							   ( SUM(B.CNT1) - SUM(B.CNT3) ) AS CNT5, 
							   ( SUM(B.CNT2) - SUM(B.CNT4) ) AS CNT6, 
							   A.APP_TAKE_TYPE_CD, 
							   CREAT_YYYY 
						  FROM TB_TKORGTAKEPLAN A, 
							   (SELECT RECORD_CENTER_ID, 
									  TAKE_YYYY, 
									  TAKE_ORG_CD, 
									  CREAT_SYS_CD, 
									  TAKE_SNO, 
									  COUNT(*) AS CNT1, 
									  SUM(CNT2) AS CNT2, 
									  (SELECT COUNT(*) 
										FROM TB_RDFOLDER B 
									   WHERE B.RECORD_CENTER_ID = A.RECORD_CENTER_ID 
											 AND A.TAKE_YYYY = B.TAKE_YYYY 
											 AND A.FOLDER_TAKE_SEQ = B.FOLDER_TAKE_SEQ 
									  ) AS CNT3, 
									  SUM(CNT4) AS CNT4, 
									  A.CREAT_YYYY 
								 FROM 
									  (SELECT G.RECORD_CENTER_ID, 
											 G.TAKE_YYYY, 
											 G.TAKE_ORG_CD, 
											 G.CREAT_SYS_CD, 
											 G.TAKE_SNO, 
											 (SELECT COUNT(*) 
											   FROM TB_TKRECORD K 
											  WHERE K.RECORD_CENTER_ID = G.RECORD_CENTER_ID 
													AND K.FOLDER_TAKE_SEQ = G.FOLDER_TAKE_SEQ 
											 ) AS CNT2, 
											 (SELECT COUNT(*) 
											   FROM TB_RDRECORD J 
											  WHERE J.RECORD_CENTER_ID = R.RECORD_CENTER_ID 
													AND J.FOLDER_ID = R.FOLDER_ID 
											 ) AS CNT4, 
											 G.FOLDER_TAKE_SEQ, 
											 R.CREAT_YYYY 
										FROM TB_TKFOLDER G, 
											 TB_RDFOLDER R 
									   WHERE G.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
											 AND G.TAKE_YYYY = #takeYyyy:VARCHAR#
											 AND G.RECORD_CENTER_ID = R.RECORD_CENTER_ID(+) 
											 AND G.FOLDER_TAKE_SEQ = R.FOLDER_TAKE_SEQ(+) 
											 AND 
											 ( 
												 G.APP_TAKE_DET_TYPE_CD IN ( '0', '2' ) 
												 OR G.APP_TAKE_DET_TYPE_CD IS NULL 
											 ) 
											 AND G.RECV_RE_FLAG IS NULL 
									  )A 
								GROUP BY RECORD_CENTER_ID, 
									  TAKE_YYYY, 
									  TAKE_ORG_CD, 
									  CREAT_SYS_CD, 
									  TAKE_SNO, 
									  FOLDER_TAKE_SEQ, 
									  CREAT_YYYY 
							   )B 
						 WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID 
							   AND A.TAKE_YYYY = B.TAKE_YYYY 
							   AND A.TAKE_ORG_CD = B.TAKE_ORG_CD 
							   AND A.CREAT_SYS_CD = B.CREAT_SYS_CD 
							   AND A.TAKE_SNO = B.TAKE_SNO 
						 GROUP BY A.RECORD_CENTER_ID, 
							   A.TAKE_YYYY, 
							   A.TAKE_ORG_CD, 
							   A.CREAT_SYS_CD, 
							   A.TAKE_SNO, 
							   A.TAKE_STATE_DIV_CD, 
							   A.TAKE_YMD, 
							   A.REG_DTIME, 
							   A.APP_TAKE_TYPE_CD, 
							   CREAT_YYYY 
						)B 
				  WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID(+) 
						AND A.ORG_CD = B.TAKE_ORG_CD(+) 
						AND A.COM_CD = B.CREAT_SYS_CD(+)
						AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
						<isEmpty prepend="AND" property="creatSysCd">
						   	  A.com_cd IN ('01','02','04')
						</isEmpty>
						<isNotEmpty prepend="AND" property="creatSysCd">
							  A.com_cd = #creatSysCd:VARCHAR#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="takeOrgCd">
		          	   		  A.org_cd = #takeOrgCd:VARCHAR#
		                </isNotEmpty>
		               ) Z
						<dynamic prepend="WHERE">
						    <isNotEmpty prepend="AND" property="takeFlag">
								  Z.take_flag = #takeFlag:VARCHAR#
							</isNotEmpty>
						</dynamic>
		ORDER BY Z.TAKE_ORG_CD, 
         Z.TAKE_ORG_NM, 
         Z.CREAT_SYS_CD
         ) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	<!-- 
		기록물인수>연계인수>연계인수>인수현황(철목록) (COUNT)
	 -->
	<select id="countUndTakeCurStateFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="long">
		SELECT COUNT(1)
		FROM  (
			SELECT A.folder_take_seq
			     , A.clss_id
			     , A.clss_nm
			     , A.title
			     , A.creat_yyyy
			     , A.presv_term_cd
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
				    AND   C.com_cd = A.presv_term_cd) presv_term_nm
			     , A.erecord_flag
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'RD23'
				    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
				 , A.app_take_det_type_cd
				 , NVL((SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'TK21'
				    AND   C.com_cd = A.app_take_det_type_cd),'정기') app_take_det_type_nm
			FROM  TB_TKFOLDER A, TB_RDFOLDER B
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.take_yyyy = #takeYyyy:VARCHAR#
			AND   A.take_org_cd = #takeOrgCd:VARCHAR#
			AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
			<!-- AND   A.take_sno BETWEEN (SELECT K.parent_take_sno 
									    FROM tb_tkorgtakeplan K
									   WHERE K.record_center_id = #recordCenterId:VARCHAR#
									     AND K.take_yyyy 		= #takeYyyy:VARCHAR#
									     AND K.take_org_cd 		= #takeOrgCd:VARCHAR#
									     AND K.creat_sys_cd 	= #creatSysCd:VARCHAR# 
									     AND K.take_sno 		= #takeSno:NUMBER#) AND #takeSno:NUMBER# -->
			AND   A.recv_re_flag IS NULL
			<isNotEmpty prepend="AND" property="appTakeDetTypeCd">
				  A.app_take_det_type_cd = #appTakeDetTypeCd:VARCHAR#
			</isNotEmpty>
			AND	  A.record_center_id = B.record_center_id(+)
			AND	  A.folder_take_seq = B.folder_take_seq(+)
		)
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>인수현황(철목록) (SELECT)
	 -->
	<select id="findUndTakeCurStateFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeCurStateFolder-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT folder_take_seq
		     , clss_id
		     , clss_nm
		     , title
		     , creat_yyyy
		     , presv_term_cd
		     , presv_term_nm
		     , erecord_flag
		     , erecord_flag_nm
			 , app_take_det_type_cd
			 , app_take_det_type_nm
		FROM  (
			SELECT A.folder_take_seq
			     , A.clss_id
			     , A.clss_nm
			     , A.title
			     , A.creat_yyyy
			     , A.presv_term_cd
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
				    AND   C.com_cd = A.presv_term_cd) presv_term_nm
			     , A.erecord_flag
				 , (SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'RD23'
				    AND   C.com_cd = A.erecord_flag) erecord_flag_nm
				 , A.app_take_det_type_cd
				 , NVL((SELECT C.com_cd_nm
				    FROM TB_ZZCOMCD C
				    WHERE C.com_type_cd = 'TK21'
				    AND   C.com_cd = A.app_take_det_type_cd),'정기') app_take_det_type_nm
			FROM  TB_TKFOLDER A, TB_RDFOLDER B
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.take_yyyy = #takeYyyy:VARCHAR#
			AND   A.take_org_cd = #takeOrgCd:VARCHAR#
			AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
			<!-- AND   A.take_sno BETWEEN (SELECT K.parent_take_sno 
									    FROM tb_tkorgtakeplan K
									   WHERE K.record_center_id = #recordCenterId:VARCHAR#
									     AND K.take_yyyy 		= #takeYyyy:VARCHAR#
									     AND K.take_org_cd 		= #takeOrgCd:VARCHAR#
									     AND K.creat_sys_cd 	= #creatSysCd:VARCHAR# 
									     AND K.take_sno 		= #takeSno:NUMBER#) AND #takeSno:NUMBER# -->
			AND   A.recv_re_flag IS NULL
			<isNotEmpty prepend="AND" property="appTakeDetTypeCd">
				  A.app_take_det_type_cd = #appTakeDetTypeCd:VARCHAR#
			</isNotEmpty>
			AND	  A.record_center_id = B.record_center_id(+)
			AND	  A.folder_take_seq = B.folder_take_seq(+)
		)
		ORDER BY folder_take_seq
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	
	<!-- 
		기록물인수>연계인수>연계인수>인수현황 (SELECT)- 생산년도별 인수현황
	 -->
	 <!-- 20140522 2/4분기 패치수정 생산연도별 엑셀저장 년도별로 저장되도록 BY 박찬모 -->
	<select id="findUndTakeYearCurStatePagedList" parameterClass="rms.take.undTake.domain.UndTakeCurState" resultMap="undTakeYearCurState-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		  SELECT * 
			FROM 
				 (SELECT A.ORG_CD AS TAKE_ORG_CD, 
						A.ORG_NM AS TAKE_ORG_NM, 
						A.TAKE_ORG_ABBR_NM AS TAKE_ORG_ABBR_NM, 
						A.COM_CD AS CREAT_SYS_CD, 
						A.COM_CD_NM AS CREAT_SYS_CD_NM, 
						B.TAKE_YYYY,
						CREAT_YYYY,
						DECODE(B.TAKE_STATE_DIV_CD, '08', '1', '0') AS TAKE_FLAG, 
						DECODE(B.TAKE_STATE_DIV_CD, '08', '인수', '미인수') TAKE_FLAG_NM, 
						B.TAKE_YMD, 
						NVL(B.CNT1, 0) AS RECV_FOLDER_CNT, 
						NVL(B.CNT2, 0) AS RECV_RECORD_CNT, 
						NVL(B.CNT3, 0) AS FOLDER_CNT01, 
						NVL(B.CNT4, 0) AS RECORD_CNT01, 
						NVL(B.CNT5, 0) AS FOLDER_CNT02, 
						NVL(B.CNT6, 0) AS RECORD_CNT02, 
						SUBSTR (B.REG_DTIME, 0, 8) AS REG_DTIME
				   FROM 
						(SELECT A.RECORD_CENTER_ID, 
							   A.ORG_CD, 
							   A.ORG_NM, 
							   A.ORG_ABBR_NM TAKE_ORG_ABBR_NM, 
							   B.COM_CD, 
							   B.COM_CD_NM 
						  FROM TB_STORG A, 
							   (SELECT COM_CD, 
									  COM_CD_NM 
								 FROM TB_ZZCOMCD 
								WHERE COM_TYPE_CD = 'RD17' 
							   ) B 
						)A, 
						(SELECT A.RECORD_CENTER_ID, 
							   A.TAKE_YYYY, 
							   A.TAKE_ORG_CD, 
							   A.CREAT_SYS_CD, 
							   A.TAKE_SNO, 
							   A.TAKE_STATE_DIV_CD, 
							   A.TAKE_YMD, 
							   A.REG_DTIME, 
							   SUM(B.CNT1) AS CNT1, 
							   SUM(B.CNT2) AS CNT2, 
							   SUM(B.CNT3) AS CNT3, 
							   SUM(B.CNT4) AS CNT4, 
							   ( SUM(B.CNT1) - SUM(B.CNT3) ) AS CNT5, 
							   ( SUM(B.CNT2) - SUM(B.CNT4) ) AS CNT6, 
							   A.APP_TAKE_TYPE_CD, 
							   CREAT_YYYY 
						  FROM TB_TKORGTAKEPLAN A, 
							   (SELECT RECORD_CENTER_ID, 
									  TAKE_YYYY, 
									  TAKE_ORG_CD, 
									  CREAT_SYS_CD, 
									  TAKE_SNO, 
									  COUNT(*) AS CNT1, 
									  SUM(CNT2) AS CNT2, 
									  (SELECT COUNT(*) 
										FROM TB_RDFOLDER B 
									   WHERE B.RECORD_CENTER_ID = A.RECORD_CENTER_ID 
											 AND A.TAKE_YYYY = B.TAKE_YYYY 
											 AND A.FOLDER_TAKE_SEQ = B.FOLDER_TAKE_SEQ 
									  ) AS CNT3, 
									  SUM(CNT4) AS CNT4, 
									  A.CREAT_YYYY 
								 FROM 
									  (SELECT G.RECORD_CENTER_ID, 
											 G.TAKE_YYYY, 
											 G.TAKE_ORG_CD, 
											 G.CREAT_SYS_CD, 
											 G.TAKE_SNO, 
											 (SELECT COUNT(*) 
											   FROM TB_TKRECORD K 
											  WHERE K.RECORD_CENTER_ID = G.RECORD_CENTER_ID 
													AND K.FOLDER_TAKE_SEQ = G.FOLDER_TAKE_SEQ 
											 ) AS CNT2, 
											 (SELECT COUNT(*) 
											   FROM TB_RDRECORD J 
											  WHERE J.RECORD_CENTER_ID = R.RECORD_CENTER_ID 
													AND J.FOLDER_ID = R.FOLDER_ID 
											 ) AS CNT4, 
											 G.FOLDER_TAKE_SEQ, 
											 R.CREAT_YYYY 
										FROM TB_TKFOLDER G, 
											 TB_RDFOLDER R 
									   WHERE G.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
											 AND G.TAKE_YYYY = #takeYyyy:VARCHAR#
											 AND G.RECORD_CENTER_ID = R.RECORD_CENTER_ID(+) 
											 AND G.FOLDER_TAKE_SEQ = R.FOLDER_TAKE_SEQ(+) 
											 AND 
											 ( 
												 G.APP_TAKE_DET_TYPE_CD IN ( '0', '2' ) 
												 OR G.APP_TAKE_DET_TYPE_CD IS NULL 
											 ) 
											 AND G.RECV_RE_FLAG IS NULL 
									  )A 
								GROUP BY RECORD_CENTER_ID, 
									  TAKE_YYYY, 
									  TAKE_ORG_CD, 
									  CREAT_SYS_CD, 
									  TAKE_SNO, 
									  FOLDER_TAKE_SEQ, 
									  CREAT_YYYY 
							   )B 
						 WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID 
							   AND A.TAKE_YYYY = B.TAKE_YYYY 
							   AND A.TAKE_ORG_CD = B.TAKE_ORG_CD 
							   AND A.CREAT_SYS_CD = B.CREAT_SYS_CD 
							   AND A.TAKE_SNO = B.TAKE_SNO 
						 GROUP BY A.RECORD_CENTER_ID, 
							   A.TAKE_YYYY, 
							   A.TAKE_ORG_CD, 
							   A.CREAT_SYS_CD, 
							   A.TAKE_SNO, 
							   A.TAKE_STATE_DIV_CD, 
							   A.TAKE_YMD, 
							   A.REG_DTIME, 
							   A.APP_TAKE_TYPE_CD, 
							   CREAT_YYYY 
						)B 
				  WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID(+) 
				  		AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
						AND A.ORG_CD = B.TAKE_ORG_CD(+) 
						AND A.COM_CD = B.CREAT_SYS_CD(+)
						<isEmpty prepend="AND" property="creatSysCd">
						   	  A.com_cd IN ('01','02','04')
						</isEmpty>
						<isNotEmpty prepend="AND" property="creatSysCd">
							  A.com_cd = #creatSysCd:VARCHAR#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="takeOrgCd">
		          	   		  A.org_cd = #takeOrgCd:VARCHAR#
		                </isNotEmpty>
		               ) Z
						<dynamic prepend="WHERE">
						    <isNotEmpty prepend="AND" property="takeFlag">
								  Z.take_flag = #takeFlag:VARCHAR#
							</isNotEmpty>
						</dynamic>
		ORDER BY Z.TAKE_ORG_CD, 
         Z.TAKE_ORG_NM, 
         Z.CREAT_SYS_CD
         ) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<select id="countUndTakeYearCurStatePagedList" parameterClass="rms.take.undTake.domain.UndTakeCurState" resultClass="long">
		  SELECT COUNT(*)  
			FROM 
				 (SELECT A.ORG_CD AS TAKE_ORG_CD, 
						A.ORG_NM AS TAKE_ORG_NM, 
						A.TAKE_ORG_ABBR_NM AS TAKE_ORG_ABBR_NM, 
						A.COM_CD AS CREAT_SYS_CD, 
						A.COM_CD_NM AS CREAT_SYS_CD_NM, 
						B.TAKE_YYYY,
						CREAT_YYYY,
						DECODE(B.TAKE_STATE_DIV_CD, '08', '1', '0') AS TAKE_FLAG, 
						DECODE(B.TAKE_STATE_DIV_CD, '08', '인수', '미인수') TAKE_FLAG_NM, 
						B.TAKE_YMD, 
						NVL(B.CNT1, 0) AS RECV_FOLDER_CNT, 
						NVL(B.CNT2, 0) AS RECV_RECORD_CNT, 
						NVL(B.CNT3, 0) AS FOLDER_CNT01, 
						NVL(B.CNT4, 0) AS RECORD_CNT01, 
						NVL(B.CNT5, 0) AS FOLDER_CNT02, 
						NVL(B.CNT6, 0) AS RECORD_CNT02, 
						SUBSTR (B.REG_DTIME, 0, 8) AS REG_DTIME
				   FROM 
						(SELECT A.RECORD_CENTER_ID, 
							   A.ORG_CD, 
							   A.ORG_NM, 
							   A.ORG_ABBR_NM TAKE_ORG_ABBR_NM, 
							   B.COM_CD, 
							   B.COM_CD_NM 
						  FROM TB_STORG A, 
							   (SELECT COM_CD, 
									  COM_CD_NM 
								 FROM TB_ZZCOMCD 
								WHERE COM_TYPE_CD = 'RD17' 
							   ) B 
						)A, 
						(SELECT A.RECORD_CENTER_ID, 
							   A.TAKE_YYYY, 
							   A.TAKE_ORG_CD, 
							   A.CREAT_SYS_CD, 
							   A.TAKE_SNO, 
							   A.TAKE_STATE_DIV_CD, 
							   A.TAKE_YMD, 
							   A.REG_DTIME, 
							   SUM(B.CNT1) AS CNT1, 
							   SUM(B.CNT2) AS CNT2, 
							   SUM(B.CNT3) AS CNT3, 
							   SUM(B.CNT4) AS CNT4, 
							   ( SUM(B.CNT1) - SUM(B.CNT3) ) AS CNT5, 
							   ( SUM(B.CNT2) - SUM(B.CNT4) ) AS CNT6, 
							   A.APP_TAKE_TYPE_CD, 
							   CREAT_YYYY 
						  FROM TB_TKORGTAKEPLAN A, 
							   (SELECT RECORD_CENTER_ID, 
									  TAKE_YYYY, 
									  TAKE_ORG_CD, 
									  CREAT_SYS_CD, 
									  TAKE_SNO, 
									  COUNT(*) AS CNT1, 
									  SUM(CNT2) AS CNT2, 
									  (SELECT COUNT(*) 
										FROM TB_RDFOLDER B 
									   WHERE B.RECORD_CENTER_ID = A.RECORD_CENTER_ID 
											 AND A.TAKE_YYYY = B.TAKE_YYYY 
											 AND A.FOLDER_TAKE_SEQ = B.FOLDER_TAKE_SEQ 
									  ) AS CNT3, 
									  SUM(CNT4) AS CNT4, 
									  A.CREAT_YYYY 
								 FROM 
									  (SELECT G.RECORD_CENTER_ID, 
											 G.TAKE_YYYY, 
											 G.TAKE_ORG_CD, 
											 G.CREAT_SYS_CD, 
											 G.TAKE_SNO, 
											 (SELECT COUNT(*) 
											   FROM TB_TKRECORD K 
											  WHERE K.RECORD_CENTER_ID = G.RECORD_CENTER_ID 
													AND K.FOLDER_TAKE_SEQ = G.FOLDER_TAKE_SEQ 
											 ) AS CNT2, 
											 (SELECT COUNT(*) 
											   FROM TB_RDRECORD J 
											  WHERE J.RECORD_CENTER_ID = R.RECORD_CENTER_ID 
													AND J.FOLDER_ID = R.FOLDER_ID 
											 ) AS CNT4, 
											 G.FOLDER_TAKE_SEQ, 
											 R.CREAT_YYYY 
										FROM TB_TKFOLDER G, 
											 TB_RDFOLDER R 
									   WHERE G.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
											 AND G.TAKE_YYYY = #takeYyyy:VARCHAR#
											 AND G.RECORD_CENTER_ID = R.RECORD_CENTER_ID(+) 
											 AND G.FOLDER_TAKE_SEQ = R.FOLDER_TAKE_SEQ(+) 
											 AND 
											 ( 
												 G.APP_TAKE_DET_TYPE_CD IN ( '0', '2' ) 
												 OR G.APP_TAKE_DET_TYPE_CD IS NULL 
											 ) 
											 AND G.RECV_RE_FLAG IS NULL 
									  )A 
								GROUP BY RECORD_CENTER_ID, 
									  TAKE_YYYY, 
									  TAKE_ORG_CD, 
									  CREAT_SYS_CD, 
									  TAKE_SNO, 
									  FOLDER_TAKE_SEQ, 
									  CREAT_YYYY 
							   )B 
						 WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID 
							   AND A.TAKE_YYYY = B.TAKE_YYYY 
							   AND A.TAKE_ORG_CD = B.TAKE_ORG_CD 
							   AND A.CREAT_SYS_CD = B.CREAT_SYS_CD 
							   AND A.TAKE_SNO = B.TAKE_SNO 
						 GROUP BY A.RECORD_CENTER_ID, 
							   A.TAKE_YYYY, 
							   A.TAKE_ORG_CD, 
							   A.CREAT_SYS_CD, 
							   A.TAKE_SNO, 
							   A.TAKE_STATE_DIV_CD, 
							   A.TAKE_YMD, 
							   A.REG_DTIME, 
							   A.APP_TAKE_TYPE_CD, 
							   CREAT_YYYY 
						)B 
				  WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID(+) 
				  		AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
						AND A.ORG_CD = B.TAKE_ORG_CD(+) 
						AND A.COM_CD = B.CREAT_SYS_CD(+)
						<isEmpty prepend="AND" property="creatSysCd">
						   	  A.com_cd IN ('01','02','04')
						</isEmpty>
						<isNotEmpty prepend="AND" property="creatSysCd">
							  A.com_cd = #creatSysCd:VARCHAR#
						</isNotEmpty>
						<isNotEmpty prepend="AND" property="takeOrgCd">
		          	   		  A.org_cd = #takeOrgCd:VARCHAR#
		                </isNotEmpty>
		               ) Z
						<dynamic prepend="WHERE">
						    <isNotEmpty prepend="AND" property="takeFlag">
								  Z.take_flag = #takeFlag:VARCHAR#
							</isNotEmpty>
						</dynamic>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>미인수현황 (COUNT)
	 -->
	<select id="countUndTakeNotTakeCurStatePagedList" parameterClass="rms.take.undTake.domain.UndTakeNotTakeCurState" resultClass="long">
		SELECT COUNT(1)
		FROM (
			SELECT C.cr_report_org_cd, C.cr_report_org_nm, C.cr_report_org_abbr_nm
			     , C.com_cd creat_sys_cd, C.com_cd_nm creat_sys_cd_nm
				 , #crReportYyyy:VARCHAR# cr_report_yyyy
				 , NVL(E.folder_cnt01,0) folder_cnt01, NVL(H.record_cnt01,0) record_cnt01
				 , NVL(E.folder_cnt02,0) folder_cnt02, NVL(H.record_cnt02,0) record_cnt02
				 , (NVL(E.folder_cnt01,0)-NVL(E.folder_cnt02,0)) folder_cnt03
				 , (NVL(H.record_cnt01,0)-NVL(H.record_cnt02,0)) record_cnt03
				 , DECODE(NVL(E.folder_cnt01,0),0,'0',DECODE((NVL(E.folder_cnt01,0)-NVL(E.folder_cnt02,0)),0,'1','0')) take_flag
				 , DECODE(NVL(E.folder_cnt01,0),0,'미인수',DECODE((NVL(E.folder_cnt01,0)-NVL(E.folder_cnt02,0)),0,'인수','미인수')) take_flag_nm
			FROM
			(   SELECT A.org_cd cr_report_org_cd
			         , A.org_nm cr_report_org_nm
			         , A.org_abbr_nm cr_report_org_abbr_nm
			         , B.com_cd
			         , B.com_cd_nm
			    FROM  TB_STORG A
			         , (SELECT com_cd, com_cd_nm
			            FROM  TB_ZZCOMCD
				        WHERE com_type_cd = 'RD17'
						AND   com_cd = '02'
					    ) B
			    WHERE A.record_center_id = #recordCenterId:VARCHAR#
			    <isNotEmpty prepend="AND" property="crReportOrgCd">
					  A.org_cd = #crReportOrgCd:VARCHAR#
				</isNotEmpty>
			    ) C
			, ( SELECT I.record_center_id, I.cr_report_yyyy, I.cr_report_org_cd, I.creat_sys_cd, I.cr_report_sno
			         , I.state_div_cd
			    FROM  TB_CRREPORT I
			    WHERE I.record_center_id = #recordCenterId:VARCHAR#
				AND   I.cr_report_yyyy = #crReportYyyy:VARCHAR#
				) D
			, ( SELECT M.record_center_id, M.cr_report_yyyy, M.cr_report_org_cd, M.creat_sys_cd, M.cr_report_sno
				    , COUNT(M.folder_recv_seq) folder_cnt01
					, COUNT(N.folder_id) folder_cnt02
				FROM  TB_CRFOLDER M, TB_RDFOLDER N
				WHERE M.record_center_id = #recordCenterId:VARCHAR#
				AND   M.record_center_id = N.record_center_id(+)
				AND   M.org_cd = N.org_cd(+)
				AND   M.clss_id = N.clss_id(+)
				AND   M.creat_yyyy = N.creat_yyyy(+)
				AND   M.folder_reg_seq = N.folder_reg_seq(+)
				AND   M.ho_no = N.ho_no(+)
				GROUP BY M.record_center_id, M.cr_report_yyyy, M.cr_report_org_cd, M.creat_sys_cd, M.cr_report_sno ) E
			, ( SELECT F.record_center_id, F.cr_report_yyyy, F.cr_report_org_cd, F.creat_sys_cd, F.cr_report_sno
				     , COUNT(G.record_recv_seq) record_cnt01
				     , COUNT(J.record_id) record_cnt02
				FROM  TB_CRFOLDER F
				    , TB_CRRECORD G
				    , TB_RDRECORD J
				WHERE F.record_center_id = #recordCenterId:VARCHAR#
				AND   F.record_center_id = G.record_center_id
				AND	  F.folder_recv_seq = G.folder_recv_seq
				AND	  G.record_center_id = J.record_center_id(+)
				AND	  G.org_cd = J.org_cd(+)
				AND	  G.creat_yyyy = J.creat_yyyy(+)
				AND	  G.creat_reg_no = J.creat_reg_no(+)
				AND	  G.dtch_reg_no = J.dtch_reg_no(+)
				GROUP BY F.record_center_id, F.cr_report_yyyy, F.cr_report_org_cd, F.creat_sys_cd, F.cr_report_sno ) H
			WHERE C.cr_report_org_cd = D.cr_report_org_cd(+)
			AND   C.com_cd = D.creat_sys_cd(+)
			AND   D.record_center_id = E.record_center_id(+)
			AND   D.cr_report_yyyy = E.cr_report_yyyy(+)
			AND   D.cr_report_org_cd = E.cr_report_org_cd(+)
			AND   D.creat_sys_cd = E.creat_sys_cd(+)
			AND   D.cr_report_sno = E.cr_report_sno(+)
			AND   D.record_center_id = H.record_center_id(+)
			AND   D.cr_report_yyyy = H.cr_report_yyyy(+)
			AND   D.cr_report_org_cd = H.cr_report_org_cd(+)
			AND   D.creat_sys_cd = H.creat_sys_cd(+)
			AND   D.cr_report_sno = H.cr_report_sno(+)
		) Z
		<dynamic prepend="WHERE">
		    <isNotEmpty prepend="AND" property="takeFlag">
				  Z.take_flag = #takeFlag:VARCHAR#
			</isNotEmpty>
		</dynamic>
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>미인수현황 (SELECT)
	 -->
	<select id="findUndTakeNotTakeCurStatePagedList" parameterClass="rms.take.undTake.domain.UndTakeNotTakeCurState" resultMap="undTakeNotTakeCurState-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT *
		FROM (
			SELECT C.cr_report_org_cd, C.cr_report_org_nm, C.cr_report_org_abbr_nm
			     , C.com_cd creat_sys_cd, C.com_cd_nm creat_sys_cd_nm
				 , #crReportYyyy:VARCHAR# cr_report_yyyy
				 , NVL(E.folder_cnt01,0) folder_cnt01, NVL(H.record_cnt01,0) record_cnt01
				 , NVL(E.folder_cnt02,0) folder_cnt02, NVL(H.record_cnt02,0) record_cnt02
				 , (NVL(E.folder_cnt01,0)-NVL(E.folder_cnt02,0)) folder_cnt03
				 , (NVL(H.record_cnt01,0)-NVL(H.record_cnt02,0)) record_cnt03
				 , DECODE(NVL(E.folder_cnt01,0),0,'0',DECODE((NVL(E.folder_cnt01,0)-NVL(E.folder_cnt02,0)),0,'1','0')) take_flag
				 , DECODE(NVL(E.folder_cnt01,0),0,'미인수',DECODE((NVL(E.folder_cnt01,0)-NVL(E.folder_cnt02,0)),0,'인수','미인수')) take_flag_nm
			FROM
			(   SELECT A.org_cd cr_report_org_cd
			         , A.org_nm cr_report_org_nm
			         , A.org_abbr_nm cr_report_org_abbr_nm
			         , B.com_cd
			         , B.com_cd_nm
			    FROM  TB_STORG A
			         , (SELECT com_cd, com_cd_nm
			            FROM  TB_ZZCOMCD
				        WHERE com_type_cd = 'RD17'
						AND   com_cd = '02'
					    ) B
			    WHERE A.record_center_id = #recordCenterId:VARCHAR#
			    <isNotEmpty prepend="AND" property="crReportOrgCd">
					  A.org_cd = #crReportOrgCd:VARCHAR#
				</isNotEmpty>
			    ) C
			, ( SELECT I.record_center_id, I.cr_report_yyyy, I.cr_report_org_cd, I.creat_sys_cd, I.cr_report_sno
			         , I.state_div_cd
			    FROM  TB_CRREPORT I
			    WHERE I.record_center_id = #recordCenterId:VARCHAR#
				AND   I.cr_report_yyyy = #crReportYyyy:VARCHAR#
				) D
			, ( SELECT M.record_center_id, M.cr_report_yyyy, M.cr_report_org_cd, M.creat_sys_cd, M.cr_report_sno
				    , COUNT(M.folder_recv_seq) folder_cnt01
					, COUNT(N.folder_id) folder_cnt02
				FROM  TB_CRFOLDER M, TB_RDFOLDER N
				WHERE M.record_center_id = #recordCenterId:VARCHAR#
				AND   M.record_center_id = N.record_center_id(+)
				AND   M.creat_sys_cd = N.creat_sys_cd(+)
				AND   M.org_cd = N.org_cd(+)
				AND   M.clss_id = N.clss_id(+)
				AND   M.creat_yyyy = N.creat_yyyy(+)
				AND   M.folder_reg_seq = N.folder_reg_seq(+)
				AND   M.ho_no = N.ho_no(+)
				GROUP BY M.record_center_id, M.cr_report_yyyy, M.cr_report_org_cd, M.creat_sys_cd, M.cr_report_sno ) E
			, ( SELECT F.record_center_id, F.cr_report_yyyy, F.cr_report_org_cd, F.creat_sys_cd, F.cr_report_sno
				     , COUNT(G.record_recv_seq) record_cnt01
				     , COUNT(J.record_id) record_cnt02
				FROM  TB_CRFOLDER F
				    , TB_CRRECORD G
				    , TB_RDRECORD J
				WHERE F.record_center_id = #recordCenterId:VARCHAR#
				AND   F.record_center_id = G.record_center_id
				AND	  F.folder_recv_seq = G.folder_recv_seq
				AND	  G.record_center_id = J.record_center_id(+)
				AND	  G.creat_sys_cd = J.creat_sys_cd(+)
				AND	  G.org_cd = J.org_cd(+)
				AND	  G.creat_yyyy = J.creat_yyyy(+)
				AND	  G.creat_reg_no = J.creat_reg_no(+)
				AND	  G.dtch_reg_no = J.dtch_reg_no(+)
				GROUP BY F.record_center_id, F.cr_report_yyyy, F.cr_report_org_cd, F.creat_sys_cd, F.cr_report_sno ) H
			WHERE C.cr_report_org_cd = D.cr_report_org_cd(+)
			AND   C.com_cd = D.creat_sys_cd(+)
			AND   D.record_center_id = E.record_center_id(+)
			AND   D.cr_report_yyyy = E.cr_report_yyyy(+)
			AND   D.cr_report_org_cd = E.cr_report_org_cd(+)
			AND   D.creat_sys_cd = E.creat_sys_cd(+)
			AND   D.cr_report_sno = E.cr_report_sno(+)
			AND   D.record_center_id = H.record_center_id(+)
			AND   D.cr_report_yyyy = H.cr_report_yyyy(+)
			AND   D.cr_report_org_cd = H.cr_report_org_cd(+)
			AND   D.creat_sys_cd = H.creat_sys_cd(+)
			AND   D.cr_report_sno = H.cr_report_sno(+)
		) Z
		<dynamic prepend="WHERE">
		    <isNotEmpty prepend="AND" property="takeFlag">
				  Z.take_flag = #takeFlag:VARCHAR#
			</isNotEmpty>
		</dynamic>
		ORDER BY Z.cr_report_org_cd, Z.cr_report_org_nm, Z.creat_sys_cd
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		INSERT TB_TKMONITORINFO(모니터링 정보 생성 대상 조회)
	 -->
	<resultMap id="undTakeFolderPlan-result" class="rms.take.undTake.domain.TkOrgTakePlan">
		<result property="recordCenterId" 		column="record_center_id"/>
		<result property="takeYyyy" 			column="take_yyyy"/>
		<result property="takeOrgCd" 			column="take_org_cd"/>
		<result property="creatSysCd" 			column="creat_sys_cd"/>
		<result property="takeSno" 				column="take_sno"/>
	</resultMap>
	
	<select id="findUndTakeFolderPlan" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeFolderPlan-result">
		SELECT record_center_id, take_yyyy, take_org_cd, creat_sys_cd, take_sno
		FROM  TB_TKFOLDER
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
	</select>
	
	<!-- 
		INSERT TB_TKMONITORINFO(모니터링 정보 생성)
	 -->
	<insert id="createUndTakeMonitorInfo" parameterClass="rms.take.undTake.domain.TkMonitorInfo">
		INSERT INTO TB_TKMONITORINFO
		(
			record_center_id, monitor_id, monitor_div, period_from_dt, period_to_dt
			, org_cd, start_dtime, state, reg_dtime
		)
		(
		    SELECT B.record_center_id
				, B.monitor_id
				, #monitorDiv:VARCHAR# monitor_div
				, B.period_from_dt
				, B.period_to_dt
				, B.org_cd
				<!--cubrid insert, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') start_dtime-->
				, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS') start_dtime
				, #state:VARCHAR# state
				<!--cubrid insert, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') reg_dtime -->
				, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS') reg_dtime 
			FROM  TB_TKORGTAKEPLAN A
			    , TB_TKMONITORINFO B
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.take_yyyy = #takeYyyy:VARCHAR#
			AND   A.take_org_cd = #takeOrgCd:VARCHAR#
			AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
			AND   A.take_sno = #takeSno:NUMBER#
			AND   B.record_center_id = A.record_center_id
			AND   B.monitor_id = A.monitor_id
			AND   B.monitor_div = '01'
			AND   NOT EXISTS ( SELECT 1 FROM TB_TKMONITORINFO C
			                   WHERE C.record_center_id = B.record_center_id
			                   AND   C.monitor_id = B.monitor_id
						       AND   C.monitor_div = #monitorDiv:VARCHAR# )
		)
	</insert>
	
	<!-- 
		UPDATE TB_TKMONITORINFO(모니터링 검수 수량정보 등록)
	 -->
	<update id="updateUndTakeMonitorInfo03" parameterClass="rms.take.undTake.domain.TkMonitorInfo">
		UPDATE TB_TKMONITORINFO
		SET ( a0_cnt, a1_cnt, a2_cnt, a3_cnt, a4_cnt, file_cnt, state
			<isEqual property="state" compareValue="18">
				,  end_dtime
			</isEqual>
		)
		= (
			SELECT NVL(SUM(a0_cnt),0) a0_cnt
				, NVL(SUM(a1_cnt),0) a1_cnt
				, NVL(SUM(a2_cnt),0) a2_cnt
				, NVL(SUM(a3_cnt),0) a3_cnt
				, NVL(SUM(a4_cnt),0) a4_cnt
				, NVL(SUM(file_cnt),0) file_cnt
				, #state:VARCHAR# state
				<isEqual property="state" compareValue="18">
					<!--cubrid insert, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') end_dtime-->
					, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS') end_dtime
				</isEqual>
			FROM (
				(
					SELECT COUNT(1) a0_cnt, 0 a1_cnt, 0 a2_cnt, 0 a3_cnt, 0 a4_cnt, 0 file_cnt
					FROM  TB_TKFOLDER A
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					AND   A.take_yyyy = #takeYyyy:VARCHAR#
					AND   A.take_org_cd = #takeOrgCd:VARCHAR#
					AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
					AND   A.take_sno = #takeSno:NUMBER#
					AND   A.exam_rslt_cd IN ('1','2')
				)
				UNION ALL
				(
					SELECT 0 a0_cnt
						, DECODE(B.record_detl_type_cd,'01',1,0) a1_cnt
						, DECODE(B.record_detl_type_cd,'02',1,0) a2_cnt
						, DECODE(B.record_detl_type_cd,'04',1,0) a3_cnt
						, DECODE(B.record_detl_type_cd,'03',1,0) a4_cnt
						, 0 file_cnt
					FROM  TB_TKFOLDER A
					, TB_TKRECORD B
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					AND   A.take_yyyy = #takeYyyy:VARCHAR#
					AND   A.take_org_cd = #takeOrgCd:VARCHAR#
					AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
					AND   A.take_sno = #takeSno:NUMBER#
					AND   A.exam_rslt_cd IN ('1','2')
					AND   B.record_center_id = A.record_center_id
					AND   B.folder_take_seq = A.folder_take_seq
				)
				UNION ALL
				(
					SELECT 0 a0_cnt, 0 a1_cnt, 0 a2_cnt, 0 a3_cnt, 0 a4_cnt, COUNT(1) file_cnt
					FROM  TB_TKFOLDER A
					, TB_TKRECORD B
					, TB_TKATTACHFILE C
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					AND   A.take_yyyy = #takeYyyy:VARCHAR#
					AND   A.take_org_cd = #takeOrgCd:VARCHAR#
					AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
					AND   A.take_sno = #takeSno:NUMBER#
					AND   A.exam_rslt_cd IN ('1','2')
					AND   B.record_center_id = A.record_center_id
					AND   B.folder_take_seq = A.folder_take_seq
					AND   C.record_center_id = B.record_center_id
					AND   C.record_take_seq = B.record_take_seq
				)
			)
		)
		WHERE ( record_center_id, monitor_id, monitor_div )
		= (
			SELECT record_center_id, monitor_id, #monitorDiv:VARCHAR# monitor_div
			FROM  TB_TKORGTAKEPLAN
			WHERE record_center_id = #recordCenterId:VARCHAR#
			AND   take_yyyy = #takeYyyy:VARCHAR#
			AND   take_org_cd = #takeOrgCd:VARCHAR#
			AND   creat_sys_cd = #creatSysCd:VARCHAR#
			AND   take_sno = #takeSno:NUMBER#
		)
	</update>
	
	<!-- 
		UPDATE TB_TKMONITORINFO(모니터링 검수 수량정보 등록)
	 -->
	<update id="updateUndTakeMonitorInfo04" parameterClass="rms.take.undTake.domain.TkMonitorInfo">
		UPDATE TB_TKMONITORINFO
		SET ( a0_cnt, a1_cnt, a2_cnt, a3_cnt, a4_cnt, file_cnt, state
			<isEqual property="state" compareValue="21">
				,  end_dtime
			</isEqual>
		)
		= (
			SELECT NVL(SUM(a0_cnt),0) a0_cnt
				, NVL(SUM(a1_cnt),0) a1_cnt
				, NVL(SUM(a2_cnt),0) a2_cnt
				, NVL(SUM(a3_cnt),0) a3_cnt
				, NVL(SUM(a4_cnt),0) a4_cnt
				, NVL(SUM(file_cnt),0) file_cnt
				, #state:VARCHAR# state
				<isEqual property="state" compareValue="21">
					<!--cubrid update, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') end_dtime-->
					, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS') end_dtime
				</isEqual>
			FROM (
				(
					SELECT COUNT(1) a0_cnt, 0 a1_cnt, 0 a2_cnt, 0 a3_cnt, 0 a4_cnt, 0 file_cnt
					FROM  TB_TKFOLDER A
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					AND   A.take_yyyy = #takeYyyy:VARCHAR#
					AND   A.take_org_cd = #takeOrgCd:VARCHAR#
					AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
					AND   A.take_sno = #takeSno:NUMBER#
					AND   A.take_fin_flag = '1'
				)
				UNION ALL
				(
					SELECT 0 a0_cnt
						, DECODE(B.record_detl_type_cd,'01',1,0) a1_cnt
						, DECODE(B.record_detl_type_cd,'02',1,0) a2_cnt
						, DECODE(B.record_detl_type_cd,'04',1,0) a3_cnt
						, DECODE(B.record_detl_type_cd,'03',1,0) a4_cnt
						, 0 file_cnt
					FROM  TB_TKFOLDER A
					, TB_TKRECORD B
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					AND   A.take_yyyy = #takeYyyy:VARCHAR#
					AND   A.take_org_cd = #takeOrgCd:VARCHAR#
					AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
					AND   A.take_sno = #takeSno:NUMBER#
					AND   A.take_fin_flag = '1'
					AND   B.record_center_id = A.record_center_id
					AND   B.folder_take_seq = A.folder_take_seq
				)
				UNION ALL
				(
					SELECT 0 a0_cnt, 0 a1_cnt, 0 a2_cnt, 0 a3_cnt, 0 a4_cnt, COUNT(1) file_cnt
					FROM  TB_TKFOLDER A
					, TB_TKRECORD B
					, TB_TKATTACHFILE C
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					AND   A.take_yyyy = #takeYyyy:VARCHAR#
					AND   A.take_org_cd = #takeOrgCd:VARCHAR#
					AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
					AND   A.take_sno = #takeSno:NUMBER#
					AND   A.take_fin_flag = '1'
					AND   B.record_center_id = A.record_center_id
					AND   B.folder_take_seq = A.folder_take_seq
					AND   C.record_center_id = B.record_center_id
					AND   C.record_take_seq = B.record_take_seq
				)
			)
		)
		WHERE ( record_center_id, monitor_id, monitor_div )
		= (
			SELECT record_center_id, monitor_id, #monitorDiv:VARCHAR# monitor_div
			FROM  TB_TKORGTAKEPLAN
			WHERE record_center_id = #recordCenterId:VARCHAR#
			AND   take_yyyy = #takeYyyy:VARCHAR#
			AND   take_org_cd = #takeOrgCd:VARCHAR#
			AND   creat_sys_cd = #creatSysCd:VARCHAR#
			AND   take_sno = #takeSno:NUMBER#
		)
	</update>
	
	<select id="findTakeRecvFolderErrorItemCnt" parameterClass="rms.take.undTake.domain.TkOrgRecvError" resultClass="int">
		select count(1) from tb_tkfolder
		where record_center_id = #recordCenterId:VARCHAR#
		AND   take_yyyy = #takeYyyy:VARCHAR#
		AND   take_org_cd = #takeOrgCd:VARCHAR#
		AND   creat_sys_cd = #creatSysCd:VARCHAR#
		AND   take_sno = #takeSno:NUMBER#
		AND   error_flag = 'Y'
	</select>
	
	<select id="findTakeRecvRecordErrorItemCnt" parameterClass="rms.take.undTake.domain.TkOrgRecvError" resultClass="int">
		select count(1) 
		from tb_tkfolder a, tb_tkrecord b
		where a.record_center_id = #recordCenterId:VARCHAR#
		AND   a.record_center_id = b.record_center_id
		AND   a.folder_take_seq = b.folder_take_seq
		AND   a.take_yyyy = #takeYyyy:VARCHAR#
		AND   a.take_org_cd = #takeOrgCd:VARCHAR#
		AND   a.creat_sys_cd = #creatSysCd:VARCHAR#
		AND   a.take_sno = #takeSno:NUMBER#
		AND   b.error_flag = 'Y'
	</select>
	
	<select id="findTakeRecvAttachErrorItemCnt" parameterClass="rms.take.undTake.domain.TkOrgRecvError" resultClass="int">
		select count(1) 
		from tb_tkattachfile Z
		<!--cubrid where (a.record_center_id, A.record_take_seq)
		IN (
		    select b.record_center_id, b.record_take_seq -->
                where 
                EXISTS
                    ( select 1
		    from tb_tkfolder a, tb_tkrecord b
		    where a.record_center_id = #recordCenterId:VARCHAR#
		    and   a.record_center_id = b.record_center_id
		    and   a.folder_take_seq = b.folder_take_seq
		    and   a.take_yyyy = #takeYyyy:VARCHAR#
		    and   a.take_org_cd = #takeOrgCd:VARCHAR#
		    and   a.take_sno = #takeSno:NUMBER#
                    <!--cubrid-->
                    AND b.record_center_id = Z.record_center_id
     		    AND b.record_take_seq = Z.record_take_seq
		)
		AND Z.virus_flag = '1'               
	</select>
	
	
	<select id="countUndTakeRecvErrorList" parameterClass="rms.take.undTake.domain.TkOrgRecvError" resultClass="long">
		SELECT 	count(1)
		FROM 	tb_tkorgrecverror
		WHERE 	record_center_id 	= #recordCenterId:VARCHAR#
		AND		take_yyyy 			= #takeYyyy:VARCHAR#
		AND		take_org_cd			= #takeOrgCd:VARCHAR#
		AND		creat_sys_cd 		= #creatSysCd:VARCHAR#
		<dynamic>
			<isNotEqual prepend="and" property="takeSno" compareValue="0">
				take_sno			= #takeSno:NUMBER#
			</isNotEqual>
		</dynamic>
		AND 	recv_error_flag 	= #recvErrorFlag:VARCHAR#
		<isNotEmpty property="tabDiv">
			<isEqual prepend="AND" property="tabDiv" compareValue="1">
				<isEqual property="creatSysCd" compareValue="04">
					file_div_cd in ('A0', 'START', 'FILEEND')
				</isEqual>
				<isNotEqual property="creatSysCd" compareValue="04">
					file_div_cd in ('1','3','5') AND folder_clss_no IS NOT NULL
				</isNotEqual>
			</isEqual>
			<isEqual prepend="AND" property="tabDiv" compareValue="2">
				<isEqual property="creatSysCd" compareValue="04">
					file_div_cd in ('A1','A2','A3', 'A4')
				</isEqual>
				<isNotEqual property="creatSysCd" compareValue="04">
					file_div_cd in ('2','3','6') AND record_reg_no IS NOT NULL
				</isNotEqual>
			</isEqual>
			<isEqual prepend="AND" property="tabDiv" compareValue="3">
				<isEqual property="creatSysCd" compareValue="04">
					file_div_cd in ('EFILE')
				</isEqual>
				<isNotEqual property="creatSysCd" compareValue="04">
					file_div_cd in ('4')
				</isNotEqual>
			</isEqual>
		</isNotEmpty>
	</select>
	
	<select id="findUndTakeRecvErrorList" parameterClass="rms.take.undTake.domain.TkOrgRecvError" resultMap="findUndTakeRecvFaildList-result">
			SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
					SELECT 	take_yyyy
					      	,nvl(file_div_cd, '0') as file_div_cd
					      	<isNotEqual property="creatSysCd" compareValue="04">
					      	,(case when file_div_cd = '1' then '기록물철등록부'
					      	       when file_div_cd = '2' then '기록물등록대장'
					      	       when file_div_cd = '3' then '특수목록'
					      	       when file_div_cd = '4' then '전자파일'
					      	       when file_div_cd = '5' then '기록물철변경이력'
					      	       when file_div_cd = '6' then '기록물건변경이력'
					      	       else '-'
					      	  end) file_div_nm
					      	</isNotEqual>
					      	<isEqual property="creatSysCd" compareValue="04">
					      	,(CASE WHEN file_div_cd = 'START' THEN '이관시작파일'
					      		   WHEN file_div_cd = 'A0' THEN '단위과제관리카드'
					      	       WHEN file_div_cd = 'A1' THEN '문서관리카드'
					      	       WHEN file_div_cd = 'A2' THEN '메모보고'
					      	       WHEN file_div_cd = 'A3' THEN '지시사항'
					      	       WHEN file_div_cd = 'A4' THEN '회의·안건'
					      	       WHEN file_div_cd = 'FILEEND' THEN '단위과제별완료파일'
					      	       WHEN file_div_cd = 'EFILE' THEN '전자파일'
					      	  	   ELSE '-'
							END) file_div_nm
					      	</isEqual>
					      	,take_file_nm
					      	,to_number(nvl(trim(line_no), '0')) as line_no
					      	,folder_clss_no
					      	,folder_title
					      	,record_reg_no
					      	,record_title
					      	,replace(recv_error_rsn, CHR(10), '<![CDATA[<br/>]]>') recv_error_rsn
					FROM 	tb_tkorgrecverror
					WHERE 	record_center_id 	= #recordCenterId:VARCHAR#
					AND		take_yyyy 			= #takeYyyy:VARCHAR#
					AND		take_org_cd			= #takeOrgCd:VARCHAR#
					AND		creat_sys_cd 		= #creatSysCd:VARCHAR#
					<dynamic>
						<isNotEqual prepend="and" property="takeSno" compareValue="0">
							take_sno			= #takeSno:NUMBER#
						</isNotEqual>
					</dynamic>
					AND 	recv_error_flag 	= #recvErrorFlag:VARCHAR#
					<isNotEmpty property="tabDiv">
						<isEqual prepend="AND" property="tabDiv" compareValue="1">
							<isEqual property="creatSysCd" compareValue="04">
								file_div_cd in ('A0', 'START', 'FILEEND')
							</isEqual>
							<isNotEqual property="creatSysCd" compareValue="04">
								file_div_cd in ('1','3','5') AND folder_clss_no IS NOT NULL
							</isNotEqual>
						</isEqual>
						<isEqual prepend="AND" property="tabDiv" compareValue="2">
							<isEqual property="creatSysCd" compareValue="04">
								file_div_cd in ('A1','A2','A3', 'A4')
							</isEqual>
							<isNotEqual property="creatSysCd" compareValue="04">
								file_div_cd in ('2','3','6') AND record_reg_no IS NOT NULL
							</isNotEqual>
						</isEqual>
						<isEqual prepend="AND" property="tabDiv" compareValue="3">
							<isEqual property="creatSysCd" compareValue="04">
								file_div_cd in ('EFILE')
							</isEqual>
							<isNotEqual property="creatSysCd" compareValue="04">
								file_div_cd in ('4')
							</isNotEqual>
						</isEqual>
					</isNotEmpty>
					ORDER BY  NVL(file_div_cd, 0), line_no
				) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	
	
	<select id="countUndTakeReturnTrgtFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="long">
	    SELECT count(1)
	    FROM  TB_TKFOLDER A
	    WHERE A.record_center_id = #recordCenterId:VARCHAR#
	    AND   A.take_yyyy = #takeYyyy:VARCHAR#
	    AND   A.take_org_cd = #takeOrgCd:VARCHAR#
	    AND   A.creat_sys_cd = #creatSysCd:VARCHAR#
	    AND   A.take_sno = #takeSno:NUMBER#
	    <dynamic>
	    	<isNotEmpty prepend="AND" property="rjctFlag">
	    		A.rjct_flag = #rjctFlag:VARCHAR#
	    	</isNotEmpty>
	    </dynamic>
	</select>
	
	<select id="findUndTakeReturnTrgtFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeReturnTrgtFolder-result">
	SELECT C.*
    FROM (
        SELECT ROWNUM AS rnum
            , B.*
        FROM (
		SELECT folder_take_seq, clss_id, clss_nm, title, creat_yyyy
		     , presv_term_cd, presv_term_nm, erecord_flag, erecord_flag_nm
		     , error_flag, auto_check, rjct_flag, rjct_flag_nm
		     , record_cnt01, attach_cnt01, record_cnt03, attach_cnt03, take_fin_state_cd
		     , org_cd, folder_reg_seq, ho_no, creat_sys_cd
		FROM  (
		    SELECT A.folder_take_seq, A.clss_id, A.clss_nm, A.title, A.creat_yyyy, A.presv_term_cd
		         , (SELECT C.com_cd_nm
		            FROM TB_ZZCOMCD C
		            WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
		            AND   C.com_cd = A.presv_term_cd) presv_term_nm
		         , A.erecord_flag
		         , (SELECT C.com_cd_nm
		            FROM TB_ZZCOMCD C
		            WHERE C.com_type_cd = 'RD23'
		            AND   C.com_cd = A.erecord_flag) erecord_flag_nm
		         , A.error_flag
		         , DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) auto_check
		         , A.rjct_flag
		         , (SELECT Z.com_cd_nm 
		            FROM tb_zzcomcd Z 
		            WHERE Z.com_type_cd = 'RD29' 
		            AND Z.com_cd = A.rjct_flag) rjct_flag_nm
		         , (SELECT COUNT(1) 
		              FROM tb_tkrecord z 
		             WHERE Z.record_center_id = A.record_center_id 
		               AND Z.folder_take_seq = A.folder_take_seq) record_cnt01
		        , (SELECT COUNT(1) 
                   FROM  tb_tkrecord Z
                   WHERE Z.record_center_id = A.record_center_id
                   AND   Z.folder_take_seq = A.folder_take_seq
                   AND   Z.error_flag = 'Y') record_cnt03
		         , (SELECT COUNT(1) 
		            FROM tb_tkattachfile Z
		            <!--cubrid WHERE (Z.record_center_id, Z.record_take_seq) 
		            IN  (SELECT K.record_center_id, K.record_take_seq -->
		            WHERE
		            EXISTS  (SELECT 1
	                     FROM   tb_tkrecord K 
		                 WHERE  K.record_center_id = A.record_center_id 
						 AND    K.folder_take_seq = A.folder_take_seq
				<!--cubrid-->
				 AND K.record_center_id = Z.record_center_id
    				 AND K.record_take_seq = Z.record_take_seq)) attach_cnt01
		         ,  (select count(1) 
		              from tb_tkattachfile z 
		             <!--cubrid where (z.record_center_id, record_take_seq) 
		                in (select k.record_center_id, k.record_take_seq--> 
		             where 
		                exists (select 1
		                      from tb_tkrecord k 
		                     where k.record_center_id = a.record_center_id 
		                       and k.folder_take_seq = a.folder_take_seq
					<!--cubrid-->
				       and k.record_center_id = z.record_center_id
       				       and k.record_take_seq = z.record_take_seq)
		               and virus_flag = '1') attach_cnt03
		         , A.take_fin_state_cd
			     , org_cd, folder_reg_seq, ho_no, creat_sys_cd
		    FROM  TB_TKFOLDER A
		    WHERE A.record_center_id 	= #recordCenterId:VARCHAR#
		    AND   A.take_yyyy 			= #takeYyyy:VARCHAR#
		    AND   A.take_org_cd 		= #takeOrgCd:VARCHAR#
		    AND   A.creat_sys_cd 		= #creatSysCd:VARCHAR#
		    AND   A.take_sno 			= #takeSno:NUMBER#
		    <dynamic>
		    	<isNotEmpty prepend="AND" property="rjctFlag">
		    		A.rjct_flag = #rjctFlag:VARCHAR#
		    	</isNotEmpty>
		    </dynamic>
		)
		ORDER BY folder_take_seq
		 ) B
        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
    ) C
    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#  
	</select>
	
	<!-- 접수/반려이력 등록시 철 인수정보 조회 -->
	<select id="findTkFolderTakeInfo" parameterClass="rms.take.undTake.domain.UndTakeRjctFolder" resultMap="findTkFolderTakeInfo-result">
		SELECT take_yyyy, take_org_cd, take_sno, creat_sys_cd
		FROM tb_tkfolder
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #updateFolderTakeSeq:VARCHAR#
	</select>
	
	<select id="countFolderTakeHist" parameterClass="rms.take.undTake.domain.TkOrgTakePlan" resultClass="int">
		SELECT COUNT(1) FROM tb_tkfoldertakehist 
		WHERE record_center_id  = #recordCenterId:VARCHAR#
		AND   take_yyyy			= #takeYyyy:VARCHAR#
		AND   take_org_cd       = #takeOrgCd:VARCHAR#
		AND   take_sno   		= #takeSno:NUMBER#
		AND   creat_sys_cd      = #creatSysCd:VARCHAR#
		AND   folder_take_seq   = #folderTakeSeq:VARCHAR#
		AND   take_state_cd     IN ('02', '03')
	</select>
	
	<!-- 접수/반려 이력수정  -->
	<update id="updateFolderTakeHist" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		UPDATE  tb_tkfoldertakehist
		SET 	take_state_cd = #takeStateCd:VARCHAR#
			   ,rjct_cont     = (SELECT rjct_cont FROM tb_tkfolder WHERE record_center_id = #recordCenterId:VARCHAR# AND folder_take_seq = #folderTakeSeq:VARCHAR#)
		WHERE record_center_id 	= #recordCenterId:VARCHAR#
		AND   take_yyyy 		= #takeYyyy:VARCHAR#
		AND   take_org_cd		= #takeOrgCd:VARCHAR#
		AND   take_sno 			= #takeSno:NUMBER#
		AND   creat_sys_cd		= #creatSysCd:VARCHAR#
		AND   folder_take_seq   = #folderTakeSeq:VARCHAR#
		AND   take_state_cd    IN ('02', '03')
	</update>
	
	<!-- 접수/반려 이력등록  -->
	<insert id="insertFolderTakeHist" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		INSERT INTO TB_TKFOLDERTAKEHIST(
		    record_center_id,   folder_take_seq,    title, 			hist_sno,       	creat_sys_cd,
		    org_cd,				clss_div_cd,        clss_id,            creat_yyyy,     folder_reg_seq,
			ho_no,				take_org_cd,        take_yyyy,          take_sno,       take_state_cd,
			exam_cont, 			rjct_cont,			folder_err_flag,    record_err_cnt, record_tot_cnt,
		    file_err_cnt,   	file_tot_cnt,		reg_dtime, 			rjct_dtime
		)
		(
		    SELECT    record_center_id, folder_take_seq, title
                    ,(SELECT count(1)+1
                      FROM   tb_tkfoldertakehist Z
                      WHERE Z.record_center_id = K.record_center_id
                      AND   Z.creat_sys_cd     = K.creat_sys_cd
                      AND   Z.clss_id          = K.clss_id
                      AND   Z.creat_yyyy       = K.creat_yyyy
                      AND   Z.folder_reg_seq   = K.folder_reg_seq
                      AND   Z.ho_no            = K.ho_no) hist_sno
                    ,creat_sys_cd, org_cd, clss_div_cd, clss_id, creat_yyyy
                    ,folder_reg_seq, ho_no, take_org_cd, take_yyyy, take_sno
                    ,#takeStateCd:VARCHAR#
                    <dynamic>
                    	<isNotEmpty property="rjctFlag">
                    		<isEqual prepend=", " property="rjctFlag" compareValue="1">
			                    exam_cont
					            ||(CASE WHEN record_err_cnt > 0 THEN ', 건정보에 오류가있음' ELSE '' END)
					            ||(CASE WHEN file_err_cnt>0 THEN ', 전자파일에 오류(바이러스)가있음' ELSE '' END) exam_cont,			
                    			rjct_cont, folder_err_flag, record_err_cnt, record_tot_cnt, file_err_cnt, file_tot_cnt
                    		</isEqual>
	                    	<isNotEqual prepend=", " property="rjctFlag" compareValue="1">
	                    		'','', '0', 0, 0, 0, 0
	                    	</isNotEqual>
                    	</isNotEmpty>
                    	<isEmpty prepend=", " property="rjctFlag">
                    		'','', '0', 0, 0, 0, 0
                    	</isEmpty>
                    </dynamic>
                    , reg_dtime, rjct_dtime
		    FROM (
		        SELECT      A.record_center_id
                          ,A.folder_take_seq
                          ,MAX(A.title) title
                          ,MAX(A.creat_sys_cd) creat_sys_cd
                          ,MAX(A.org_cd) org_cd
                          ,MAX(A.clss_div_cd) clss_div_cd
                          ,MAX(A.clss_id) clss_id
                          ,MAX(A.creat_yyyy) creat_yyyy
                          ,MAX(A.folder_reg_seq) folder_reg_seq
                          ,MAX(A.ho_no) ho_no
                          ,MAX(A.take_org_cd) take_org_cd
                          ,MAX(A.take_yyyy) take_yyyy
                          ,MAX(A.take_sno) take_sno
                          ,MAX(A.exam_cont) exam_cont
                          ,(CASE WHEN MAX(a.error_flag) = 'Y' THEN '1'
                                 ELSE '0'
                            END) folder_err_flag
                          ,NVL(SUM(CASE WHEN B.error_flag = 'Y' THEN 1
                                        ELSE 0
                                   END), 0) record_err_cnt
                          ,MAX(A.rjct_cont) rjct_cont
                          ,COUNT(B.record_take_seq) record_tot_cnt
                          ,SUM((select COUNT(1) FROM tb_tkattachfile Z WHERE Z.record_center_id = B.record_center_id AND Z.record_take_seq = B.record_take_seq AND Z.virus_flag = '1')) file_err_cnt
                          ,SUM((select COUNT(1) FROM tb_tkattachfile Z WHERE Z.record_center_id = B.record_center_id AND Z.record_take_seq = B.record_take_seq)) file_tot_cnt
                          ,MAX(A.reg_dtime) reg_dtime
                          <dynamic>
	                    	<isNotEmpty property="rjctFlag">
	                    		<isEqual prepend=", " property="rjctFlag" compareValue="1">
				                   <!--cubrid insert to_char(sysdate, 'YYYYMMDDHH24MISS') rjct_dtime-->
				                   to_char(sys_datetime, 'YYYYMMDDHH24MISS') rjct_dtime
	                    		</isEqual>
		                    	<isNotEqual prepend=", " property="rjctFlag" compareValue="1">
		                    		'' rjct_dtime
		                    	</isNotEqual>
	                    	</isNotEmpty>
	                    	<isEmpty prepend=", " property="rjctFlag">
	                    		'' rjct_dtime
	                    	</isEmpty>
	                   	 </dynamic>
		        FROM  tb_tkfolder A
		            , tb_tkrecord B
		        WHERE   A.record_center_id  =   #recordCenterId:VARCHAR#
		        AND     A.folder_take_seq   =   #folderTakeSeq:VARCHAR#
		        AND     A.record_center_id  =   B.record_center_id
		        AND     A.folder_take_seq   =   B.folder_take_seq
		        AND     A.take_yyyy         =   #takeYyyy:VARCHAR#
		        AND     A.take_org_cd       =   #takeOrgCd:VARCHAR#
		        AND     A.creat_sys_cd      =   #creatSysCd:VARCHAR#
		        AND     A.take_sno          =   #takeSno:NUMBER#
		        <dynamic>
		        	<isEqual prepend="AND" property="rjctFlag" compareValue="1">
		        		A.rjct_flag = #rjctFlag:VARCHAR#
		        	</isEqual>
		        </dynamic>
		        GROUP BY A.record_center_id, A.folder_take_seq
		    ) K
		)
	</insert>
	<resultMap id="findTkFolderTakeHistInfrm-result" class="rms.take.undTake.domain.TkOrgTakePlan">
		<result property="takeYyyy" 	column="take_yyyy"/>
		<result property="takeOrgCd" 	column="take_org_cd"/>
		<result property="creatSysCd" 	column="creat_sys_cd"/>
		<result property="takeSno" 		column="take_sno"/>
	
	</resultMap>
	<select id="findTkFolderTakeHistInfrm" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="findTkFolderTakeHistInfrm-result">
		SELECT    A.take_yyyy
				, A.take_org_cd
				, A.creat_sys_cd
				, A.take_sno
		FROM TB_TKFOLDER A
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		AND	  A.folder_take_seq = #folderTakeSeq:VARCHAR#
	</select>
	
	<select id="countUndTakeRjctFolderList" parameterClass="rms.take.undTake.domain.TkOrgTakePlan" resultClass="long">
		SELECT   COUNT(1)
		FROM tb_tkfoldertakehist A
		WHERE A.record_center_id    = #recordCenterId:VARCHAR#
		<dynamic>
			<isNotEmpty prepend="AND" property="creatSysCd">
				A.creat_sys_cd 		= #creatSysCd:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="takeYyyy">
				A.take_yyyy           = #takeYyyy:VARCHAR#	
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="takeOrgCd">
				A.take_org_cd           = #takeOrgCd:VARCHAR#	
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="takeSno">
				<isNotEqual property="takeSno" compareValue="0">
					A.take_sno           = #takeSno:NUMBER#
				</isNotEqual>	
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="orgCd">
				A.org_cd 			= #orgCd:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="clssId">
				A.clss_id			= #clssId:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="creatYyyy">
				A.creat_yyyy		= #creatYyyy:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="folderRegSeq">
				A.folder_reg_seq	= #folderRegSeq:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="hoNo">
				A.ho_no				= #hoNo:VARCHAR#
			</isNotEmpty>
		</dynamic>
		AND   A.take_state_cd IN ('02', '03')
	
	</select>
	
	<select id="findUndTakeRjctFolderList" parameterClass="rms.take.undTake.domain.TkOrgTakePlan" resultMap="findUndTakeRjctFolderList-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT   A.record_center_id
		        ,A.folder_take_seq
		        ,A.creat_sys_cd
		        ,(SELECT Z.com_cd_nm FROM tb_zzcomcd Z WHERE Z.com_type_cd = 'RD17' AND Z.com_cd = A.creat_sys_cd) creat_sys_cd_nm
		        ,A.org_cd
		        ,A.clss_id
		        ,A.creat_yyyy
		        ,A.folder_reg_seq
		        ,A.ho_no
		        ,A.title
		        ,A.take_state_cd
		        ,(SELECT Z.com_cd_nm FROM tb_zzcomcd Z WHERE Z.com_type_cd = 'TK22' AND com_cd = A.take_state_cd) take_state_cd_nm
		        ,A.reg_dtime
		        ,A.folder_err_flag
		        ,(CASE WHEN A.folder_err_flag = '1' THEN 'Y' ELSE 'N' END) folder_err_flag_nm
		        ,exam_cont
		        ,rjct_cont
		        ,record_err_cnt record_cnt
		        ,file_err_cnt file_cnt
		FROM tb_tkfoldertakehist A
		WHERE A.record_center_id    = #recordCenterId:VARCHAR#
		<dynamic>
			<isNotEmpty prepend="AND" property="creatSysCd">
				A.creat_sys_cd 		= #creatSysCd:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="takeYyyy">
				A.take_yyyy           = #takeYyyy:VARCHAR#	
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="takeOrgCd">
				A.take_org_cd         = #takeOrgCd:VARCHAR#	
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="takeSno">
				<isNotEqual property="takeSno" compareValue="0">
					A.take_sno            = #takeSno:NUMBER#
				</isNotEqual>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="orgCd">
				A.org_cd 		  	  = #orgCd:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="clssId">
				A.clss_id			  = #clssId:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="creatYyyy">
				A.creat_yyyy		  = #creatYyyy:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="folderRegSeq">
				A.folder_reg_seq	  = #folderRegSeq:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="hoNo">
				A.ho_no				  = #hoNo:VARCHAR#
			</isNotEmpty>
		</dynamic>
		AND   A.take_state_cd IN ('02', '03')
		order by org_cd, clss_id, creat_yyyy, folder_reg_seq, ho_no, hist_sno
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<update id="updateFolderRecvReIsNull" parameterClass="rms.take.undTake.domain.TkOrgTakePlan">
		UPDATE tb_tkfolder Z set recv_re_flag = null
		<!--cubrid WHERE (record_center_id, org_cd, clss_id, creat_yyyy, folder_reg_seq, ho_no, take_sno) 
		  IN  	(
		  	SELECT record_center_id, org_cd, clss_id, creat_yyyy, folder_reg_seq, ho_no, take_sno-->
                where 
                EXISTS
                        (SELECT 1
			FROM   TB_TKFOLDER
			WHERE  record_center_id 	= #recordCenterId:VARCHAR#
			AND    take_yyyy 			= #takeYyyy:VARCHAR#
			AND    take_org_cd 			= #takeOrgCd:VARCHAR#
			AND    creat_sys_cd 		= #creatSysCd:VARCHAR#
			AND    take_sno 			= (#takeSno:NUMBER#-1)
			AND    recv_re_flag 		= '1'
                        <!--cubrid-->
                        AND record_center_id = Z.record_center_id
                        AND org_cd = Z.org_cd
                        AND clss_id = Z.clss_id
                        AND creat_yyyy = Z.creat_yyyy
                        AND folder_reg_seq = Z.folder_reg_seq
                        AND ho_no = Z.ho_no
                        AND take_sno = Z.take_sno
			)
	</update>

	<!-- 
		기록물철 전자/비전자여부 조회
	 -->
	<select id="findUndTakeCheckFolderTakeErecordFlag" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="string">
		SELECT 'O' 
		FROM  tb_rdfolder 
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_id = #folderId:VARCHAR#
		AND   erecord_flag IN ('2','3')
	</select>
	
	<!-- 
		비전자기록물철 인수관리정보 등록
	 -->
	<insert id="createUndTakeCheckFolderTakeErecord" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
	INSERT INTO tb_rdfolder_nonelect(record_center_id, folder_id, take_plan_yyyy, take_fin_div_cd, non_erecord_reg_cnt, take_off_rsn, reg_dtime)
	(
	    SELECT record_center_id
	          ,#folderId:VARCHAR#
	          ,take_plan_yyyy
	          ,'0'
	          ,(SELECT COUNT(1) 
	              FROM tb_tkrecord Z 
	             WHERE Z.record_center_id = A.record_center_id 
	               AND Z.folder_take_seq = A.folder_take_seq 
	               AND erecord_flag = '2') non_erecord_reg_cnt
	          ,take_off_rsn
	          <!--cubrid ,TO_CHAR(sysdate, 'YYYYMMDDHH24MISS') reg_dtime-->
	          ,TO_CHAR(sys_datetime, 'YYYYMMDDHH24MISS') reg_dtime
	     from tb_tkfolder_nonelect A
	     where a.record_center_id = #recordCenterId:VARCHAR#
	     AND   a.folder_take_seq = #folderTakeSeq:VARCHAR#
	)
	</insert>
	<!-- 
		비전자기록물철 인수관리정보 수정
	 -->
	<update id="updateUndTakeCheckFolderTakeErecord" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE tb_rdfolder_nonelect
		   SET take_plan_yyyy = #takePlanYyyy:VARCHAR#
		      <!--cubrid ,reg_dtime =  TO_CHAR(sysdate, 'YYYYMMDDHH24MISS')-->
		      ,reg_dtime =  TO_CHAR(sys_datetime, 'YYYYMMDDHH24MISS')
		 WHERE record_center_id = #recordCenterId:VARCHAR#
		   AND folder_id = #folderId:VARCHAR#
	</update>
	
	<!-- 
		비전자기록물건 인수관리정보 등록
	 -->
	<insert id="createUndTakeCheckNonElectFolderList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO tb_rdrecord_nonelect (record_center_id, record_id, take_fin_div_cd, take_imposs_div_cd, take_imposs_rsn, reg_dtime)
		(
		    SELECT record_center_id
		          ,record_id
		          ,'0' take_fin_div_cd
		          ,'' take_imposs_div_cd
		          ,'' take_imposs_rsn
		          <!--cubrid,TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') reg_dtime -->
		          ,TO_CHAR(sys_datetime, 'YYYYMMDDHH24MISS') reg_dtime 
		    FROM   tb_rdrecord 
		    where  record_center_id 	= #recordCenterId:VARCHAR#
		    AND    folder_id 		    = #folderId:VARCHAR#
		    AND    erecord_flag 		= '2'
		)
	</insert>
	
	<select id="findTakeFinFlag" parameterClass="rms.take.undTake.domain.UndTakePlanFolder" resultClass="int"> 
		SELECT count(1)
		FROM tb_tkfolder A
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		AND A.take_yyyy = #takeYyyy:VARCHAR#
		AND A.take_org_cd = #takeOrgCd:VARCHAR"#
		AND A.creat_sys_cd = #creatSysCd:VARCHAR"#
		AND A.rjct_flag = '0'
		AND A.erecord_flag IN ('2', '3')
		AND A.take_sno IN (SELECT B.take_sno 
		                   FROM tb_tkorgtakeplan B
		                   WHERE B.record_center_id = A.record_center_id
		                   AND B.take_yyyy = A.take_yyyy
		                   AND B.take_org_cd = A.take_org_cd
		                   AND B.creat_sys_cd = A.creat_sys_cd
		                   AND B.parent_take_sno = (SELECT C.parent_take_sno 
		                                            FROM tb_tkorgtakeplan C 
		                                            WHERE C.record_center_id = B.record_center_id
		                                            AND C.take_yyyy = B.take_yyyy
		                                            AND C.take_org_cd = B.take_org_cd
		                                            AND C.creat_sys_cd = B.creat_sys_cd
		                                            AND C.take_sno = #takeSno:NUMBER"#))
	</select>
	
	<select id="countUndTakeRecvVirusCheckHistList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="long"> 
		SELECT COUNT(*)
		  FROM
		       (SELECT AA.RECORD_CENTER_ID ,
		              AA.CREAT_SYS_CD ,
		              AA.ORG_CD ,
		              AA.CREAT_YYYY ,
		              AC.DOC_TYPE_CD ,
		              AC.DOC_TYPE_SNO ,
		              DECODE(AB.CREAT_SYS_CD, '02', AB.CREAT_REG_NO, '05', AB.CREAT_REG_NO, DECODE(AB.RECORD_DETL_TYPE_CD, '01', DECODE(NVL(AB.DOC_NO, ''), '', AB.CREAT_SYS_RECORD_ID, AB.DOC_NO), AB.CREAT_SYS_RECORD_ID)) AS CREAT_REG_NO ,
		              AB.DTCH_REG_NO ,
		              AA.FOLDER_TAKE_SEQ ,
		              AB.RECORD_TAKE_SEQ ,
		              AA.TITLE AS FOLDER_TITLE ,
		              AB.TITLE AS RECORD_TITLE ,
		              AC.REG_SEQ ,
		              AC.FILE_NM ,
		              AB.RECORD_SNO ,
		              AB.CREAT_REG_DTIME ,
		              AB.CREAT_REG_NO AS CREAT_REG_NO_1,
		              AC.ATTACH_FILE_TYPE
		         FROM TB_TKFOLDER AA ,
		              TB_TKRECORD AB ,
		              TB_TKATTACHFILE AC
		        WHERE AA.RECORD_CENTER_ID = AB.RECORD_CENTER_ID
		              AND AA.FOLDER_TAKE_SEQ = AB.FOLDER_TAKE_SEQ
		              AND AB.RECORD_CENTER_ID = AC.RECORD_CENTER_ID
		              AND AB.RECORD_TAKE_SEQ = AC.RECORD_TAKE_SEQ
		              AND AA.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		              AND AA.FOLDER_TAKE_SEQ = #folderTakeSeq:VARCHAR#
		       ) A ,
		       TB_TKVIRUSCHECK B
		 WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
		       AND B.RECORD_TAKE_SEQ=A.RECORD_TAKE_SEQ
		       AND B.REG_SEQ=A.REG_SEQ
		       AND B.ATTACH_FILE_TYPE=A.ATTACH_FILE_TYPE
		       AND A.CREAT_REG_NO IS NOT NULL
		<isNotEmpty prepend="AND" property="virusInfectionFlag">
				  B.virus_infection_flag  = #virusInfectionFlag:VARCHAR#
		</isNotEmpty>	
	</select>
	
	<resultMap id="findUndTakeRecvVirusCheckHistList-result" class="rms.take.undTake.domain.UndTakeVirusCheskHist">
		<result property="rowIdx1"                   column="row_idx1"                  />
		<result property="rowCnt1"                   column="row_cnt1"                  />
		<result property="rowIdx2"                   column="row_idx2"                  />
		<result property="rowCnt2"                   column="row_cnt2"                  />
		<result property="rowIdx3"                   column="row_idx3"                  />
		<result property="rowCnt3"                   column="row_cnt3"                  />
		<result property="recordCenterId"            column="record_center_id"          />
		<result property="folderTakeSeq"             column="folder_take_seq"           />
		<result property="folderTitle"               column="folder_title"              />
		<result property="recordTakeSeq"             column="record_take_seq"           />
		<result property="recordTitle"               column="record_title"              />
		<result property="docTypeCd"                 column="doc_type_cd"               />
		<result property="docTypeNm"                 column="doc_type_nm"               />
		<result property="docTypeSno"                column="doc_type_sno"              />
		<result property="fileNm"                    column="file_nm"                   />
		<result property="virusCheckDtime"           column="virus_check_dtime"         />
		<result property="virusCheckFlag"            column="virus_check_flag"          />
		<result property="virusCheckFlagNm"          column="virus_check_flag_nm"       />
		<result property="virusInfectionFlag"        column="virus_infection_flag"      />
		<result property="virusInfectionFlagNm"      column="virus_infection_flag_nm"   />
		<result property="virusInfectionDtime"       column="virus_infection_dtime"     />
		<result property="virusInfectionCont"        column="virus_infection_cont"      />
		<result property="virusCleanFlag"            column="virus_clean_flag"          />
		<result property="virusCleanFlagNm"          column="virus_clean_flag_nm"       />
		<result property="virusCleanDtime"           column="virus_clean_dtime"         />
		<result property="virusCleanApplyFlag"       column="virus_clean_apply_flag"    />
		<result property="virusCleanApplyFlagNm"     column="virus_clean_apply_flag_nm" />
		<result property="virusCleanApplyDtime"      column="virus_clean_apply_dtime"   />
		<result property="regSeq"                    column="reg_seq"                   />
	</resultMap>
	<select id="findUndTakeRecvVirusCheckHistList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="findUndTakeRecvVirusCheckHistList-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.*
	        FROM (
		SELECT ROW_NUMBER() OVER(PARTITION BY A.RECORD_TAKE_SEQ ORDER BY A.DOC_TYPE_CD, A.REG_SEQ, B.VIRUS_HIST_SEQ) AS ROW_IDX1 ,
		       COUNT(*) OVER(PARTITION BY A.RECORD_TAKE_SEQ) AS ROW_CNT1 ,
		       ROW_NUMBER() OVER(PARTITION BY A.RECORD_TAKE_SEQ, A.DOC_TYPE_CD ORDER BY A.DOC_TYPE_CD, A.REG_SEQ, B.VIRUS_HIST_SEQ) AS ROW_IDX2 ,
		       COUNT(*) OVER(PARTITION BY A.RECORD_TAKE_SEQ, A.DOC_TYPE_CD) AS ROW_CNT2 ,
		       ROW_NUMBER() OVER(PARTITION BY A.RECORD_TAKE_SEQ, A.DOC_TYPE_CD, A.REG_SEQ ORDER BY A.DOC_TYPE_CD, A.REG_SEQ, B.VIRUS_HIST_SEQ) AS ROW_IDX3 ,
		       COUNT(*) OVER(PARTITION BY A.RECORD_TAKE_SEQ, A.DOC_TYPE_CD, A.REG_SEQ) AS ROW_CNT3 ,
		       A.RECORD_CENTER_ID ,
		       A.FOLDER_TAKE_SEQ ,
		       A.FOLDER_TITLE ,
		       A.RECORD_TAKE_SEQ ,
		       A.RECORD_TITLE ,
		       A.DOC_TYPE_CD ,
		       Z.COM_CD_NM AS DOC_TYPE_NM ,
		       A.DOC_TYPE_SNO ,
		       A.FILE_NM ,
		       B.VIRUS_CHECK_DTIME ,
		       B.VIRUS_CHECK_FLAG ,
		       DECODE(B.VIRUS_CHECK_FLAG, '1', 'O', 'X') AS VIRUS_CHECK_FLAG_NM ,
		       B.VIRUS_INFECTION_FLAG ,
		       DECODE(B.VIRUS_INFECTION_FLAG, '1', 'O', 'X') AS VIRUS_INFECTION_FLAG_NM ,
		       B.VIRUS_INFECTION_DTIME ,
		       B.VIRUS_INFECTION_CONT ,
		       B.VIRUS_CLEAN_FLAG ,
		       DECODE(B.VIRUS_CLEAN_FLAG, '1', '치료', '2', '치료불가', '-') AS VIRUS_CLEAN_FLAG_NM ,
		       B.VIRUS_CLEAN_DTIME ,
		       B.VIRUS_CLEAN_APPLY_FLAG ,
		       DECODE(B.VIRUS_CLEAN_APPLY_FLAG, '1', '반영', '2', '미반영', '-') AS VIRUS_CLEAN_APPLY_FLAG_NM ,
		       B.VIRUS_CLEAN_APPLY_DTIME ,
		       A.REG_SEQ
		  FROM
		       (SELECT AA.RECORD_CENTER_ID ,
		              AA.CREAT_SYS_CD ,
		              AA.ORG_CD ,
		              AA.CREAT_YYYY ,
		              AC.DOC_TYPE_CD ,
		              AC.DOC_TYPE_SNO ,
		              DECODE(AB.CREAT_SYS_CD, '02', AB.CREAT_REG_NO, '05', AB.CREAT_REG_NO, DECODE(AB.RECORD_DETL_TYPE_CD, '01', DECODE(NVL(AB.DOC_NO, ''), '', AB.CREAT_SYS_RECORD_ID, AB.DOC_NO), AB.CREAT_SYS_RECORD_ID)) AS CREAT_REG_NO ,
		              AB.DTCH_REG_NO ,
		              AA.FOLDER_TAKE_SEQ ,
		              AB.RECORD_TAKE_SEQ ,
		              AA.TITLE AS FOLDER_TITLE ,
		              AB.TITLE AS RECORD_TITLE ,
		              AC.REG_SEQ ,
		              AC.FILE_NM ,
		              AB.RECORD_SNO ,
		              AB.CREAT_REG_DTIME ,
		              AB.CREAT_REG_NO AS CREAT_REG_NO_1,
		              AC.ATTACH_FILE_TYPE
		         FROM TB_TKFOLDER AA ,
		              TB_TKRECORD AB ,
		              TB_TKATTACHFILE AC
		        WHERE AA.RECORD_CENTER_ID = AB.RECORD_CENTER_ID
		              AND AA.FOLDER_TAKE_SEQ = AB.FOLDER_TAKE_SEQ
		              AND AB.RECORD_CENTER_ID = AC.RECORD_CENTER_ID
		              AND AB.RECORD_TAKE_SEQ = AC.RECORD_TAKE_SEQ
		              AND AA.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		              AND AA.FOLDER_TAKE_SEQ = #folderTakeSeq:VARCHAR#
		       ) A ,
		       TB_TKVIRUSCHECK B ,
		       (SELECT COM_CD,
		              COM_CD_NM
		         FROM TB_ZZCOMCD
		        WHERE COM_TYPE_CD = 'RD21'
		       ) Z
		 WHERE A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
		       AND B.RECORD_TAKE_SEQ=A.RECORD_TAKE_SEQ
		       AND B.REG_SEQ=A.REG_SEQ
		       AND B.ATTACH_FILE_TYPE=A.ATTACH_FILE_TYPE
		       AND A.CREAT_REG_NO IS NOT NULL
		       AND A.DOC_TYPE_CD = Z.COM_CD
				<isNotEmpty prepend="AND" property="virusInfectionFlag">
								 B.virus_infection_flag  = #virusInfectionFlag:VARCHAR#
				</isNotEmpty>
		ORDER BY A.RECORD_CENTER_ID ,
		       A.FOLDER_TAKE_SEQ ,
		       A.RECORD_SNO ,
		       A.CREAT_REG_DTIME ,
		       A.CREAT_REG_NO_1 ,
		       A.DOC_TYPE_CD ,
		       A.DOC_TYPE_SNO ,
		       B.VIRUS_HIST_SEQ		
		        ) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<select id="findUndTakeFolderName" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="java.lang.String">
		SELECT A.title FROM TB_TKFOLDER A WHERE A.record_center_id = #recordCenterId:VARCHAR# AND A.folder_take_seq = #folderTakeSeq:VARCHAR#
	</select>
	
	
	<resultMap id="undTakeRecvExcel-result" class="rms.take.undTake.domain.UndTakeRecv">
		<result property="takeOrgNm" 			column="TAKE_ORG_NM"/>
		<result property="creatSysCdNm" 		column="CREAT_SYS_CD_NM"/>
		<result property="takeStateDivCdNm" 	column="TAKE_STATE_DIV_CD_NM"/>
		<result property="rjctHistCnt" 			column="RJCT_HIST_CNT"/>
		<result property="folderCnt01" 			column="FOLDER_CNT01"/>
		<result property="folderCnt02" 			column="FOLDER_CNT02"/>
		<result property="folderCnt03" 			column="FOLDER_CNT03"/>
	</resultMap>
	
	<!-- 
		기록물인수>연계인수>연계인수>접수처리 (SELECT)
		엑셀저장 
	 -->
	<select id="findExcelUndTakeRecvNewPagedList" parameterClass="rms.take.undTake.domain.UndTakeRecv" resultMap="undTakeRecvExcel-result">
		SELECT C.*
    FROM (
        SELECT ROWNUM AS rnum
            , B.*
        FROM (
		SELECT Z.take_org_abbr_nm || '(' || Z.take_org_cd  ||')' AS TAKE_ORG_NM
			, Z.creat_sys_cd_nm AS CREAT_SYS_CD_NM
			, Z.take_state_div_cd_nm AS TAKE_STATE_DIV_CD_NM
			, rjct_hist_cnt AS RJCT_HIST_CNT
			, Z.recv_folder_cnt || '/' || Z.recv_record_cnt || '/' || Z.recv_attach_cnt AS FOLDER_CNT01
			, nvl((z.folder_cnt01-z.folder_cnt03), 0) || '/' || nvl((z.record_cnt01-z.record_cnt03), 0) || '/' || nvl((z.attach_cnt01-z.attach_cnt03), 0) AS FOLDER_CNT02
			, nvl(z.folder_cnt03, 0) || '/' || nvl(z.record_cnt03, 0) || '/' || nvl(z.attach_cnt03, 0) AS FOLDER_CNT03
        FROM (
            SELECT A.record_center_id
                , A.org_cd AS take_org_cd
                , A.org_nm AS take_org_nm
                , A.org_abbr_nm AS take_org_abbr_nm
                , A.creat_sys_cd
                , (SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='RD17' AND com_cd=A.creat_sys_cd) creat_sys_cd_nm
                , #takeYyyy:VARCHAR# take_yyyy
                , B.take_sno
                , B.parent_take_sno
                , NVL(B.take_state_div_cd,DECODE(A.take_sched_set_state,'1','02','3','02','01')) take_state_div_cd
                , (CASE WHEN B.take_sno != B.parent_take_sno AND B.take_state_div_cd = '04' THEN '재접수완료'
                        ELSE (NVL((SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='TK08' AND com_cd=B.take_state_div_cd)
                                ,DECODE(A.take_sched_set_state,'1','일정수립완료','3','일정수립완료','일정미수립')))
                   END) take_state_div_cd_nm
                , NVL(B.recv_fin_state_cd,'0') recv_fin_state_cd
                , DECODE(B.recv_fin_state_cd,'1','접수중','2','접수실패','3','접수완료','4','접수대기','미접수') recv_fin_state_cd_nm
                , NVL(B.recv_folder_cnt,0) AS recv_folder_cnt
                , NVL(B.recv_record_cnt,0) AS recv_record_cnt
                , NVL(B.recv_attach_cnt,0) AS recv_attach_cnt
                , B.recv_ymd
                , (SELECT MAX(D.recv_ymd) 
                	 FROM TB_TKORGTAKEPLAN D 
                	WHERE D.record_center_id = B.record_center_id
                      AND D.take_yyyy        = B.take_yyyy
                      AND D.take_org_cd      = B.take_org_cd
                      AND D.creat_sys_cd     = B.creat_sys_cd
                      AND D.parent_take_sno  = B.parent_take_sno) max_recv_ymd
                , NVL(recv_folder_cnt, 0) as folder_cnt01
            	, NVL(recv_folder_err_cnt, 0) as folder_cnt03
            	, NVL(recv_record_cnt, 0) as record_cnt01
            	, NVL(recv_record_err_cnt, 0) as record_cnt03    
            	, NVL(recv_attach_cnt, 0) as attach_cnt01 
            	, NVL(recv_attach_err_cnt, 0) as attach_cnt03
            	,(SELECT COUNT(1) 
            		FROM TB_TKFOLDER D
               	   WHERE D.record_center_id	= B.record_center_id
                	 AND D.take_yyyy		= B.take_yyyy
                	 AND D.take_org_cd		= B.take_org_cd
                	 AND D.creat_sys_cd		= B.creat_sys_cd
                	 AND D.take_sno			= B.take_sno
                	 AND D.rjct_flag = '1') folder_cnt04
            	,(SELECT COUNT(1) FROM TB_TKFOLDER D
                   WHERE D.record_center_id=B.record_center_id
                	 AND D.take_yyyy			= B.take_yyyy
                	 AND D.take_org_cd			= B.take_org_cd
                	 AND D.creat_sys_cd			= B.creat_sys_cd
                	 AND D.take_sno				= B.take_sno
                	 AND D.take_fin_flag = '1') folder_cnt05
            	,(SELECT COUNT(1) 
					FROM tb_tkfoldertakehist D
				   <!--cubrid WHERE (D.record_center_id, D.creat_sys_cd, D.org_cd, D.clss_id, D.creat_yyyy, D.folder_reg_seq, D.ho_no, D.take_sno) -->
				   WHERE 
				   	  EXISTS (
				    		<!--SELECT S.record_center_id, S.creat_sys_cd, S.org_cd, S.clss_id, S.creat_yyyy, S.folder_reg_seq, S.ho_no, S.take_sno-->
				    		SELECT 1
				    		  FROM TB_TKFOLDER S
				    		 WHERE S.record_center_id  	= B.record_center_id
				    		   AND S.take_yyyy          = B.take_yyyy
				    		   AND S.take_org_cd        = B.take_org_cd
				    		   AND S.creat_sys_cd       = B.creat_sys_cd
				    		   AND S.take_sno           = B.take_sno
				    		   AND S.reg_dtime			= D.reg_dtime
						   <!--cubrid-->
						   AND S.record_center_id = D.record_center_id
						   AND S.creat_sys_cd = D.creat_sys_cd
						   AND S.org_cd = D.org_cd
						   AND S.clss_id = D.clss_id
						   AND S.creat_yyyy = D.creat_yyyy
						   AND S.folder_reg_seq = D.folder_reg_seq
						   AND S.ho_no = D.ho_no
						   AND S.take_sno = D.take_sno
						)
	 				 AND take_state_cd IN ('02','03')
            	 ) rjct_hist_cnt
            	 ,(SELECT 	MAX(D.reg_dtime) 
            	     FROM 	tb_tkfolder D
            	    WHERE 	D.record_center_id = B.record_center_id
            	      AND	D.take_yyyy			= B.take_yyyy
            	      AND	D.take_org_cd 		= B.take_org_cd
            	      AND 	D.creat_sys_cd		= B.creat_sys_cd
            	      AND	D.take_sno			= B.take_sno
            	   ) reg_dtime
            	   ,(SELECT count(1)
            	     FROM 	tb_tkfolder D
            	    WHERE 	D.record_center_id = B.record_center_id
            	      AND	D.take_yyyy			= B.take_yyyy
            	      AND	D.take_org_cd 		= B.take_org_cd
            	      AND 	D.creat_sys_cd		= B.creat_sys_cd
            	      AND	D.take_sno			= B.take_sno
            	      AND   D.recv_re_flag 		= '1'
            	   ) recv_re_flag
           FROM (
					SELECT A.record_center_id, A.org_cd, A.org_nm, A.org_abbr_nm, B.creat_sys_cd, C.take_sched_set_state
					FROM TB_STORG A
					, TB_STLINKTRGT B
					, (SELECT record_center_id,take_org_cd,take_sched_set_state
					    FROM TB_TKORGTAKESCHED WHERE take_yyyy = #takeYyyy:VARCHAR#) C
					WHERE A.record_center_id = #recordCenterId:VARCHAR#
					<isNotEmpty prepend="AND" property="takeOrgCd">
						  A.org_cd = #takeOrgCd:VARCHAR#
					</isNotEmpty>
				    <isNotEmpty prepend="AND" property="closeFlag">
						  A.close_flag = #closeFlag:VARCHAR#
					</isNotEmpty>
					AND  A.link_trgt_id = B.link_trgt_id
					<isNotEmpty prepend="AND" property="creatSysCd">
						  B.creat_sys_cd = #creatSysCd:VARCHAR#
					</isNotEmpty>
					AND  A.record_center_id = C.record_center_id(+)
					AND  A.org_cd = C.take_org_cd(+)
				) A
				, (
					SELECT *
					FROM TB_TKORGTAKEPLAN
					WHERE record_center_id = #recordCenterId:VARCHAR#
					AND   take_yyyy = #takeYyyy:VARCHAR#
					<isNotEmpty prepend="AND" property="takeOrgCd">
						  take_org_cd = #takeOrgCd:VARCHAR#
					</isNotEmpty>
					<isNotEmpty prepend="AND" property="creatSysCd">
						  creat_sys_cd = #creatSysCd:VARCHAR#
					</isNotEmpty>
					AND	  (app_take_type_cd is null OR app_take_type_cd = '0')
				) B
			WHERE A.record_center_id = B.record_center_id(+)
			AND   A.org_cd = B.take_org_cd(+)
			AND   A.creat_sys_cd = B.creat_sys_cd(+)
			) Z
		<dynamic prepend="WHERE">
		    <isNotEmpty prepend="AND" property="examStateDiv">
				  Z.take_state_div_cd = #examStateDiv:VARCHAR#
			</isNotEmpty>
		    <isNotEmpty prepend="AND" property="recvFinStateCd">
				  Z.recv_fin_state_cd = #recvFinStateCd:VARCHAR#
			</isNotEmpty>
		</dynamic>
		ORDER BY Z.record_center_id, Z.max_recv_ymd desc nulls last,  Z.take_org_cd, Z.creat_sys_cd DESC,  Z.take_state_div_cd_nm desc, Z.take_sno desc
		        	 ) B
        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
    ) C
    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		반려처리(기록물철 반려팝업(철목록)) 엑셀저장
	 -->
	 
	 <resultMap id="undTakeReturnTrgtFolderExcel-result" class="rms.take.undTake.domain.UndTakeCheckFolder">
		<result property="clssNm" 				column="clss_nm"/>
		<result property="title" 				column="title"/>
		<result property="creatYyyy" 			column="creat_yyyy"/>
		<result property="presvTermNm" 			column="presv_term_nm"/>
		<result property="rjctFlagNm" 			column="rjct_flag_nm"/>
		<result property="autoCheck" 			column="auto_check"/>
		<result property="recordCnt01"			column="record_cnt01"/>
		<result property="attachCnt01"			column="attach_cnt01"/>
	</resultMap>
	
	<select id="findExcelUndTakeReturnTrgtFolderPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeReturnTrgtFolderExcel-result">
	SELECT C.*
    FROM (
        SELECT ROWNUM AS rnum
            , B.*
        FROM (
		SELECT clss_nm
				, title
				, creat_yyyy
				, presv_term_nm
				, rjct_flag_nm
				, auto_check
				, record_cnt03 || '/' || record_cnt01 AS record_cnt01
				, attach_cnt03 || '/' || attach_cnt01 AS attach_cnt01
		FROM  (
		    SELECT A.folder_take_seq, A.clss_id, A.clss_nm, A.title, A.creat_yyyy, A.presv_term_cd
		         , (SELECT C.com_cd_nm
		            FROM TB_ZZCOMCD C
		            WHERE C.com_type_cd = DECODE(A.creat_sys_cd,'02','RD57','RD07')
		            AND   C.com_cd = A.presv_term_cd) presv_term_nm
		         , A.erecord_flag
		         , (SELECT C.com_cd_nm
		            FROM TB_ZZCOMCD C
		            WHERE C.com_type_cd = 'RD23'
		            AND   C.com_cd = A.erecord_flag) erecord_flag_nm
		         , A.error_flag
		         , DECODE(A.error_flag,'Y','X',DECODE(NVL(A.virus_dtime,''),'','X',DECODE(A.virus_flag,'1','X','O'))) auto_check
		         , A.rjct_flag
		         , (SELECT Z.com_cd_nm 
		            FROM tb_zzcomcd Z 
		            WHERE Z.com_type_cd = 'RD29' 
		            AND Z.com_cd = A.rjct_flag) rjct_flag_nm
		         , (SELECT COUNT(1) 
		              FROM tb_tkrecord z 
		             WHERE Z.record_center_id = A.record_center_id 
		               AND Z.folder_take_seq = A.folder_take_seq) record_cnt01
		        , (SELECT COUNT(1) 
                   FROM  tb_tkrecord Z
                   WHERE Z.record_center_id = A.record_center_id
                   AND   Z.folder_take_seq = A.folder_take_seq
                   AND   Z.error_flag = 'Y') record_cnt03
		         , (SELECT COUNT(1) 
		            FROM tb_tkattachfile Z
		            <!--cubrid WHERE (Z.record_center_id, Z.record_take_seq) -->
		            WHERE 
		            <!--cubrid IN  (SELECT K.record_center_id, K.record_take_seq -->
		            EXISTS  (SELECT 1
	                     FROM   tb_tkrecord K 
		                 WHERE  K.record_center_id = A.record_center_id 
						 AND    K.folder_take_seq = A.folder_take_seq
						<!--cubrid-->
						 AND    K.record_center_id = Z.record_center_id
						 AND    K.record_take_seq = Z.record_take_seq)) attach_cnt01
		         ,  (select count(1) 
		              from tb_tkattachfile z 
		             <!--cubrid where (z.record_center_id, z.record_take_seq)-->
		             where
		                <!--cubrid in (select k.record_center_id, k.record_take_seq -->
		                exists (select 1
		                      from tb_tkrecord k 
		                     where k.record_center_id = a.record_center_id 
		                       and k.folder_take_seq = a.folder_take_seq
		                       <!--cubrid-->
				                   and k.record_center_id = z.record_center_id
				                   and k.rocord_take_seq = z.record_take_seq
				       )
		               	       and virus_flag = '1'
					) attach_cnt03
		         , A.take_fin_state_cd
			     , org_cd, folder_reg_seq, ho_no, creat_sys_cd
		    FROM  TB_TKFOLDER A
		    WHERE A.record_center_id 	= #recordCenterId:VARCHAR#
		    AND   A.take_yyyy 			= #takeYyyy:VARCHAR#
		    AND   A.take_org_cd 		= #takeOrgCd:VARCHAR#
		    AND   A.creat_sys_cd 		= #creatSysCd:VARCHAR#
		    AND   A.take_sno 			= #takeSno:NUMBER#
		    <dynamic>
		    	<isNotEmpty prepend="AND" property="rjctFlag">
		    		A.rjct_flag = #rjctFlag:VARCHAR#
		    	</isNotEmpty>
		    </dynamic>
		)
		ORDER BY folder_take_seq
		 ) B
        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
    ) C
    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#  
	</select>
	
	<!-- 
		기록물인수>연계인수>연계인수>검수처리 (SELECT) 엑셀저장
	 -->
	 
	 <resultMap id="undTakeCheckExcel-result" class="rms.take.undTake.domain.UndTakeCheck">
		<result property="takeOrgAbbrNm" 		column="TAKE_ORG_ABBR_NM"/>
		<result property="creatSysCdNm" 		column="CREAT_SYS_CD_NM"/>
		<result property="takeStateDivCdNm" 	column="TAKE_STATE_DIV_CD_NM"/>
		<result property="folderCnt01" 			column="FOLDER_CNT01"/>
		<result property="folderCnt02" 			column="FOLDER_CNT02"/>
		<result property="folderCnt03" 			column="FOLDER_CNT03"/>
		<result property="folderCnt04" 			column="FOLDER_CNT04"/>
		<result property="folderCnt05" 			column="FOLDER_CNT05"/>
	</resultMap>
	
	<select id="findExcelUndTakeCheckPagedList" parameterClass="rms.take.undTake.domain.UndTakeCheck" resultMap="undTakeCheckExcel-result">
	SELECT C.*
	    FROM (
	        SELECT ROWNUM AS rnum
	            , B.take_org_abbr_nm
	            , B.creat_sys_cd_nm
	            , B.take_state_div_cd_nm
	            , B.folder_cnt01 || '(' || B.record_cnt01 || ')' AS folder_cnt01
	            , B.folder_cnt02 || '(' || B.record_cnt02 || ')' AS folder_cnt02
	            , B.folder_cnt03 || '(' || B.record_cnt03 || ')' AS folder_cnt03
	            , B.folder_cnt04 || '(' || B.record_cnt04 || ')' AS folder_cnt04
	            , B.folder_cnt05 || '(' || B.record_cnt05 || ')' AS folder_cnt05
	        FROM (
		SELECT Z.record_center_id
		      ,Z.take_yyyy
		      ,Z.take_org_cd
		      ,Z.creat_sys_cd
		      ,Z.take_sno
		      ,Z.take_state_div_cd
		      ,(SELECT org_nm FROM TB_STORG WHERE record_center_id=Z.record_center_id AND org_cd=Z.take_org_cd) take_org_nm
		      ,(SELECT org_abbr_nm FROM TB_STORG WHERE record_center_id=Z.record_center_id AND org_cd=Z.take_org_cd) take_org_abbr_nm
		      ,(SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='RD17' AND com_cd=Z.creat_sys_cd) creat_sys_cd_nm
		      ,(SELECT com_cd_nm FROM TB_ZZCOMCD WHERE com_type_cd='TK08' AND com_cd=Z.take_state_div_cd) take_state_div_cd_nm
		      ,Z.recv_folder_cnt
		      ,Z.recv_record_cnt
		      ,Z.virus_check_flag
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 1, 10)) folder_cnt01
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 12, 10)) folder_cnt02
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 23, 10)) folder_cnt03
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 34, 10)) folder_cnt04
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 45, 10)) folder_cnt05
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 56, 10)) folder_cnt06
		      ,TO_NUMBER(SUBSTR(Z.folder_info, 67, 10)) folder_cnt07
		      ,TO_NUMBER(SUBSTR(Z.record_info, 1, 10)) record_cnt01
		      ,TO_NUMBER(SUBSTR(Z.record_info, 12, 10)) record_cnt02
		      ,TO_NUMBER(SUBSTR(Z.record_info, 23, 10)) record_cnt03
		      ,TO_NUMBER(SUBSTR(Z.record_info, 34, 10)) record_cnt04
		      ,TO_NUMBER(SUBSTR(Z.record_info, 45, 10)) record_cnt05
		      ,TO_NUMBER(SUBSTR(Z.record_info, 56, 10)) record_cnt06
		      ,TO_NUMBER(SUBSTR(Z.record_info, 67, 10)) record_cnt07
		      ,erecord_flag_cnt
		FROM (
		    SELECT   B.record_center_id
		           , B.take_yyyy
		           , B.take_org_cd
		           , B.creat_sys_cd
		           , B.parent_take_sno
		           , B.take_sno
		           , B.recv_folder_cnt
		           , B.recv_record_cnt 
		           , (SELECT Z.take_state_div_cd FROM tb_tkorgtakeplan Z WHERE Z.record_center_id = B.record_center_id AND Z.take_yyyy = B.take_yyyy AND Z.take_org_cd = B.take_org_cd AND Z.creat_sys_cd = B.creat_sys_cd AND Z.take_sno = B.take_sno) take_state_div_cd
		           , (SELECT Z.virus_check_flag FROM tb_tkorgtakeplan Z WHERE Z.record_center_id = B.record_center_id AND Z.take_yyyy = B.take_yyyy AND Z.take_org_cd = B.take_org_cd AND Z.creat_sys_cd = B.creat_sys_cd AND Z.take_sno = B.take_sno) virus_check_flag
		           ,  ( SELECT LPAD(COUNT(1),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.exam_rslt_cd, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.exam_rslt_cd, '2', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.rjct_flag, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_flag, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_state_cd, '0', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_state_cd, '3', 1, 0)),0),10,'0')
		                        FROM TB_TKFOLDER C
		                        WHERE C.record_center_id    = B.record_center_id
		                        AND   C.take_yyyy           = B.take_yyyy
		                        AND   C.take_org_cd         = B.take_org_cd
		                        AND   C.creat_sys_cd        = B.creat_sys_cd
		                        AND   C.take_sno            IN (SELECT Z.take_sno 
		                                                        FROM tb_tkorgtakeplan Z 
		                                                        WHERE Z.record_center_id = B.record_center_id 
		                                                        AND Z.take_yyyy = B.take_yyyy 
		                                                        AND Z.take_org_cd = B.take_org_cd 
		                                                        AND Z.creat_sys_cd = B.creat_sys_cd
		                                                        AND Z.parent_take_sno = B.parent_take_sno)
		                        AND   C.recv_re_flag  is null
		                        ) AS folder_INfo
		            , ( SELECT LPAD(COUNT(1),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.exam_rslt_cd, '1',1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.exam_rslt_cd, '2', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.rjct_flag, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_flag, '1', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_state_cd, '0', 1, 0)),0),10,'0')
		                            ||'/'||LPAD(NVL(SUM(DECODE(C.take_fIN_state_cd, '3', 1, 0)),0),10,'0')
		                        FROM  TB_TKFOLDER C
		                            , TB_TKRECORD D
		                        WHERE C.record_center_id    = B.record_center_id
		                        AND   C.take_yyyy           = B.take_yyyy
		                        AND   C.take_org_cd         = B.take_org_cd
		                        AND   C.creat_sys_cd        = B.creat_sys_cd
		                        AND   C.take_sno            IN (SELECT Z.take_sno 
		                                                        FROM tb_tkorgtakeplan Z 
		                                                        WHERE Z.record_center_id = B.record_center_id 
		                                                        AND Z.take_yyyy = B.take_yyyy 
		                                                        AND Z.take_org_cd = B.take_org_cd 
		                                                        AND Z.creat_sys_cd = B.creat_sys_cd
		                                                        AND Z.parent_take_sno = B.parent_take_sno)
		                        AND   C.recv_re_flag is null
		                        AND   D.record_center_id    = C.record_center_id
		                        AND   D.folder_take_seq     = C.folder_take_seq) AS record_INfo
		            , ( SELECT count(1) 
                       FROM   tb_tkfolder X 
                       WHERE  X.record_center_id = B.record_center_id
                       AND    X.take_yyyy = B.take_yyyy
                       AND    X.take_org_cd = B.take_org_cd
                       AND    X.creat_sys_cd = B.creat_sys_cd 
                       AND    X.take_sno     IN (SELECT Z.take_sno 
                                                                FROM tb_tkorgtakeplan Z 
                                                                WHERE Z.record_center_id = B.record_center_id 
                                                                AND Z.take_yyyy = B.take_yyyy 
                                                                AND Z.take_org_cd = B.take_org_cd 
                                                                AND Z.creat_sys_cd = B.creat_sys_cd
                                                                AND Z.parent_take_sno = B.parent_take_sno)
                       AND X.erecord_flag in ('2','3')
                       AND recv_re_flag is null) erecord_flag_cnt
                     ,B.take_ymd
                     ,B.reg_dtime
		    FROM (SELECT  A.record_center_id
		                , A.take_yyyy
		                , A.take_org_cd 
		                , A.creat_sys_cd
		                , A.parent_take_sno parent_take_sno
		                , MAX(A.take_sno) take_sno
		                , SUM(A.recv_folder_cnt) recv_folder_cnt
		                , SUM(A.recv_record_cnt) recv_record_cnt
		                , MAX(A.take_ymd) take_ymd
                     	, MAX(A.reg_dtime) reg_dtime
		          FROM tb_tkorgtakeplan A
		          WHERE A.record_center_id = #recordCenterId:VARCHAR#
		          AND   A.take_yyyy = #takeYyyy:VARCHAR#
		          AND   A.take_org_cd  IN (SELECT B.org_cd
		                                   FROM TB_STORG B, TB_STLINKTRGT C
		                                   WHERE B.record_center_id = #recordCenterId:VARCHAR#
		                                   AND   B.lINk_trgt_id=C.lINk_trgt_id
		                                   <isNotEmpty prepend="AND" property="takeOrgCd">
		                                      B.org_cd = #takeOrgCd:VARCHAR#
		                                   </isNotEmpty>
		                                   <isNotEmpty prepend="AND" property="creatSysCd">
		                                      C.creat_sys_cd = #creatSysCd:VARCHAR#
		                                   </isNotEmpty>
		                                  )
		          <isNotEmpty prepend="AND" property="creatSysCd">
		                A.creat_sys_cd = #creatSysCd:VARCHAR#
		          </isNotEmpty>
		          AND   A.recv_fin_state_cd = '3'
		          <isNotEmpty prepend="AND" property="examStateDiv">
		                A.take_state_div_cd = #examStateDiv:VARCHAR#
		          </isNotEmpty>                                    
		          AND  (A.app_take_type_cd is null OR A.app_take_type_cd = '0')
		          GROUP BY record_center_id, creat_sys_cd, take_yyyy, take_org_cd, parent_take_sno 
		    ) B
		)Z
		ORDER BY Z.record_center_id, Z.take_ymd DESC, Z.reg_dtime DESC, Z.take_yyyy, Z.take_org_cd, Z.creat_sys_cd, Z.take_sno
		) B
	        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
	    ) C
	    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
	</select>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-1.기록물철) (INSERT)
	 -->	 
	<update id="updateUndTakeCheckFolderTakeDclssfyFolder" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_RDFOLDER A
		SET  A.expt_disuse_yyyy =  DECODE( GREATEST(TO_NUMBER(A.presv_term_cd),19), 19, (TO_NUMBER(DECODE(A.creat_sys_cd,'01',A.creat_yyyy,'04',A.creat_yyyy,NVL(SUBSTR(A.FOLDER_CLOSE_DTIME,0,4),A.CREAT_YYYY)))+1+TO_NUMBER(A.presv_term_cd)) )
 		   , A.expt_transf_yyyy = (CASE WHEN A.folder_type_div_cd = '3' OR A.folder_type_div_cd = '4'
				                       	     THEN DECODE( LEAST(TO_NUMBER(A.presv_term_cd),20), 20, (TO_NUMBER(DECODE(A.creat_sys_cd,'01',A.creat_yyyy,'04',A.creat_yyyy,NVL(SUBSTR(A.FOLDER_CLOSE_DTIME,0,4),A.CREAT_YYYY)))+5) )
				                             ELSE DECODE( LEAST(TO_NUMBER(A.presv_term_cd),20), 20, (TO_NUMBER(DECODE(A.creat_sys_cd,'01',A.creat_yyyy,'04',A.creat_yyyy,NVL(SUBSTR(A.FOLDER_CLOSE_DTIME,0,4),A.CREAT_YYYY)))+10) )
				                             END
				  	                   )
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
      	AND A.folder_id = #folderId:VARCHAR#		
	</update>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-2.기록물철 관계정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyFolderRel" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERREL
		(
		    record_center_id, folder_id, rel_type_cd, rel_seq, rel_trgt_id
		    , rel_descr, reg_dtime
		)
		(
			SELECT B.record_center_id
			     , B.folder_id
			     , A.rel_type_cd
			     , A.rel_seq
			     , A.rel_trgt_id
			     , A.rel_descr
			     <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
			     , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_RDFOLDERREL A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_id = B.folder_id
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_id = #folderId:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-4.기록물철 목적분류) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyFolderPjtClss" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERPJTCLSS
		(
		    record_center_id, folder_id, sno, pjt_clss_id
		)
		(
			SELECT B.record_center_id, B.folder_id, A.sno, A.pjt_clss_id
			FROM TB_RDFOLDERPJTCLSS A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_id = B.folder_id
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_id = #folderId:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>	
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-5.기록물철 인수인계정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyFolderTaketakovr" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERTAKETAKOVR
		(
		    record_center_id, folder_id, sno, take_takovr_div_cd, take_takovr_creat_dtime
			, take_takovr_org_cd, take_takovr_org_nm, reg_dtime, take_takovr_clss_id, take_takovr_creat_yyyy
			, take_takovr_folder_id, take_takovr_folder_title, take_takovr_folder_reg_seq, take_takovr_ho_no
		)
		(
			SELECT B.record_center_id, B.folder_id, A.sno, A.take_takovr_div_cd, A.take_takovr_creat_dtime
				 <!--cubrid, A.take_takovr_org_cd, A.take_takovr_org_nm, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), A.take_takovr_clss_id, A.take_takovr_creat_yyyy-->
                                 , A.take_takovr_org_cd, A.take_takovr_org_nm, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), A.take_takovr_clss_id, A.take_takovr_creat_yyyy
				 , A.take_takovr_folder_id, A.take_takovr_folder_title, A.take_takovr_folder_reg_seq, A.take_takovr_ho_no
			FROM TB_RDFOLDERTAKETAKOVR A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_id = B.folder_id
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_id = #folderId:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-6.기록물철 변경이력정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyFolderChngHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDFOLDERCHNGHIST
		(
		    record_center_id, folder_id, chng_hist_no, org_cd, clss_id
			, creat_yyyy, folder_reg_seq, ho_no, title_bef, title_aft
			, folder_type_div_cd_bef, folder_type_div_cd_aft, chng_ymd, chng_rsn, chng_user_nm
			, reg_dtime
		)
		(
			SELECT B.record_center_id, B.folder_id, A.chng_hist_no, A.org_cd, A.clss_id
				 , A.creat_yyyy, A.folder_reg_seq, A.ho_no, A.title_bef, A.title_aft
				 , A.folder_type_div_cd_bef, A.folder_type_div_cd_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm
				 <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
				 , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_RDFOLDERCHNGHIST A
			   , TB_RDFOLDER B
			WHERE A.record_center_id = B.record_center_id
			AND   A.folder_id = B.folder_id
			AND   B.record_center_id = #recordCenterId:VARCHAR#
			AND   B.folder_id = #folderId:VARCHAR#
			AND   B.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-7-1.기록물철 특수목록) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeDclssfyFolderSpclList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeCheckFolderTakeFolderSpclList-result">
		SELECT record_center_id
		     , folder_take_seq
		     , seq
		     , spcl_list1
		     , spcl_list2
		     , spcl_list3
		FROM  TB_RDSPCLLIST
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_take_seq = #folderTakeSeq:VARCHAR#
		AND   spcl_list_loc = '1'
		ORDER BY record_center_id, folder_take_seq, seq
	</select>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-7-2.기록물철 특수목록) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyFolderSpclList" parameterClass="rms.take.undTake.domain.TkSpclList">
		INSERT INTO TB_RDFOLDERKEYWD
		(
		    record_center_id, folder_id, keywd_levl, keywd, reg_dtime
		)
		(
			SELECT record_center_id
			     , folder_id
			     , '1'
			     , #spclList1:VARCHAR#
			     <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                             , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM  TB_RDFOLDER
			WHERE record_center_id = #recordCenterId:VARCHAR#
			AND   folder_take_seq = #folderTakeSeq:VARCHAR#
			AND   mig_flag = '0'
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-등록된 기록물철ID 조회) (SELECT)
	 -->	
	<select id="findUndTakeCheckFolderTakeDclssfyFolderId" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="string">
		SELECT folder_id
		FROM  TB_RDFOLDER
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_id = #folderId:VARCHAR#
	</select>	
	
	<!-- 
		비밀해제기록물 기록물철 전자/비전자여부 조회
	 -->
	<select id="findUndTakeCheckFolderTakeDclssfyErecordFlag" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="string">
		SELECT 'O' 
		FROM  tb_rdfolder 
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_id = #folderId:VARCHAR#
		AND   erecord_flag IN ('2','3')
	</select>	
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-9.기록물건) (INSERT)
	 -->	 
	<update id="updateUndTakeCheckFolderTakeDclssfyRecord" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
	   UPDATE TB_RDRECORD   AAA 
	   <!--cubrid SET  reg_dtime = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
           SET  reg_dtime = TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
	   WHERE
	   <!--CUBRID
	   ( record_center_id, record_id ) 
	   IN  
	   ( 
	     SELECT A.record_center_id, A.record_id 
	  -->
	  EXISTS (SELECT 1
	     FROM TB_RDRECORD A
	        , TB_RDFOLDER B
	     WHERE A.record_center_id = B.record_center_id
	     AND   A.folder_id = B.folder_id
	     AND   A.orign_id is null 
	     AND   B.record_center_id = #recordCenterId:VARCHAR#
	     AND   B.folder_id = #folderId:VARCHAR#
	     AND AAA.record_center_id = A.record_center_id
	     AND AAA.record_id = A.record_id
	   )		
	</update>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-10.기록물건 관계정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyRecordRel" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDREL
		(
			record_center_id, record_id, rel_type_cd, rel_seq, rel_trgt_id
			, rel_descr, reg_dtime
		)
		(
			SELECT B.record_center_id, B.record_id, A.rel_type_cd, A.rel_seq, A.rel_trgt_id
				 <!--cubrid, A.rel_descr, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                                 , A.rel_descr, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_RDRECORDREL A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_id = B.record_id
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   B.orign_id is null 
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_id = #folderId:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>	
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-12.기록물건 정보출처) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyRecordInfoSrc" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDINFOSRC
		(
			record_center_id, record_id, info_src_type_cd, info_src_sno, info_src_title
			, info_src_id, reg_dtime
		)
		(
			SELECT B.record_center_id, B.record_id, A.info_src_type_cd, A.info_src_sno, A.info_src_title
				 <!--cubrid, A.info_src_id, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                                 , A.info_src_id, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_RDRECORDINFOSRC A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_id = B.record_id
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   B.orign_id is null
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_id = #folderId:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-12.기록물건 변경이력정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyRecordChngHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDCHNGHIST
		(
			record_center_id, record_id, chng_hist_no, org_cd, creat_yyyy
			, creat_reg_no, dtch_reg_no, creat_reg_ymd_bef, creat_reg_ymd_aft, title_bef
			, title_aft, page_cnt_bef, page_cnt_aft, aprov_pos_rank_bef, aprov_pos_rank_aft
			, duty_chrgr_bef, duty_chrgr_aft, enforc_ymd_bef, enforc_ymd_aft, recver_bef
			, recver_aft, chng_ymd, chng_rsn, chng_user_nm, reg_dtime
		)
		(
			SELECT B.record_center_id, B.record_id, A.chng_hist_no, A.org_cd, A.creat_yyyy
				 , A.creat_reg_no, A.dtch_reg_no, A.creat_reg_ymd_bef, A.creat_reg_ymd_aft, A.title_bef
				 , A.title_aft, A.page_cnt_bef, A.page_cnt_aft, A.aprov_pos_rank_bef, A.aprov_pos_rank_aft
				 , A.duty_chrgr_bef, A.duty_chrgr_aft, A.enforc_ymd_bef, A.enforc_ymd_aft, A.recver_bef
				 <!--cubrid, A.recver_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                                 , A.recver_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_RDRECORDCHNGHIST A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_id = B.record_id
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   B.orign_id is null
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_id = #folderId:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>	
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-13.기록물건 수정이력정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyRecordOpenHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_RDRECORDOPENHIST
		(
			RECORD_CENTER_ID, RECORD_ID, CHNG_HIST_NO, OPEN_DIV_CD, OPEN_LIMIT_PART
			, PART_OPEN_RSN, OPEN_LIMIT_DATE, CHNG_DTIME, CHNG_RSN, CHNG_USER_NM
		)
		(
			SELECT B.RECORD_CENTER_ID, B.RECORD_ID, A.CHNG_HIST_NO, A.OPEN_DIV_CD, A.OPEN_LIMIT_PART
				 , A.PART_OPEN_RSN, A.OPEN_LIMIT_DATE, A.CHNG_DTIME, A.CHNG_RSN, A.CHNG_USER_NM
			FROM TB_RDRECORDOPENHIST A
			   , TB_RDRECORD B
			   , TB_RDFOLDER C
			WHERE A.record_center_id = B.record_center_id
			AND   A.record_id = B.record_id
			AND   B.record_center_id = C.record_center_id
			AND   B.folder_id = C.folder_id
			AND   B.mig_flag = '0'
			AND   B.orign_id is null
			AND   C.record_center_id = #recordCenterId:VARCHAR#
			AND   C.folder_id = #folderId:VARCHAR#
			AND   C.mig_flag = '0'
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-14.원문엔진 등록할 기록물건목록 조회) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeDclssfyRecordList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultMap="undTakeCheckFolderTakeRecordList-result">
		SELECT B.record_center_id
			 , B.record_id
		     , B.erecord_flag
		     , B.record_take_seq
		FROM TB_RDFOLDER A
		   , TB_RDRECORD B
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		AND   A.folder_id = #folderId:VARCHAR#
		AND   A.record_center_id = B.record_center_id
		AND   A.folder_id = B.folder_id
		<!-- AND   B.reg_dtime is null -->
		AND   B.orign_id is null
	</select>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-13-2.기록물건 특수목록 등록 키워드 조회) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeDclssfyRecordSpclList" parameterClass="rms.take.undTake.domain.UndTakeRecord" resultMap="undTakeCheckFolderTakeRecordSpclList-result">
	    SELECT A.record_center_id
			 , A.record_take_seq
			 , A.seq
			 , A.spcl_list1
			 , A.spcl_list2
			 , A.spcl_list3
		FROM  TB_RDSPCLLIST A
	        , TB_RDRECORD B
		WHERE A.record_center_id = B.Record_Center_Id
	    AND   A.record_take_seq = B.record_take_seq 
	    AND   A.record_center_id = #recordCenterId:VARCHAR#
		AND   A.record_take_seq = #recordTakeSeq:VARCHAR#
		AND   A.spcl_list_loc = '2'
	    <!-- AND   B.orign_id is null -->
	    AND   B.reg_dtime is null
		ORDER BY A.record_center_id, A.record_take_seq, A.seq		
	</select>	
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-13-3.기록물건 특수목록) (INSERT)
	 -->
	<insert id="createUndTakeCheckFolderTakeDclssfyRecordSpclList" parameterClass="rms.take.undTake.domain.TkSpclList">
		INSERT INTO TB_RDRECORDKEYWD
		(
		    record_center_id, record_id, keywd_levl, keywd, reg_dtime
		)
		(
			SELECT record_center_id
			     , record_id
			     , '1'
			     , #spclList1:VARCHAR#
			     <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                             , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
			FROM TB_RDRECORD
			WHERE record_center_id = #recordCenterId:VARCHAR#
			AND   record_take_seq = #recordTakeSeq:VARCHAR#
			AND   mig_flag = '0'
			AND   orign_id is null
		)
	</insert>	
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-15.원문엔진 등록할 파일목록 조회) (SELECT)
	 -->
	<select id="findUndTakeCheckFolderTakeDclssfyAttachList" parameterClass="rms.take.undTake.domain.UndTakeRecord" resultMap="undTakeCheckFolderTakeAttachList-result">
		SELECT B.doc_type_cd
			 , B.attach_file_path
			 , B.file_nm
			 , B.agent_nm
			 , B.ver
			 , NVL(B.attach_file_page_cnt,0) attach_file_page_cnt
			 , NVL(B.file_size,0) file_size
			 , B.attach_file_mng_info
			 , B.virus_flag
		FROM TB_RDRECORD A
		   , TB_RDATTACHFILE B
		WHERE A.record_center_id = #recordCenterId:VARCHAR#
		AND   A.record_id = #recordId:VARCHAR#
		AND   A.record_center_id = B.record_center_id
		AND   A.record_take_seq = B.record_take_seq
		AND   A.orign_id is null
	</select>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-16.기록물건 원문ID 갱신) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderTakeDclssfyRecordOrign" parameterClass="rms.take.undTake.domain.UndTakeRecord">
		UPDATE TB_RDRECORD
		SET   orign_id = #orignId:VARCHAR#
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   record_id = #recordId:VARCHAR#
	</update>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-17.기록물건 인수완료) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderTakeDclssfyRecordFin" parameterClass="rms.take.undTake.domain.UndTakeRecord">
		UPDATE TB_RDRECORD
		<!--cubrid SET   reg_dtime = TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                SET   reg_dtime = TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   record_id = #recordId:VARCHAR#
	</update>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-18.기록물철 인수완료) (UPDATE)
	 -->
	<update id="updateUndTakeCheckFolderTakeDclssfyFolderFin" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		UPDATE TB_RDFOLDER
		SET   folder_keep_state_cd = '01'
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_id = #folderId:VARCHAR#
	</update>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-기록물철 생산시스템 구분 확인) (SELECT)
	 -->
	<select id="findUndTakeCheckDclssfyFolderCreatSysCd" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder" resultClass="string">
		SELECT creat_sys_cd
		FROM  TB_RDFOLDER
		WHERE record_center_id = #recordCenterId:VARCHAR#
		AND   folder_id = #folderId:VARCHAR#
	</select>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-19.생산현황등록-생산현황보고접수) (INSERT)
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatReport" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRREPORT
		(
		    record_center_id, cr_report_yyyy, cr_report_org_cd, creat_sys_cd, cr_report_sno
		    , state_div_cd, reg_dtime
		)
		(
		   SELECT A.record_center_id
			    , A.take_yyyy
			    , A.take_org_cd
			    , A.creat_sys_cd
			    , NVL(MAX((SELECT C.cr_report_sno 
			               FROM TB_CRREPORT C 
			               WHERE C.record_center_id = A.record_center_id 
			               AND C.cr_report_yyyy = A.take_yyyy 
			               AND C.cr_report_org_cd = A.take_org_cd 
			               AND C.creat_sys_cd = A.creat_sys_cd 
			               )), 0) + 1 as cr_report_sno
			    , DECODE(A.creat_sys_cd,'03','08','06') as creat_sys_cd
			    <!--cubrid , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') as reg_dtime-->
                            , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS') as reg_dtime
			FROM  TB_RDFOLDER A 
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_id = #folderId:VARCHAR#
			AND NOT EXISTS (
			    SELECT folder_take_seq
			    FROM TB_CRREPORT B 
			    WHERE B.record_center_id = A.record_center_id
			    AND   B.cr_report_yyyy = A.take_yyyy
			    AND   B.cr_report_org_cd = A.take_org_cd
			    AND   B.creat_sys_cd = A.creat_sys_cd
			    AND   B.cr_report_infrm_flag = '0'
			)
			GROUP BY A.record_center_id, A.take_yyyy, a.take_org_cd, a.creat_sys_cd, a.take_yyyy_sno, a.creat_sys_cd
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-20.생산현황등록-생산현황보고 기록물철) (INSERT)
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatFolder" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		<selectKey resultClass="string" keyProperty="takeSno">
			SELECT (SELECT MAX(B.cr_report_sno) 
					FROM TB_CRREPORT B 
					WHERE B.record_center_id = A.record_center_id 
					AND B.cr_report_yyyy 	 = A.take_yyyy 
					AND B.cr_report_org_cd 	 = A.take_org_cd 
					AND B.creat_sys_cd 		 = A.creat_sys_cd 
					AND cr_report_infrm_flag = '0') AS "takeSno" 
			FROM  TB_RDFOLDER a 
			WHERE A.record_center_id = #recordCenterId:VARCHAR#
			AND   A.folder_id = #folderId:VARCHAR#
		</selectKey>
		INSERT INTO TB_CRFOLDER
		(
		    record_center_id, folder_recv_seq, org_cd, cr_report_yyyy, cr_report_org_cd
		    , creat_sys_cd, cr_report_sno, clss_div_cd, clss_id, creat_yyyy
		    , folder_reg_seq, ho_no, clss_nm, title, sub_title
		    , folder_type_div_cd, etc_folder_type, folder_detl_type_cd, creat_purps, media_format
		    , medium, folder_size, record_tot_page_cnt, record_reg_cnt, efile_cnt
		    , new_div_cd, chng_flag, old_folder_creat_org_nm, old_folder_clss_no, folder_bispjt_div_cd
		    , bis_clss_path_nm, pjt_clss_path_nm, folder_start_dtime, folder_close_dtime, funsh_end_dtime
		    , funsh_rsn, presv_term_cd, presv_term_fix_rsn, presv_method_cd, presv_area_cd
		    , presv_loc, presv_duty_chrgr_nm, secu_clss_cd, secu_clss_rsn, read_range
		    , take_takovr_div_cd, take_takovr_org_cd, take_takovr_clss_id, take_takovr_creat_yyyy, take_takovr_folder_reg_seq
		    , take_takovr_ho_no, take_takovr_ymd, creat_user_id, creat_user_nm, creat_user_org_cd
		    , creat_user_org_nm, creat_user_pos_rank_nm, creat_dtime, erecord_flag, creat_sys_folder_id
		    , error_flag, exam_rslt_cd, exam_cont, rjct_flag, rjct_cont
		    , take_fin_flag, cr_report_infrm_flag, reg_dtime, group_presv_term_cd, folder_take_seq
		    , sumry, trans_dtime
		)
		(
		    SELECT record_center_id
		        , TO_CHAR(SYSDATE,'YYYY')||LPAD((TB_CRFOLDER_SQ01.nextval), 15, '0')
		        , org_cd, take_yyyy, take_org_cd
		        , creat_sys_cd, #takeSno:NUMBER#, clss_div_cd, clss_id, creat_yyyy
		        , folder_reg_seq, ho_no, clss_nm, title, sub_title
		        , folder_type_div_cd, etc_folder_type, folder_detl_type_cd, creat_purps, media_format
		        , medium, folder_size, record_tot_page_cnt, record_reg_cnt, efile_cnt
		        , new_div_cd, chng_flag, old_folder_creat_org_nm, old_folder_clss_no, folder_bispjt_div_cd
		        , bis_clss_path_nm, pjt_clss_path_nm, folder_start_dtime, folder_close_dtime, funsh_end_dtime
		        , funsh_rsn, presv_term_cd, presv_term_fix_rsn, presv_method_cd, presv_area_cd
		        , presv_loc, presv_duty_chrgr_nm, secu_clss_cd, secu_clss_rsn, read_range
		        , take_takovr_div_cd, take_takovr_org_cd, take_takovr_clss_id, take_takovr_creat_yyyy, take_takovr_folder_reg_seq
		        , take_takovr_ho_no, take_takovr_ymd, creat_user_id, creat_user_nm, creat_user_org_cd
		        , creat_user_org_nm, creat_user_pos_rank_nm, creat_dtime, erecord_flag, creat_sys_folder_id
		        , 'N', '0', '', '0', ''
		        <!--cubrid, '1', '0', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), presv_term_cd, folder_take_seq-->
                        , '1', '0', TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), presv_term_cd, folder_take_seq
		        , sumry, trans_dtime
		    FROM  TB_RDFOLDER
		    WHERE record_center_id = #recordCenterId:VARCHAR#
		    AND   folder_id = #folderId:VARCHAR#
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-21.생산현황등록-기록물철인수인계정보) (INSERT)
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatFolderTakeTakovr" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRFOLDERTAKETAKOVR
		(
		    record_center_id, folder_recv_seq, sno, take_takovr_div_cd, take_takovr_creat_dtime
		    , take_takovr_org_cd, take_takovr_org_nm, reg_dtime, take_takovr_clss_id, take_takovr_creat_yyyy
		    , take_takovr_folder_reg_seq, take_takovr_ho_no
		)
		(
		    SELECT C.record_center_id
		        , C.folder_recv_seq
		        , A.sno
		        , A.take_takovr_div_cd
		        , A.take_takovr_creat_dtime
		        , A.take_takovr_org_cd
		        , A.take_takovr_org_nm
		        <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                        , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		        , A.take_takovr_clss_id
		        , A.take_takovr_creat_yyyy
		        , A.take_takovr_folder_reg_seq
		        , A.take_takovr_ho_no
		    FROM  TB_RDFOLDERTAKETAKOVR A
		        , TB_RDFOLDER B
		        , TB_CRFOLDER C
		    WHERE C.record_center_id = #recordCenterId:VARCHAR#
		    AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.clss_id = B.clss_id
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.folder_reg_seq = B.folder_reg_seq
		    AND   C.ho_no = B.ho_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.folder_id = A.folder_id
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-22.생산현황등록-생산현황보고 기록물철변경이력) (INSERT)
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatFolderChngHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRFOLDERCHNGHIST
		(
		    record_center_id, folder_recv_seq, chng_hist_no, org_cd, clss_id
		    , creat_yyyy, folder_reg_seq, ho_no, title_bef, title_aft
		    , folder_type_div_cd_bef, folder_type_div_cd_aft, chng_ymd, chng_rsn, chng_user_nm
		    , reg_dtime
		)
		(
		    SELECT C.record_center_id
		        , C.folder_recv_seq
		        , A.chng_hist_no
		        , A.org_cd
		        , A.clss_id
		        , A.creat_yyyy
		        , A.folder_reg_seq
		        , A.ho_no
		        , A.title_bef
		        , A.title_aft
		        , A.folder_type_div_cd_bef
		        , A.folder_type_div_cd_aft
		        , A.chng_ymd
		        , A.chng_rsn
		        , A.chng_user_nm
		        <!--cubrid , TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                        , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		    FROM  TB_RDFOLDERCHNGHIST A
		        , TB_RDFOLDER B
		        , TB_CRFOLDER C
		    WHERE C.record_center_id = #recordCenterId:VARCHAR#
		    AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.clss_id = B.clss_id
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.folder_reg_seq = B.folder_reg_seq
		    AND   C.ho_no = B.ho_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.folder_id = A.folder_id
		)
	</insert>	
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-23.생산현황등록-생산현황보고 (철)특수목록내용) (INSERT)
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatFolderSpclList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRSPCLLIST
		(
		    record_center_id, spcl_list_reg_no, folder_recv_seq, record_recv_seq, spcl_list_loc
		    , folder_clss_no, record_reg_no, seq, spcl_list1, spcl_list2
		    , spcl_list3, reg_dtime
		)
		(
		    SELECT C.record_center_id
		        , LPAD((TB_CRSPCLLIST_SQ01.nextval), 15, '0') 
		        , C.folder_recv_seq
		        , '', '1'
		        , (C.org_cd||C.clss_id||C.creat_yyyy||C.folder_reg_seq||C.ho_no) folder_clss_no
		        , ''
		        , ( SELECT LPAD((NVL(MAX(Z.seq),0)+1), 3, '0')
		            FROM  TB_CRSPCLLIST Z
		        	WHERE Z.folder_recv_seq = C.folder_recv_seq ) seq
		        <!--cubrid insert, A.keywd, '', '', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                        , A.keywd, '', '', TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		    FROM TB_RDFOLDERKEYWD A
		        , TB_RDFOLDER B
		        , TB_CRFOLDER C
		    WHERE C.record_center_id = #recordCenterId:VARCHAR#
		    AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.clss_id = B.clss_id
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.folder_reg_seq = B.folder_reg_seq
		    AND   C.ho_no = B.ho_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.folder_id = A.folder_id
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-24.생산현황등록-생산현황보고 기록물건) (INSERT)
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatRecord" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRRECORD
		(
		    record_center_id, record_recv_seq, folder_recv_seq, creat_sys_cd, org_cd
		    , creat_yyyy, creat_reg_dtime, creat_reg_no, dtch_reg_no, title
		    , sub_title, record_reg_div_cd, record_detl_type_cd, audvis_record_type, audvis_record_sumry
		    , media_format, medium, record_size, attach_cnt, record_page_cnt
		    , aprov_pos_rank_nm, duty_chrgr_nm, enforc_ymd, creat_org_reg_no, erecord_flag
		    , old_record_creat_org_nm, old_record_docno, old_record_presv_term, presv_loc, secu_clss_cd
		    , secu_clss_rsn, read_range, open_div_cd, open_grade, part_open_rsn
		    , open_limit_part, open_expt_dtime, recver, sender, chng_ver_no
		    , doc_distr_no, folder_clss_no, spcl_record_type, orign_copy_flag, new_div_cd
		    , chng_flag, rjct_flag, doc_no, creat_sys_record_id, error_flag
		    , exam_rslt_cd, take_fin_flag, cr_report_flag, reg_dtime, take_error_cont
		    , exam_cont, doc_no_org_nm, open_limit_date
		) 
		(
		    SELECT C.record_center_id
		        , TO_CHAR(SYSDATE,'YYYY')||LPAD((TB_CRRECORD_SQ01.nextval), 15, '0')
		        , C.folder_recv_seq
		        , A.creat_sys_cd, A.org_cd
		        , A.creat_yyyy, A.creat_reg_dtime, A.creat_reg_no, A.dtch_reg_no, A.title
		        , A.sub_title, A.record_reg_div_cd, A.record_detl_type_cd, A.audvis_record_type, A.audvis_record_sumry
		        , A.media_format, A.medium, A.record_size, A.attach_cnt, A.record_page_cnt
		        , A.aprov_pos_rank_nm, A.duty_chrgr_nm, A.enforc_ymd, A.creat_org_reg_no, A.erecord_flag
		        , A.old_record_creat_org_nm, A.old_record_docno, A.old_record_presv_term, A.presv_loc, A.secu_clss_cd
		        , A.secu_clss_rsn, A.read_range, A.open_div_cd, A.open_grade, A.part_open_rsn
		        , A.open_limit_part, A.open_expt_dtime, A.recver, A.sender, A.chng_ver_no
		        , A.doc_distr_no, A.folder_clss_no, A.spcl_record_type, A.orign_copy_flag, A.new_div_cd
		        , A.chng_flag, '0', A.doc_no, A.creat_sys_record_id, 'N'
		        <!--cubrid , '0', '0', '', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), ''-->
                        , '0', '0', '', TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS'), ''
		        , '', a.doc_no_org_nm, a.open_limit_date
		    FROM  TB_RDRECORD A
		        , TB_RDFOLDER B
		        , TB_CRFOLDER C
		    WHERE C.record_center_id = #recordCenterId:VARCHAR#
		    AND   C.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.clss_id = B.clss_id
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.folder_reg_seq = B.folder_reg_seq
		    AND   C.ho_no = B.ho_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.folder_id = A.folder_id
		)
	</insert>	
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-25.생산현황등록-생산현황보고 기록물건변경이력) (INSERT)
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatRecordChngHist" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRRECORDCHNGHIST
		(
		    record_center_id, record_recv_seq, chng_hist_no, org_cd, creat_yyyy
		    , creat_reg_no, dtch_reg_no, creat_reg_ymd_bef, creat_reg_ymd_aft, title_bef
		    , title_aft, page_cnt_bef, page_cnt_aft, aprov_pos_rank_bef, aprov_pos_rank_aft
		    , duty_chrgr_bef, duty_chrgr_aft, enforc_ymd_bef, enforc_ymd_aft, recver_bef
		    , recver_aft, chng_ymd, chng_rsn, chng_user_nm, reg_dtime
		)
		(
		    SELECT C.record_center_id, C.record_recv_seq, A.chng_hist_no, A.org_cd, A.creat_yyyy
		        , A.creat_reg_no, A.dtch_reg_no, A.creat_reg_ymd_bef, A.creat_reg_ymd_aft, A.title_bef
		        , A.title_aft, A.page_cnt_bef, A.page_cnt_aft, A.aprov_pos_rank_bef, A.aprov_pos_rank_aft
		        , A.duty_chrgr_bef, A.duty_chrgr_aft, A.enforc_ymd_bef, A.enforc_ymd_aft, A.recver_bef
		        <!--cubrid, A.recver_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                        , A.recver_aft, A.chng_ymd, A.chng_rsn, A.chng_user_nm, TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		    FROM  TB_RDRECORDCHNGHIST A
		        , TB_RDRECORD B
		        , TB_CRRECORD C
		        , TB_CRFOLDER D
		    WHERE D.record_center_id = #recordCenterId:VARCHAR#
		    AND   D.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   D.record_center_id = C.record_center_id
		    AND   D.folder_recv_seq = C.folder_recv_seq
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.creat_reg_no = B.creat_reg_no
		    AND   C.dtch_reg_no = B.dtch_reg_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.record_id = A.record_id
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-26.생산현황등록-생산현황보고 (건)특수목록내용) (INSERT)
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatRecordSpclList" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRSPCLLIST
		(
		    record_center_id, spcl_list_reg_no, folder_recv_seq, record_recv_seq, spcl_list_loc
		    , folder_clss_no, record_reg_no, seq, spcl_list1, spcl_list2
		    , spcl_list3, reg_dtime
		)
		(
		    SELECT C.record_center_id
		        , LPAD((TB_CRSPCLLIST_SQ01.nextval), 15, '0') 
		        , ''
		        , C.record_recv_seq, '2', ''
		        , (C.creat_yyyy||C.creat_reg_no||C.dtch_reg_no) record_reg_no
		        , ( SELECT LPAD((NVL(MAX(Z.seq),0)+1), 3, '0')
		            FROM  TB_CRSPCLLIST Z
		        	WHERE Z.record_recv_seq = C.record_recv_seq ) seq
		        <!--cubrid, A.keywd, '', '', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                        , A.keywd, '', '', TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		    FROM TB_RDRECORDKEYWD A
		        , TB_RDRECORD B
		        , TB_CRRECORD C
		        , TB_CRFOLDER D
		    WHERE D.record_center_id = #recordCenterId:VARCHAR#
		    AND   D.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   D.record_center_id = C.record_center_id
		    AND   D.folder_recv_seq = C.folder_recv_seq
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.creat_reg_no = B.creat_reg_no
		    AND   C.dtch_reg_no = B.dtch_reg_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.record_id = A.record_id
		)
	</insert>
	
	<!-- 
		비밀해제기록물 기록물인수>연계인수>연계인수>검수처리(인수처리-27.생산현황등록-생산현황보고 첨부파일) (INSERT)
		2014.06.17 이옥찬 중복 건 인수 가능으로 DISTINCT 추가..
	 -->
	<insert id="createUndTakeCheckDclssfyFolderTakeCreatAttachFile" parameterClass="rms.take.undTake.domain.UndTakeCheckFolder">
		INSERT INTO TB_CRATTACHFILE
		(
		    record_center_id, record_recv_seq, reg_seq, org_cd, creat_yyyy
		    , creat_reg_no, attach_file_seq, attach_file_page_cnt, reg_dtime, doc_type_cd
		    , file_size
		)
		(
		    SELECT DISTINCT C.record_center_id, C.record_recv_seq, A.reg_seq, A.org_cd, A.creat_yyyy
		        , B.creat_reg_no, NVL(A.attach_file_seq,'00'), A.attach_file_page_cnt
		        <!--cubrid, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')-->
                        , TO_CHAR(sys_datetime,'YYYYMMDDHH24MISS')
		        , A.doc_type_cd, A.file_size
		    FROM  TB_TKATTACHFILE A
		        , TB_RDRECORD B
		        , TB_CRRECORD C
		        , TB_CRFOLDER D
		    WHERE D.record_center_id = #recordCenterId:VARCHAR#
		    AND   D.folder_take_seq = #folderTakeSeq:VARCHAR#
		    AND   D.record_center_id = C.record_center_id
		    AND   D.folder_recv_seq = C.folder_recv_seq
		    AND   C.record_center_id = B.record_center_id
		    AND   C.creat_sys_cd = B.creat_sys_cd
		    AND   C.org_cd = B.org_cd
		    AND   C.creat_yyyy = B.creat_yyyy
		    AND   C.creat_reg_no = B.creat_reg_no
		    AND   C.dtch_reg_no = B.dtch_reg_no
		    AND   B.record_center_id = A.record_center_id
		    AND   B.record_take_seq = A.record_take_seq
		)
	</insert>	
															
	

</sqlMap>
