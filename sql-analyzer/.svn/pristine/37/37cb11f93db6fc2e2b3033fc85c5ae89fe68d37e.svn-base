import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Properties;

public class FileReadWriter {
	private final String PROP_NAME = "fileio.properties";
	
	private String filepath = null;
	private String filename = null;
	private String logFilename = null;
	private String resultFilename = null;

	private File log = null;
	private File result = null;

	public FileReadWriter() {
		propApply();
		openDirectory(filename);
	}

	public void propApply() {
		Properties prop = new Properties();

		try {
			Reader reader = new FileReader(PROP_NAME);
			prop.load(reader);
		} catch (IOException e) {
			e.printStackTrace();
		}

		filepath = prop.getProperty("filepath");
		filename = prop.getProperty("filename");
		logFilename = prop.getProperty("logFilename");
		resultFilename = prop.getProperty("resultFilename");
		
		log = new File(logFilename);
		if (!(log.exists())) {
			log.mkdir();
		}
		
		result = new File(resultFilename);
		if (!(result.exists())) {
			result.mkdir();
		}
	}
	
	public void openDirectory(String source){
		File dir = new File(source); 
		File[] fileList = dir.listFiles(); 
		try{
			for(int i = 0 ; i < fileList.length ; i++){
				File file = fileList[i]; 
				if(file.isFile()){
    // 파일이 있다면 파일 이름 출력
					System.out.println("\t 파일 이름 = " + file.getName());
				}else if(file.isDirectory()){
					System.out.println("디렉토리 이름 = " + file.getName());
    // 서브디렉토리가 존재하면 재귀적 방법으로 다시 탐색
					openDirectory(file.getCanonicalPath().toString()); 
				}
			}
		}catch(IOException e){
			
		}
	}
	
	public String getFilepath() {
		return filepath;
	}

	public void setFilepath(String filepath) {
		this.filepath = filepath;
	}

	public String getFilename() {
		return filename;
	}

	public void setFilename(String filename) {
		this.filename = filename;
	}
}
