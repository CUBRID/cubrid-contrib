import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

public class DBConnection {
	private Connection conn = null;
	private BufferedWriter logFileOut = null;
	private BufferedWriter fkOut = null;
	private BufferedWriter uOut = null;
	private BufferedWriter nnOut = null;
	private BufferedWriter fmOut = null;
	private BufferedWriter gOut = null;
	private BufferedWriter toDateErrorOut = null;
	private String filename = null;
	private String id = null;
	private int sCnt = 0;
	private int eCnt = 0;
	private int nCnt = 0;
	private int sTotalCnt = 0;
	private int eTotalCnt = 0;
	private int nTotalCnt = 0;

	private int fCnt = 0;
	private int fTotalCnt = 0;

	private int uCnt = 0;
	private int uTotalCnt = 0;

	private int nnCnt = 0;
	private int nnTotalCnt = 0;

	private int fmCnt = 0;
	private int fmTotalCnt = 0;

	private int gCnt = 0;
	private int gTotalCnt = 0;

	private int ioCnt = 0;
	private int ioTotalCnt = 0;

	private int toDateErrorCnt = 0;
	private int toDateErrorTotalCnt = 0;

	public DBConnection() {
		this.connect();

		try {
			fkOut = new BufferedWriter(new FileWriter("foreign_key_log.txt"));
			uOut = new BufferedWriter(new FileWriter("unique_log.txt"));
			nnOut = new BufferedWriter(new FileWriter("not_null_log.txt"));
			fmOut = new BufferedWriter(new FileWriter("invalid_format_log.txt"));
			gOut = new BufferedWriter(new FileWriter("others_error_log.txt"));
			toDateErrorOut = new BufferedWriter(new FileWriter("toDate_error_log.txt"));

			fkOut.write("***** Foreign Key Error Message Collection *****" + System.getProperty("line.separator"));
			fkOut.flush();

			uOut.write(
					"***** Unique Constraints Error Message Collection *****" + System.getProperty("line.separator"));
			uOut.flush();

			nnOut.write(
					"***** Not Null Constraints Error Message Collection *****" + System.getProperty("line.separator"));
			nnOut.flush();

			fmOut.write("***** Invalid Format Error Message Collection *****" + System.getProperty("line.separator"));
			fmOut.flush();

			gOut.write("***** Others Error Message Collection *****" + System.getProperty("line.separator"));
			gOut.flush();

			toDateErrorOut.write("***** toDate Error Message Collection *****" + System.getProperty("line.separator"));
			toDateErrorOut.flush();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void connect() {
		Properties prop = new Properties();

		try {
			Reader reader = new FileReader("db.properties");
			prop.load(reader);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		String url = prop.getProperty("url");
		String user = prop.getProperty("user");
		String password = prop.getProperty("password");

		try {
			Class.forName("cubrid.jdbc.driver.CUBRIDDriver");
			conn = DriverManager.getConnection(url, user, password);
			conn.setAutoCommit(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void logInputQueryID(String id) {
		this.id = id;
	}

	public void logFileOpen(String filename) {
		try {
			this.filename = filename;
			logFileOut = new BufferedWriter(new FileWriter(filename + "_log.txt"));
			logFileOut.write("Read(log) : " + filename + System.getProperty("line.separator"));
			logFileOut.flush();

			// System.out.println("Read(log) : " + filename);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void logFileClose() {
		try {
			logFileOut.append(System.getProperty("line.separator"));
			logFileOut.append(System.getProperty("line.separator"));
			logFileOut.append("Close(log) : " + this.filename + System.getProperty("line.separator"));
			logFileOut.flush();

			// System.out.println("Close(log) : " + filename);

			int total = sCnt + eCnt + nCnt;
			sTotalCnt += sCnt;
			eTotalCnt += eCnt;
			nTotalCnt += nCnt;
			fTotalCnt += fCnt;
			uTotalCnt += uCnt;
			nnTotalCnt += nnCnt;
			fmTotalCnt += fmCnt;
			gTotalCnt += gCnt;
			ioTotalCnt += ioCnt;
			toDateErrorTotalCnt += toDateErrorCnt;

			System.out.println(filename + "\t Total : " + total + "\t Others : " + nCnt + "\t Success : " + sCnt
					+ "\t Error : " + eCnt);

			if ((eCnt + fCnt + uCnt + nnCnt + fmCnt + gCnt + ioCnt + toDateErrorCnt) == 0) {
				File file = new File(filename + "_log.txt");
				file.delete();

				System.out.println("SQL Error가 발견되지 않아서 파일 삭제 : " + filename);
			}

			sCnt = 0;
			eCnt = 0;
			nCnt = 0;
			fCnt = 0;
			uCnt = 0;
			nnCnt = 0;
			fmCnt = 0;
			gCnt = 0;
			ioCnt = 0;
			toDateErrorCnt = 0;
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void printData(ResultSet rs) {
		try {
			ResultSetMetaData rsmd = null;
			rsmd = rs.getMetaData();

			int numberOfColumn = rsmd.getColumnCount();

			while (rs.next()) {
				for (int i = 1; i <= numberOfColumn; i++) {
					System.out.print(rs.getString(i) + "  ");
				}

				System.out.println("");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public ResultSet selectQuery(String sql) {
		Statement stmt = null;
		ResultSet rs = null;

		try {
			stmt = conn.createStatement();

			if (SqlMapXMLParser.SET_OPTIMIZATION_LEVEL_2 == 0) {
				rs = stmt.executeQuery(sql);
				
				if (sql.contains("YYYYMMDDHH24MISS") && sql.contains("TO_DATE") && !sql.contains("TO_DATETIME")) {
					try {
						toDateErrorOut.append(System.getProperty("line.separator"));
						toDateErrorOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						toDateErrorOut.append("id  : " + this.id + System.getProperty("line.separator"));
						toDateErrorOut.append(sql + System.getProperty("line.separator"));
						toDateErrorOut.flush();
					} catch (IOException e) {
						e.printStackTrace();
					}

					toDateErrorCnt++;
				}
			}

			if (SqlMapXMLParser.SET_OPTIMIZATION_LEVEL_2 == 1) {
				stmt.executeUpdate(sql);
				eCnt++;
			} else {
				sCnt++;
			}
		} catch (SQLException sqle) {
			try {
				if (SqlMapXMLParser.QUERY_ERROR_FILTER_ON == 1) {
					if (!sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_FILTER)) {
						logFileOut.append(System.getProperty("line.separator"));
						logFileOut.append(this.id + System.getProperty("line.separator"));
						logFileOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						logFileOut.append(sql + System.getProperty("line.separator"));
						logFileOut.flush();

						eCnt++;
					} else {
						nCnt++;
					}
				} else {
					if (sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_FOREIGNKEY)) {
						fkOut.append(System.getProperty("line.separator"));
						fkOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						fkOut.append("id  : " + this.id + System.getProperty("line.separator"));
						fkOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						fkOut.append(sql + System.getProperty("line.separator"));
						fkOut.flush();

						fCnt++;
					} else if (sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_UNIQUE)) {
						uOut.append(System.getProperty("line.separator"));
						uOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						uOut.append("id  : " + this.id + System.getProperty("line.separator"));
						uOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						uOut.append(sql + System.getProperty("line.separator"));
						uOut.flush();

						uCnt++;
					} else if (sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_NOTNULL)) {
						nnOut.append(System.getProperty("line.separator"));
						nnOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						nnOut.append("id  : " + this.id + System.getProperty("line.separator"));
						nnOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						nnOut.append(sql + System.getProperty("line.separator"));
						nnOut.flush();

						nnCnt++;
					} else if (sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_FORMAT)) {
						fmOut.append(System.getProperty("line.separator"));
						fmOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						fmOut.append("id  : " + this.id + System.getProperty("line.separator"));
						fmOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						fmOut.append(sql + System.getProperty("line.separator"));
						fmOut.flush();

						fmCnt++;
					} else {
						gOut.append(System.getProperty("line.separator"));
						gOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						gOut.append("id  : " + this.id + System.getProperty("line.separator"));
						gOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						gOut.append(sql + System.getProperty("line.separator"));
						gOut.flush();

						gCnt++;
					}

					logFileOut.append(System.getProperty("line.separator"));
					logFileOut.append(this.id + System.getProperty("line.separator"));
					logFileOut.append(sqle.getMessage() + System.getProperty("line.separator"));
					logFileOut.append(sql + System.getProperty("line.separator"));
					logFileOut.flush();

					eCnt++;
				}
			} catch (IOException ioe) {
				ioCnt++;

				ioe.printStackTrace();
			}
		}

		return rs;

	}

	public int updateQuery(String sql) {
		Statement stmt = null;
		int isSuccess = 0;

		try {
			stmt = conn.createStatement();
			isSuccess = stmt.executeUpdate(sql);
			
			if (sql.contains("YYYYMMDDHH24MISS") && sql.contains("TO_DATE") && !sql.contains("TO_DATETIME")) {
				
				try {
					toDateErrorOut.append(System.getProperty("line.separator"));
					toDateErrorOut.append("filename : " + this.filename + System.getProperty("line.separator"));
					toDateErrorOut.append("id  : " + this.id + System.getProperty("line.separator"));
					toDateErrorOut.append(sql + System.getProperty("line.separator"));
					toDateErrorOut.flush();
					
				} catch (IOException e) {
					e.printStackTrace();
				}
				
				toDateErrorCnt++;
				eCnt++;
			} else {
				sCnt++;
			}
		} catch (SQLException sqle) {
			try {
				if (SqlMapXMLParser.QUERY_ERROR_FILTER_ON == 1) {
					if (!sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_FILTER)) {
						logFileOut.append(System.getProperty("line.separator"));
						logFileOut.append(this.id + System.getProperty("line.separator"));
						logFileOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						logFileOut.append(sql + System.getProperty("line.separator"));
						logFileOut.flush();

						eCnt++;
					} else {
						nCnt++;
					}
				} else {
					if (sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_FOREIGNKEY)) {
						fkOut.append(System.getProperty("line.separator"));
						fkOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						fkOut.append("id  : " + this.id + System.getProperty("line.separator"));
						fkOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						fkOut.append(sql + System.getProperty("line.separator"));
						fkOut.flush();

						fCnt++;
					} else if (sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_UNIQUE)) {
						uOut.append(System.getProperty("line.separator"));
						uOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						uOut.append("id  : " + this.id + System.getProperty("line.separator"));
						uOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						uOut.append(sql + System.getProperty("line.separator"));
						uOut.flush();

						uCnt++;
					} else if (sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_NOTNULL)) {
						nnOut.append(System.getProperty("line.separator"));
						nnOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						nnOut.append("id  : " + this.id + System.getProperty("line.separator"));
						nnOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						nnOut.append(sql + System.getProperty("line.separator"));
						nnOut.flush();

						nnCnt++;
					} else if (sqle.getMessage().matches(SqlMapXMLParser.QUERY_ERROR_FORMAT)) {
						fmOut.append(System.getProperty("line.separator"));
						fmOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						fmOut.append("id  : " + this.id + System.getProperty("line.separator"));
						fmOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						fmOut.append(sql + System.getProperty("line.separator"));
						fmOut.flush();

						fmCnt++;
					} else if (sqle.getMessage().matches(SqlMapXMLParser.TODATE_ERROR_FORMAT)) {
						toDateErrorOut.append(System.getProperty("line.separator"));
						toDateErrorOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						toDateErrorOut.append("id  : " + this.id + System.getProperty("line.separator"));
						toDateErrorOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						toDateErrorOut.append(sql + System.getProperty("line.separator"));
						toDateErrorOut.flush();

						toDateErrorCnt++;
					} else {
						gOut.append(System.getProperty("line.separator"));
						gOut.append("filename : " + this.filename + System.getProperty("line.separator"));
						gOut.append("id  : " + this.id + System.getProperty("line.separator"));
						gOut.append(sqle.getMessage() + System.getProperty("line.separator"));
						gOut.append(sql + System.getProperty("line.separator"));
						gOut.flush();

						gCnt++;
					}

					logFileOut.append(System.getProperty("line.separator"));
					logFileOut.append(this.id + System.getProperty("line.separator"));
					logFileOut.append(sqle.getMessage() + System.getProperty("line.separator"));
					logFileOut.append(sql + System.getProperty("line.separator"));
					logFileOut.flush();

					eCnt++;
				}
			} catch (IOException ioe) {
				ioCnt++;

				ioe.printStackTrace();
			}
		}

		return isSuccess;
	}

	public int getTotalCnt() {
		return sTotalCnt + eTotalCnt + nTotalCnt;
	}

	public int getTotalSuccessCnt() {
		return sTotalCnt;
	}

	public int getTotalErrorCnt() {
		return eTotalCnt;
	}

	public int getTotalOthersCnt() {
		return nTotalCnt;
	}

	public int getTotalForeignKeyCnt() {
		return fTotalCnt;
	}

	public int getTotalUniqueCnt() {
		return uTotalCnt;
	}

	public int getTotalNotNullCnt() {
		return nnTotalCnt;
	}

	public int getTotalFormatCnt() {
		return fmTotalCnt;
	}

	public int getTotalGeneralCnt() {
		return gTotalCnt;
	}

	public int getTotalIOCnt() {
		return ioTotalCnt;
	}

	public int getToDateErrorCnt() {
		return toDateErrorCnt;
	}

	public int getToDateErrorTotalCnt() {
		return toDateErrorTotalCnt;
	}

	public void allClose() {
		try {
			fkOut.append(System.getProperty("line.separator"));
			fkOut.append("***** Close *****" + System.getProperty("line.separator"));
			fkOut.flush();
			fkOut.close();

			uOut.append(System.getProperty("line.separator"));
			uOut.append("***** Close *****" + System.getProperty("line.separator"));
			uOut.flush();
			uOut.close();

			nnOut.append(System.getProperty("line.separator"));
			nnOut.append("***** Close *****" + System.getProperty("line.separator"));
			nnOut.flush();
			nnOut.close();

			fmOut.append(System.getProperty("line.separator"));
			fmOut.append("***** Close *****" + System.getProperty("line.separator"));
			fmOut.flush();
			fmOut.close();

			gOut.append(System.getProperty("line.separator"));
			gOut.append("***** Close *****" + System.getProperty("line.separator"));
			gOut.flush();
			gOut.close();

			toDateErrorOut.append(System.getProperty("line.separator"));
			toDateErrorOut.append("***** Close *****" + System.getProperty("line.separator"));
			toDateErrorOut.flush();
			toDateErrorOut.close();

			conn.close();

			logFileOut.close();
		} catch (IOException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}