<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="presv.booksf">
	
	<!-- 
		정수점검_계획수립
		: 계획서 목록을 조회한다.
	 -->
	<resultMap id="findBooksfCntChkPlanPagedList-result" class="rms.presv.booksf.domain.BooksfCntChk">
		<result property="cntChkId" 			column="CNTCHK_ID"/>		<!-- 계획서번호 -->
		<result property="planYmd" 				column="PLAN_YMD"/>			<!-- 계획일자 -->
		<result property="checkYmd"				column="CHECK_YMD"/>		<!-- 점검일자 -->
		<result property="workUserNm"			column="WORK_USER_NM"/>		<!-- 담당자 -->	
		<result property="workUserId"			column="WORK_USER_ID"/>		<!-- 담당자 -->
		<result property="checkStateCd"			column="CHECK_STATE_CD"/>	<!-- 상태-->
		<result property="checkStateNm"			column="CHECK_STATE_NM"/>	<!-- 상태 -->	
	</resultMap>
	<select id="countBooksfCntChkPlanPagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultClass="java.lang.Long">
		SELECT COUNT(1)
        FROM TB_SRCNTCHK A, TB_STUSER C, TB_ZZCOMCD D
        WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
        AND A.WORK_USER_ID = C.USER_ID
        AND (A.CHECK_STATE_CD = D.COM_CD and D.COM_TYPE_CD = 'SR06')
        AND A.RECORD_CENTER_ID = C.RECORD_CENTER_ID
        <dynamic prepend="AND">
            <isNotEmpty prepend="AND" property="checkStateCd">
                A.CHECK_STATE_CD = #checkStateCd:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="cntChkId">
                A.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#,'-','')
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="planYmd">
                A.PLAN_YMD = #planYmd:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="workUserId">
                A.WORK_USER_ID = #workUserId:VARCHAR#
            </isNotEmpty>
        </dynamic>
	</select>
	<select id="findBooksfCntChkPlanPagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findBooksfCntChkPlanPagedList-result">
		SELECT G.record_center_id
		      ,SUBSTR(G.cntchk_id, 1, 4)||'-'||SUBSTR(G.cntchk_id, 5, 6) AS cntchk_id
		      ,G.plan_ymd
		      ,G.check_ymd
		      ,G.user_nm AS work_user_nm
		      ,G.user_id AS work_user_id
		      ,G.com_cd AS check_state_cd
		      ,G.com_cd_nm AS check_state_nm
		FROM (
		    SELECT F.*
		    FROM (
		        SELECT ROWNUM AS rnum
		              ,E.*
		        FROM (
		            SELECT A.RECORD_CENTER_ID, A.CNTCHK_ID, A.PLAN_YMD, A.CHECK_YMD, C.USER_NM, C.USER_ID
		                  ,D.COM_CD, D.COM_CD_NM
		            FROM TB_SRCNTCHK A, TB_STUSER C, TB_ZZCOMCD D
		            WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		            AND A.WORK_USER_ID = C.USER_ID
		            AND (A.CHECK_STATE_CD = D.COM_CD and D.COM_TYPE_CD = 'SR06')
		            AND A.RECORD_CENTER_ID = C.RECORD_CENTER_ID
		            <dynamic prepend="AND">
		                <isNotEmpty prepend="AND" property="checkStateCd">
		                    A.CHECK_STATE_CD = #checkStateCd:VARCHAR#
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="cntChkId">
		                    A.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#,'-','')
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="planYmd">
		                    A.PLAN_YMD = #planYmd:VARCHAR#
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="workUserId">
		                    A.WORK_USER_ID = #workUserId:VARCHAR#
		                </isNotEmpty>
		            </dynamic>
		            <!--cubrid ORDER BY RECORD_CENTER_ID, CNTCHK_ID DESC-->
		            ORDER BY A.RECORD_CENTER_ID, CNTCHK_ID DESC
		        ) E
		        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
		    ) F
		    WHERE F.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
		) G
		ORDER BY G.rnum
	</select>
	
	<!-- 
		정수점검_계획수립
		: 정수점검계획서 작성 및 수정 전 임시테이블을 삭제한다.
	 -->
	<delete id="deleteCntChkPlanTemp" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		DELETE FROM TB_ZZSTAKRMTEMP
		WHERE USER_ID = #userId:VARCHAR#
		AND RECORD_CENTER_ID = #recordCenterId:VARCHAR#
	</delete>
	
	<!-- 
		정수점검_계획수립
		: 정수점검계획서 작성시 정수점검대상을 임시테이블에 등록한다.
	 -->
	<insert id="createBooksfCntChkTemp" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		INSERT INTO TB_ZZSTAKRMTEMP (
			RECORD_CENTER_ID, USER_ID, TRGT_ID, REMK
		) VALUES (
			#recordCenterId:VARCHAR#, #userId:VARCHAR#, #trgtId:VARCHAR#, #remk:VARCHAR# 
		) <!-- trgtId : 서고ID, remk : 서가ID -->
	</insert>
	
	<!-- 
		정수점검_계획수립
		: 정수점검 계획서 작성시 정수점검대상을 임시테이블에서 삭제한다. (개별)
	 -->
	<delete id="deleteCntChkTemp" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		DELETE FROM TB_ZZSTAKRMTEMP
		WHERE RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		AND TRGT_ID = #trgtId:VARCHAR#
		AND REMK = #remk:VARCHAR#
		AND USER_ID = #userId:VARCHAR#
	</delete>

	<!-- 
		정수점검_계획수립
		: 정수점검계획서 수정전 임시테이블에 서가 목록을 추가한다.
	 -->
	<insert id="createBooksfCntChkChngTemp" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		INSERT INTO TB_ZZSTAKRMTEMP (RECORD_CENTER_ID, USER_ID, TRGT_ID, REMK)
		(
			SELECT #recordCenterId:VARCHAR# RECORD_CENTER_ID
			     , #userId:VARCHAR# USER_ID
				 , B.STAKRM_ID
			     , B.BOOKSF_ID
			FROM TB_SRCNTCHK A, TB_SRCNTCHKDETL B
			WHERE B.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
			AND A.CNTCHK_ID = B.CNTCHK_ID
			AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
			AND A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
			GROUP BY B.CNTCHK_ID, B.STAKRM_ID, B.BOOKSF_ID
		)
	</insert>
	
	<!-- 
		정수점검_계획수립
		: 정수점검 계획서 작성, 수정시 임시테이블 목록을 조회한다.
	 -->
	<resultMap id="findCntChkPlanTempPagedList-result" class="rms.presv.booksf.domain.BooksfCntChk">
		<result property="stakrmId" 			column="STAKRM_ID"/>		<!-- 서고번호 -->
		<result property="stakrmNm" 			column="STAKRM_NM"/>		<!-- 서고명 -->
		<result property="booksfId" 			column="BOOKSF_ID"/>		<!-- 서가번호 -->
		<result property="booksfNm" 			column="BOOKSF_NM"/>		<!-- 서가명 -->
		<result property="folderCnt" 			column="FOLDER_CNT"/>		<!-- 기록물철수 -->
		<result property="lastCheckYyyy"		column="LAST_CHECK_YYYY"/>	<!-- 기정수점검년도 -->
	</resultMap>
	<select id="countCntChkPlanTempPagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultClass="java.lang.Long">
		SELECT COUNT(1)
        FROM TB_SRBOOKSF A, TB_SRSTAKRM C,  TB_ZZSTAKRMTEMP D
        WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
        AND A.STAKRM_ID = C.STAKRM_ID
        AND (A.STAKRM_ID = D.TRGT_ID AND A.BOOKSF_ID = D.REMK AND D.USER_ID = #userId:VARCHAR#)
        AND A.RECORD_CENTER_ID = C.RECORD_CENTER_ID
        AND A.RECORD_CENTER_ID = D.RECORD_CENTER_ID
        <dynamic prepend="AND">
            <isNotEmpty prepend="AND" property="stakrmId">
                A.STAKRM_ID = #stakrmId:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="booksfId">
                A.BOOKSF_ID = #booksfId:VARCHAR#
            </isNotEmpty>
        </dynamic>
	</select>
	<select id="findCntChkPlanTempPagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findCntChkPlanTempPagedList-result">
		SELECT G.stakrm_id
		      ,G.stakrm_nm
		      ,G.booksf_id
		      ,G.booksf_nm
		      ,(SELECT COUNT(1) FROM TB_SRBOOKSFARNGDETL B 
		        WHERE B.stakrm_id = G.stakrm_id
		        AND B.booksf_id = G.booksf_id
		        AND B.record_center_id = G.record_center_id) AS folder_cnt 
		      ,G.last_check_yyyy
		FROM (
		    SELECT F.*
		    FROM (
		        SELECT ROWNUM AS rnum
		                ,E.*
		        FROM (
		            SELECT A.RECORD_CENTER_ID
		                    , A.STAKRM_ID
		                    , C.STAKRM_NM
		                    , A.BOOKSF_ID
		                    , A.BOOKSF_NM
		                    , A.LAST_CHECK_YYYY
		            FROM TB_SRBOOKSF A, TB_SRSTAKRM C,  TB_ZZSTAKRMTEMP D
		            WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		            AND A.STAKRM_ID = C.STAKRM_ID
		            AND (A.STAKRM_ID = D.TRGT_ID AND A.BOOKSF_ID = D.REMK AND D.USER_ID = #userId:VARCHAR#)
		            AND A.RECORD_CENTER_ID = C.RECORD_CENTER_ID
		            AND A.RECORD_CENTER_ID = D.RECORD_CENTER_ID
		            <dynamic prepend="AND">
		                <isNotEmpty prepend="AND" property="stakrmId">
		                    A.STAKRM_ID = #stakrmId:VARCHAR#
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="booksfId">
		                    A.BOOKSF_ID = #booksfId:VARCHAR#
		                </isNotEmpty>
		            </dynamic>
		            ORDER BY A.RECORD_CENTER_ID, A.STAKRM_ID, A.BOOKSF_ID
		        ) E
		        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
		    ) F
		    WHERE F.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
		) G
		ORDER BY G.rnum
	</select>
	 
	<!-- 
		정수점검_계획수립
		: SELECT(정수점검:일련번호구하기) 
	-->
	<resultMap id="findCntChkSno-result"			class="rms.presv.booksf.domain.BooksfCntChk" >
		<result property="sno" 					column="SNO"/>				<!-- 일련번호 -->
	</resultMap>
	<select id="findCntChkSno" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findCntChkSno-result">
		SELECT NVL(MAX(Sno),0) + 1 SNO
		  FROM TB_SRCNTCHK
		 WHERE CHECK_YYYY = #checkYyyy:VARCHAR#
		   AND RECORD_CENTER_ID = #recordCenterId:VARCHAR#
	</select>	
	
	<!-- 
		정수점검_계획수립
		: INSERT(정수점검) 
	-->
	<insert id="createCntChkPlan" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		INSERT INTO TB_SRCNTCHK (
			RECORD_CENTER_ID, CNTCHK_ID,CHECK_YYYY,SNO,PLAN_YMD,WORK_USER_ID,CHECK_STATE_CD
		) VALUES (
			#recordCenterId:VARCHAR#,#cntChkId:VARCHAR#,#checkYyyy:VARCHAR#,#sno:NUMBER#,#planYmd:VARCHAR#,#workUserId:VARCHAR#,#checkStateCd:VARCHAR#
		)
	</insert>
	
	<!-- 
		정수점검_계획수립
		: SELECT(작성조회) 
	-->
	<resultMap id="findCntChkTempList-result"			class="rms.presv.booksf.domain.BooksfCntChk" >
		<result property="stakrmId" 			column="STAKRM_ID"/>		<!-- 서고번호 -->
		<result property="stakrmNm" 			column="STAKRM_NM"/>		<!-- 서고명 -->
		<result property="booksfId" 			column="BOOKSF_ID"/>		<!-- 서가번호 -->
		<result property="booksfNm" 			column="BOOKSF_NM"/>		<!-- 서가명 -->
		<result property="folderCnt" 			column="FOLDER_CNT"/>		<!-- 기록물철수 -->
		<result property="lastCheckYyyy"		column="LAST_CHECK_YYYY"/>	<!-- 기정수점검년도 -->
	</resultMap>
	<select id="findCntChkTempList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findCntChkTempList-result">
		SELECT A.STAKRM_ID
		     , C.STAKRM_NM
		     , A.BOOKSF_ID
			 , A.BOOKSF_NM
			 , (SELECT COUNT(1) FROM TB_SRBOOKSFARNGDETL B 
			    WHERE B.STAKRM_ID = A.STAKRM_ID
				  AND B.BOOKSF_ID = A.BOOKSF_ID
				  AND B.RECORD_CENTER_ID = A.RECORD_CENTER_ID) FOLDER_CNT  
		     , A.LAST_CHECK_YYYY
		  FROM TB_SRBOOKSF A, TB_SRSTAKRM C,  TB_ZZSTAKRMTEMP D
		 WHERE A.STAKRM_ID = C.STAKRM_ID
		   AND (A.STAKRM_ID = D.TRGT_ID AND A.BOOKSF_ID = D.REMK AND D.USER_ID = #workUserId:VARCHAR#)
		   AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		   AND A.RECORD_CENTER_ID = C.RECORD_CENTER_ID
		   AND A.RECORD_CENTER_ID = D.RECORD_CENTER_ID
 	     <dynamic prepend="AND">
			<isNotEmpty prepend="AND" property="stakrmId">
				A.STAKRM_ID = #stakrmId:VARCHAR#
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="booksfId">
				A.BOOKSF_ID = #booksfId:VARCHAR#
			</isNotEmpty>
		  </dynamic>
	</select>
	
	
	<!-- 
		정수점검_계획수립
		: SELECT(철ID구하기) 
	-->
	<resultMap id="findCntChkFolder-result"			class="rms.presv.booksf.domain.BooksfCntChk" >
		<result property="folderId" 			column="FOLDER_ID"/>		<!-- 기록물철ID -->
	</resultMap>
	<select id="findCntChkFolder" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findCntChkFolder-result">
		SELECT A.FOLDER_ID
		  FROM TB_SRBOOKSFARNGDETL A, TB_RDFOLDER B
		 WHERE A.STAKRM_ID = #stakrmId:VARCHAR#
		   AND A.BOOKSF_ID = #booksfId:VARCHAR#
		   AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
   		   AND A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
		   AND A.FOLDER_ID = B.FOLDER_ID
		   AND B.FOLDER_KEEP_STATE_CD IN ('01', '04')
	</select>
	
	<!-- 
		정수점검_계획수립
		: INSERT(정수점검상세) 
	-->
	<insert id="createCntChkDetl" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		INSERT INTO TB_SRCNTCHKDETL(
			RECORD_CENTER_ID,CNTCHK_ID,FOLDER_ID,STAKRM_ID,BOOKSF_ID
		) VALUES (
			#recordCenterId:VARCHAR#,REPLACE(#cntChkId:VARCHAR#,'-',''),#folderId:VARCHAR#,#stakrmId:VARCHAR#,#booksfId:VARCHAR#
		)
	</insert>
	
	<!-- 
		정수점검_계획수립
		: 정수점검 계획서 수정
	 -->
	<update id="updateCntChkPlan" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		UPDATE TB_SRCNTCHK
		SET PLAN_YMD = #planYmd:VARCHAR#
		WHERE RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		AND CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
	</update>
	
	<!-- 
		정수점검_계획수립
		: 정수점검 계획서상세목록 삭제
	 -->
	<delete id="deleteCntChkDetl" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		DELETE FROM TB_SRCNTCHKDETL
		WHERE RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		AND CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
	</delete>
	
	<!-- 
		정수점검_계획수립
		: 정수점검 계획서상세목록 삭제
	 -->
	<delete id="deleteCntChkPlan" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		DELETE FROM TB_SRCNTCHK
		WHERE RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		AND CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
	</delete>
	
	<!-- 
		정수점검_계획수립
		: 정수점검계획서 해더 인쇄 
	-->
	<resultMap id="findPrintDocCntChkPlanHead-result"			class="rms.presv.booksf.domain.BooksfCntChk" >
		<result property="cntChkId" 			column="CNTCHK_ID"/>		<!-- 계획서번호 -->
		<result property="checkYmd"				column="CHECK_YMD"/>		<!-- 점검일자 -->
		<result property="workUserNm"			column="WORK_USER_NM"/>		<!-- 담당자 -->	
	</resultMap>
	<select id="findPrintDocCntChkPlanHead" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findPrintDocCntChkPlanHead-result">
		SELECT SUBSTR(A.CNTCHK_ID, 1, 4)||'-'||SUBSTR(A.CNTCHK_ID, 5, 6) CNTCHK_ID
		     , to_char(to_date(A.CHECK_YMD,'YYYYMMDDHH24MISS'),'YYYY.MM.DD') CHECK_YMD
		     , B.USER_NM WORK_USER_NM
		  FROM TB_SRCNTCHK A, TB_STUSER B
		 WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		   AND A.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
		   AND A.WORK_USER_ID = B.USER_ID
	</select>
	
	<!-- 정수점검계획서 테이타 인쇄 -->
	<resultMap id="findPrintDocCntChkPlanData-result"			class="rms.presv.booksf.domain.BooksfCntChk" >
		<result property="folderId" 			column="FOLDER_ID"/>		<!-- 기록물철ID -->
		<result property="stakrmId" 			column="STAKRM_ID"/>		<!-- 서고번호 -->
		<result property="arngInfo"				column="ARNG_INFO"/>		<!-- 배치정보 -->
		<result property="stakrmMngNo" 			column="STAKRM_MNG_NO"/>	<!-- 관리번호 -->
		<result property="presvBoxId" 			column="PRESV_BOX_ID"/>		<!-- 보존상자번호 -->
		<result property="defctFlagNm"			column="DEFCT_FLAG_NM"/>	<!-- 이상유무 -->
		<result property="handlRsltCont"		column="HANDL_RSLT_CONT"/>	<!-- 조치결과 -->
	</resultMap>
	<select id="findPrintDocCntChkPlanData" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findPrintDocCntChkPlanData-result">
		SELECT A.FOLDER_ID
		     , A.STAKRM_ID
		     , A.BOOKSF_ID||'-'||C.BOOKSF_SHELF_CNO||'-'||C.BOOKSF_SHELF_RNO ARNG_INFO
			 , B.STAKRM_MNG_NO
			 , DECODE(B.PRESV_BOX_ID, '', '',  substr(B.PRESV_BOX_ID, 1, 3)||'-'||
			   substr(B.PRESV_BOX_ID, 4, 3)||'-'||substr(B.PRESV_BOX_ID, 7, 3)||'-'||
			   substr(B.PRESV_BOX_ID, 10, 3)||'-'||substr(B.PRESV_BOX_ID, 13, 3)) PRESV_BOX_ID
			 , DECODE(A.DEFCT_FLAG,'1','이상','정상') DEFCT_FLAG_NM
			 , A.HANDL_RSLT_CONT	 
		  FROM TB_SRCNTCHKDETL A, TB_RDFOLDER B, TB_SRBOOKSFARNGDETL C   
		 WHERE A.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
		   AND A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		   AND A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
		   AND A.FOLDER_ID = B.FOLDER_ID
		   AND A.RECORD_CENTER_ID = C.RECORD_CENTER_ID   
		   AND A.FOLDER_ID = C.FOLDER_ID
	</select>
	
	
	
	
	
	
	
	
	
	
	
	 
	<!-- 
		정수점검_결과등록
		: 계획서 목록을 조회한다.
	 -->
	<resultMap id="findBooksfCntChkStakrmBooksf-result" class="rms.presv.booksf.domain.BooksfCntChk">
		<result property="stakrmId" 			column="STAKRM_ID"/>		<!-- 서고번호 -->
		<result property="booksfId" 			column="BOOKSF_ID"/>		<!-- 서가번호 -->
		<result property="folderCnt" 			column="FOLDER_CNT"/>		<!-- 기록물철수 -->
		<result property="lastCheckYyyy"		column="LAST_CHECK_YYYY"/>	<!-- 기정수점검년도 -->
	</resultMap>
	<select id="countBooksfCntChkStakrmBooksf" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultClass="java.lang.Long">
		SELECT COUNT(1)
        FROM TB_SRBOOKSF A
        WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
        AND (SELECT COUNT(1) FROM TB_SRBOOKSFARNGDETL B 
                WHERE B.STAKRM_ID = A.STAKRM_ID
                AND B.BOOKSF_ID = A.BOOKSF_ID
                AND B.RECORD_CENTER_ID = A.RECORD_CENTER_ID)  <![CDATA[>]]>  0 
        AND NOT EXISTS (SELECT E.TRGT_ID 
                                    FROM TB_ZZSTAKRMTEMP E
                                    WHERE E.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
                                    AND E.USER_ID = #userId:VARCHAR#
                                    AND E.TRGT_ID = A.STAKRM_ID
                                    AND E.REMK = A.BOOKSF_ID
                                    AND E.RECORD_CENTER_ID = A.RECORD_CENTER_ID)
        <dynamic prepend="AND">
            <isNotEmpty prepend="AND" property="stakrmId">
                A.STAKRM_ID = #stakrmId:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="booksfId">
                A.BOOKSF_ID = #booksfId:VARCHAR#
            </isNotEmpty>
        </dynamic>
	</select>
	<select id="findBooksfCntChkStakrmBooksf" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findBooksfCntChkStakrmBooksf-result">
		SELECT D.stakrm_id
		      ,D.booksf_id
		      ,(SELECT COUNT(1) 
		        FROM TB_SRBOOKSFARNGDETL B, TB_RDFOLDER C
		        WHERE B.FOLDER_ID=C.FOLDER_ID
		        AND C.FOLDER_KEEP_STATE_CD IN ('01','04')
		        AND B.STAKRM_ID = D.STAKRM_ID
		        AND B.BOOKSF_ID = D.BOOKSF_ID
		        AND B.RECORD_CENTER_ID = D.RECORD_CENTER_ID) AS FOLDER_CNT  
		      ,D.last_check_yyyy
		FROM (
		    SELECT C.*
		    FROM (
		        SELECT ROWNUM AS rnum
		                ,B.*
		        FROM (
		            SELECT A.RECORD_CENTER_ID, A.STAKRM_ID, A.BOOKSF_ID, A.LAST_CHECK_YYYY
		            FROM TB_SRBOOKSF A
		            WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		            AND (SELECT COUNT(1) FROM TB_SRBOOKSFARNGDETL B 
		                    WHERE B.STAKRM_ID = A.STAKRM_ID
		                    AND B.BOOKSF_ID = A.BOOKSF_ID
		                    AND B.RECORD_CENTER_ID = A.RECORD_CENTER_ID)  <![CDATA[>]]>  0 
		            AND NOT EXISTS (SELECT E.TRGT_ID 
		                                        FROM TB_ZZSTAKRMTEMP E
		                                        WHERE E.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		                                        AND E.USER_ID = #userId:VARCHAR#
		                                        AND E.TRGT_ID = A.STAKRM_ID
		                                        AND E.REMK = A.BOOKSF_ID
		                                        AND E.RECORD_CENTER_ID = A.RECORD_CENTER_ID)
		            <dynamic prepend="AND">
		                <isNotEmpty prepend="AND" property="stakrmId">
		                    A.STAKRM_ID = #stakrmId:VARCHAR#
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="booksfId">
		                    A.BOOKSF_ID = #booksfId:VARCHAR#
		                </isNotEmpty>
		            </dynamic>
		            ORDER BY A.RECORD_CENTER_ID, A.STAKRM_ID, A.BOOKSF_ID
		        ) B
		        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
		    ) C
		    WHERE C.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
		) D
		ORDER BY D.rnum
	</select>
	
	<!-- 
		정수점검_결과등록
		: 계획서 목록을 조회한다.
	 -->
	<resultMap id="findBooksfCntChkRsltPagedList-result" class="rms.presv.booksf.domain.BooksfCntChk">
		<result property="cntChkId" 			column="CNTCHK_ID"/>		<!-- 계획서번호 -->
		<result property="planYmd" 				column="PLAN_YMD"/>			<!-- 계획일자 -->
		<result property="checkYmd"				column="CHECK_YMD"/>		<!-- 점검일자 -->
		<result property="workUserNm"			column="WORK_USER_NM"/>		<!-- 담당자 -->	
		<result property="checkStateCd"			column="CHECK_STATE_CD"/>	<!-- 상태 -->
		<result property="checkStateNm"			column="CHECK_STATE_NM"/>	<!-- 상태 -->
	</resultMap>
	<select id="countBooksfCntChkRsltPagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultClass="java.lang.Long">
		SELECT COUNT(1)
        FROM TB_SRCNTCHK A, TB_STUSER C, TB_ZZCOMCD D
        WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
        AND A.WORK_USER_ID = C.USER_ID
        AND (A.CHECK_STATE_CD = D.COM_CD and D.COM_TYPE_CD = 'SR06')
        AND A.RECORD_CENTER_ID = C.RECORD_CENTER_ID
        <dynamic prepend="AND">
            <isNotEmpty prepend="AND" property="checkStateCd">
                A.CHECK_STATE_CD = #checkStateCd:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="cntChkId">
                A.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#,'-','')
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="planYmd">
                A.PLAN_YMD = #planYmd:VARCHAR#
            </isNotEmpty>
            <isNotEmpty prepend="AND" property="workUserId">
                A.WORK_USER_ID = #workUserId:VARCHAR#
            </isNotEmpty>
        </dynamic>
	</select>
	<select id="findBooksfCntChkRsltPagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findBooksfCntChkRsltPagedList-result">
		SELECT G.record_center_id
		      ,SUBSTR(G.cntchk_id, 1, 4)||'-'||SUBSTR(G.cntchk_id, 5, 6) AS cntchk_id
		      ,G.plan_ymd
		      ,G.check_ymd
		      ,G.user_nm AS work_user_nm
		      ,G.com_cd AS check_state_cd
		      ,G.com_cd_nm AS check_state_nm
		FROM (
		    SELECT F.*
		    FROM (
		        SELECT ROWNUM AS rnum
		              ,E.*
		        FROM (
		            SELECT A.RECORD_CENTER_ID, A.CNTCHK_ID, A.PLAN_YMD, A.CHECK_YMD, C.USER_NM
		                  ,D.COM_CD, D.COM_CD_NM
		            FROM TB_SRCNTCHK A, TB_STUSER C, TB_ZZCOMCD D
		            WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		            AND A.WORK_USER_ID = C.USER_ID
		            AND (A.CHECK_STATE_CD = D.COM_CD and D.COM_TYPE_CD = 'SR06')
		            AND A.RECORD_CENTER_ID = C.RECORD_CENTER_ID
		            <dynamic prepend="AND">
		                <isNotEmpty prepend="AND" property="checkStateCd">
		                    A.CHECK_STATE_CD = #checkStateCd:VARCHAR#
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="cntChkId">
		                    A.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#,'-','')
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="planYmd">
		                    A.PLAN_YMD = #planYmd:VARCHAR#
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="workUserId">
		                    A.WORK_USER_ID = #workUserId:VARCHAR#
		                </isNotEmpty>
		            </dynamic>
		            <!--cubrid ORDER BY RECORD_CENTER_ID, CNTCHK_ID DESC-->
		            ORDER BY A.RECORD_CENTER_ID, CNTCHK_ID DESC
		        ) E
		        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
		    ) F
		    WHERE F.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
		) G
		ORDER BY G.rnum
	</select>
	
	
	<!-- 
		정수점검_결과등록
		: 정수점검계획서 기록물철 목록을 조회한다.
	 -->
	<resultMap id="findCntChkRsltFolderPagedList-result" class="rms.presv.booksf.domain.BooksfCntChk">
		<result property="folderId" 			column="FOLDER_ID"/>		<!-- 기록물철ID -->
		<result property="stakrmMngNo" 			column="STAKRM_MNG_NO"/>	<!-- 관리번호 -->
		<result property="title" 				column="TITLE"/>			<!-- 철제목 -->
		<result property="creatYyyy"			column="CREAT_YYYY"/>		<!-- 생산년도 -->
		<result property="presvTermNm"			column="PRESV_TERM_NM"/>	<!-- 보존기간 -->
		<result property="arngInfo"				column="ARNG_INFO"/>		<!-- 배치정보 -->
		<result property="defctFlagNm"			column="DEFCT_FLAG_NM"/>	<!-- 이상유무 -->
		<result property="handlRsltCont"		column="HANDL_RSLT_CONT"/>	<!-- 조치결과 -->
	</resultMap>
	<select id="countCntChkRsltFolderPagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultClass="java.lang.Long">
		SELECT COUNT(1) 
        FROM TB_RDFOLDER A, TB_SRCNTCHK B, TB_SRCNTCHKDETL C, TB_SRBOOKSFARNGDETL D, TB_ZZCOMCD E 
        WHERE B.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
        AND B.CNTCHK_ID = C.CNTCHK_ID
        AND C.FOLDER_ID = D.FOLDER_ID
        AND C.FOLDER_ID = A.FOLDER_ID
        AND A.FOLDER_KEEP_STATE_CD IN ('01','04')
        AND (A.PRESV_TERM_CD = E.COM_CD and E.COM_TYPE_CD = 'RD07')
        AND C.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
        AND C.RECORD_CENTER_ID = A.RECORD_CENTER_ID
        AND C.RECORD_CENTER_ID = B.RECORD_CENTER_ID
        AND C.RECORD_CENTER_ID = D.RECORD_CENTER_ID
	</select>
	<select id="findCntChkRsltFolderPagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findCntChkRsltFolderPagedList-result">
		SELECT H.folder_id
		      ,H.stakrm_mng_no
		      ,H.title
		      ,H.creat_yyyy
		      ,H.com_cd_nm AS presv_term_nm
		      ,(H.stakrm_id||'-'||H.booksf_id||'-'||H.booksf_shelf_cno||'-'||H.booksf_shelf_rno) AS arng_info
		      ,DECODE(H.defct_flag,'0','정상','1','이상','') AS defct_flag_nm
		      ,H.handl_rslt_cont
		FROM (
		    SELECT G.*
		    FROM (
		        SELECT ROWNUM AS rnum
		                ,F.*
		        FROM (
		            SELECT C.FOLDER_ID, A.STAKRM_MNG_NO, A.TITLE, A.CREAT_YYYY, E.COM_CD_NM
		                  ,D.STAKRM_ID, D.BOOKSF_ID, D.BOOKSF_SHELF_CNO, D.BOOKSF_SHELF_RNO, C.DEFCT_FLAG
		                  ,C.HANDL_RSLT_CONT     
		            FROM TB_RDFOLDER A, TB_SRCNTCHK B, TB_SRCNTCHKDETL C, TB_SRBOOKSFARNGDETL D, TB_ZZCOMCD E 
		            WHERE B.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
		            AND B.CNTCHK_ID = C.CNTCHK_ID
		            AND C.FOLDER_ID = D.FOLDER_ID
		            AND C.FOLDER_ID = A.FOLDER_ID
		            AND A.FOLDER_KEEP_STATE_CD IN ('01','04')
		            AND (A.PRESV_TERM_CD = E.COM_CD and E.COM_TYPE_CD = 'RD07')
		            AND C.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		            AND C.RECORD_CENTER_ID = A.RECORD_CENTER_ID
		            AND C.RECORD_CENTER_ID = B.RECORD_CENTER_ID
		            AND C.RECORD_CENTER_ID = D.RECORD_CENTER_ID
		        ) F
		        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
		    ) G
		    WHERE G.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
		) H
		ORDER BY H.rnum
	</select>
	
	<!-- 
		정수점검_결과등록
		: 점검결과를 등록한다.
	 -->
	<update id="updateCntChkRslt" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		UPDATE TB_SRCNTCHKDETL
		   SET DEFCT_FLAG = #defctFlag:VARCHAR#
		     , HANDL_RSLT_CONT = #handlRsltCont:VARCHAR#
		     , CHECK_YMD = #checkYmd:VARCHAR#
		 WHERE RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		   AND CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '') 
		   AND FOLDER_ID = #folderId:VARCHAR#
	</update>
	
	<!-- 
		정수점검_결과등록
		UPDATE(정수점검:점검상태(1-결과등록 or 2-점검완료),점검일자) 
	-->
	<update id="updateCntChk" parameterClass="rms.presv.booksf.domain.BooksfCntChk">	
		UPDATE TB_SRCNTCHK
		   SET CHECK_STATE_CD = #checkStateCd:VARCHAR#
		   	  ,CHECK_YMD = #checkYmd:VARCHAR#	
		 WHERE CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
		   AND RECORD_CENTER_ID = #recordCenterId:VARCHAR#
	</update>
	
	<!-- 
		정수점검 _점검결과등록
		: 존재하는 서고/서가 인지 확인
	 -->
	<select id="findCntBooksf" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultClass="int">
		SELECT COUNT(*)
		  FROM TB_SRBOOKSF
		 WHERE RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		   AND STAKRM_ID=#stakrmId:VARCHAR#
		   AND BOOKSF_ID=#booksfId:VARCHAR#
		   AND SHELF_C_CNT > #booksfShelfCno:VARCHAR#
		   AND SHELF_R_CNT > #booksfShelfRno:VARCHAR#
	</select>
	
	<!-- 
		정수점검_점검결과등록
		: 기록물이 해당 서고서가에 존재하는지 확인
	 -->
	<select id="findCntFolder" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultClass="int">
		SELECT COUNT(*)
          FROM TB_RDFOLDER A, TB_SRBOOKSFARNGDETL B
         WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
           AND A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
           AND A.FOLDER_ID = B.FOLDER_ID
           AND REPLACE(A.STAKRM_MNG_NO,'-','') = #stakrmMngNo:VARCHAR#
           AND B.STAKRM_ID = #stakrmId:VARCHAR#
           AND B.BOOKSF_ID = #booksfId:VARCHAR#
           AND B.BOOKSF_SHELF_CNO = #booksfShelfCno:VARCHAR#
           AND B.BOOKSF_SHELF_RNO = #booksfShelfRno:VARCHAR#
           AND A.FOLDER_KEEP_STATE_CD IN ('01','04')         
	</select>
	
	<!-- 
		정수점검_점검결과등록
		: 바코드등록시 해당 바코드의 관리번호에 해당하는 기록물철 목록 조회	
	 -->
	<resultMap id="findCntChkBarcdFolder-result"			class="rms.presv.booksf.domain.BooksfCntChk" >
		<result property="folderId" 			column="FOLDER_ID"/>		<!-- 기록물철ID -->
	</resultMap>
	<select id="findCntChkBarcdFolder" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findCntChkBarcdFolder-result">
		SELECT FOLDER_ID
		  FROM TB_RDFOLDER   
		 WHERE RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		   AND REPLACE(STAKRM_MNG_NO,'-','') = #stakrmMngNo:VARCHAR#
	</select>
	
	<!-- 
		정수점검_점검결과등록
		: 바코드등록시 정수점검계획상세목록을 등록한다.
	 -->
	<insert id="createCntChkBarcdFolder" parameterClass="rms.presv.booksf.domain.BooksfCntChk"> 
		 INSERT INTO TB_SRCNTCHKDETL(record_center_id, cntchk_id, folder_id, stakrm_id, booksf_id)
		 SELECT #recordCenterId:VARCHAR#,REPLACE(#cntChkId:VARCHAR#, '-', ''),A.folder_id,#stakrmId:VARCHAR#,#booksfId:VARCHAR#  
		   FROM TB_SRBOOKSFARNGDETL A,TB_RDFOLDER B
		  WHERE A.RECORD_CENTER_ID=B.RECORD_CENTER_ID
		    AND A.FOLDER_ID=B.FOLDER_ID
		    AND B.FOLDER_KEEP_STATE_CD IN ('01','04')
		    AND A.stakrm_id = #stakrmId:VARCHAR#
		    AND A.booksf_id = #booksfId:VARCHAR#
		    AND A.record_center_id = #recordCenterId:VARCHAR#
 	</insert>
 	
 	<!-- 
 		정수점검_점검결과등록
 		: 바코드등록시 바코드에 등록되지않은 기록물철은 상태를 '이상(1)'으로 갱신
 	 -->
	<update id="updateCntChkBarcode" parameterClass="rms.presv.booksf.domain.BooksfCntChk">
		UPDATE TB_SRCNTCHKDETL
		   SET defct_flag = '1'		<!-- 이상 -->
		 WHERE record_center_id = #recordCenterId:VARCHAR#
		   AND cntchk_id = #cntChkId:VARCAHR#
		   AND folder_id IN (SELECT folder_id
		                       FROM TB_SRCNTCHKDETL
		                      WHERE defct_flag IS NULL
		                        AND record_center_id = #recordCenterId:VARCHAR#
		                        AND cntchk_id = #cntChkId:VARCAHR#)
	</update> 
	
	<!-- 
		정수점검_점검현황
		: 계획서 목록을 조회한다.
	 -->
	<resultMap id="findBooksfCntChkCurStatePagedList-result" class="rms.presv.booksf.domain.BooksfCntChk">
		<result property="cntChkId" 			column="CNTCHK_ID"/>		<!-- 계획서번호 -->
		<result property="stakrmId" 			column="STAKRM_ID"/>		<!-- 서고번호 -->
		<result property="booksfId" 			column="BOOKSF_ID"/>		<!-- 서가번호 -->
		<result property="folderCnt" 			column="FOLDER_CNT"/>		<!-- 기록물철수 -->
		<result property="workUserNm"			column="WORK_USER_NM"/>		<!-- 담당자 -->	
		<result property="checkYmd"				column="CHECK_YMD"/>		<!-- 점검일자 -->
		<result property="checkStateNm"			column="CHECK_STATE_NM"/>	<!-- 상태 -->	
	</resultMap>
	<select id="countBooksfCntChkCurStatePagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultClass="java.lang.Long">
		SELECT COUNT(1)
        FROM (
            SELECT DISTINCT A.CNTCHK_ID, B.STAKRM_ID, B.BOOKSF_ID, D.USER_NM, A.CHECK_YMD
                    , E.COM_CD_NM
            FROM TB_SRCNTCHK A, TB_SRCNTCHKDETL B, TB_STUSER D, TB_ZZCOMCD E
            WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
            AND A.CNTCHK_ID = B.CNTCHK_ID
            AND A.WORK_USER_ID = D.USER_ID
            AND (A.CHECK_STATE_CD = E.COM_CD and E.COM_TYPE_CD = 'SR06')
            AND A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
            AND A.RECORD_CENTER_ID = D.RECORD_CENTER_ID
            <dynamic prepend="AND">               
                <isNotEmpty prepend="AND" property="cntChkId">
                    A.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
                </isNotEmpty>
                <isNotEmpty prepend="AND" property="checkYmd">
                    A.CHECK_YMD = #checkYmd:VARCHAR#
                </isNotEmpty>
                <isNotEmpty prepend="AND" property="stakrmId">
                    B.SAKRM_ID = #stakrmId:VARCHAR#
                </isNotEmpty>
                <isNotEmpty prepend="AND" property="booksfId">
                    B.BOOKSF_ID = #booksfId:VARCHAR#
                </isNotEmpty>
            </dynamic>    
        ) F 
	</select>
	<select id="findBooksfCntChkCurStatePagedList" parameterClass="rms.presv.booksf.domain.BooksfCntChk" resultMap="findBooksfCntChkCurStatePagedList-result">
		SELECT SUBSTR(H.cntchk_id, 1, 4)||'-'||SUBSTR(H.cntchk_id, 5, 6) AS cntchk_id
		        ,H.stakrm_id
		        ,H.booksf_id
		        ,(SELECT COUNT(C.folder_id) FROM TB_SRCNTCHKDETL C WHERE C.cntchk_id = H.cntchk_id) AS folder_cnt
		        ,H.user_nm AS work_user_nm
		        ,H.check_ymd
		        ,com_cd_nm AS check_state_nm        
		FROM (
		    SELECT G.*
		    FROM (
		        SELECT ROWNUM AS rnum
		                ,F.*
		        FROM (
		            SELECT DISTINCT A.CNTCHK_ID, B.STAKRM_ID, B.BOOKSF_ID, D.USER_NM, A.CHECK_YMD
		                    , E.COM_CD_NM
		            FROM TB_SRCNTCHK A, TB_SRCNTCHKDETL B, TB_STUSER D, TB_ZZCOMCD E
		            WHERE A.RECORD_CENTER_ID = #recordCenterId:VARCHAR#
		            AND A.CNTCHK_ID = B.CNTCHK_ID
		            AND A.WORK_USER_ID = D.USER_ID
		            AND (A.CHECK_STATE_CD = E.COM_CD and E.COM_TYPE_CD = 'SR06')
		            AND A.RECORD_CENTER_ID = B.RECORD_CENTER_ID
		            AND A.RECORD_CENTER_ID = D.RECORD_CENTER_ID
		            <dynamic prepend="AND">               
		                <isNotEmpty prepend="AND" property="cntChkId">
		                    A.CNTCHK_ID = REPLACE(#cntChkId:VARCHAR#, '-', '')
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="checkYmd">
		                    A.CHECK_YMD = #checkYmd:VARCHAR#
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="stakrmId">
		                    B.SAKRM_ID = #stakrmId:VARCHAR#
		                </isNotEmpty>
		                <isNotEmpty prepend="AND" property="booksfId">
		                    B.BOOKSF_ID = #booksfId:VARCHAR#
		                </isNotEmpty>
		            </dynamic>    
		        ) F 
		        WHERE ROWNUM <![CDATA[<=]]> #pagedEnd:NUMBER#
		    ) G
		    WHERE G.rnum <![CDATA[>=]]> #pagedStart:NUMBER#
		) H
		ORDER BY H.rnum
	</select>
	
	
</sqlMap>
